
Progetto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c634  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c60  0800c818  0800c818  0000d818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d478  0800d478  0000f1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d478  0800d478  0000e478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d480  0800d480  0000f1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d480  0800d480  0000e480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d484  0800d484  0000e484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800d488  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000084f8  200001f8  0800d680  0000f1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200086f0  0800d680  0000f6f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d36f  00000000  00000000  0000f228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e34  00000000  00000000  0002c597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  000303d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012a5  00000000  00000000  00031be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b6ff  00000000  00000000  00032e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002069a  00000000  00000000  0005e584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117800  00000000  00000000  0007ec1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019641e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a38  00000000  00000000  00196464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0019de9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c7fc 	.word	0x0800c7fc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	0800c7fc 	.word	0x0800c7fc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	2220      	movs	r2, #32
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f008 f806 	bl	8009052 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001046:	4b2c      	ldr	r3, [pc, #176]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 8001048:	4a2c      	ldr	r2, [pc, #176]	@ (80010fc <MX_ADC2_Init+0xc8>)
 800104a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800104c:	4b2a      	ldr	r3, [pc, #168]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 800104e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001052:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001054:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105a:	4b27      	ldr	r3, [pc, #156]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001060:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001066:	4b24      	ldr	r3, [pc, #144]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106c:	4b22      	ldr	r3, [pc, #136]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 800106e:	2204      	movs	r2, #4
 8001070:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 8001074:	2200      	movs	r2, #0
 8001076:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 800107a:	2200      	movs	r2, #0
 800107c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800107e:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 8001080:	2201      	movs	r2, #1
 8001082:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001084:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 800108e:	f44f 62ac 	mov.w	r2, #1376	@ 0x560
 8001092:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001094:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 8001096:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800109a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800109c:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 80010a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010b4:	4810      	ldr	r0, [pc, #64]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 80010b6:	f001 fe49 	bl	8002d4c <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80010c0:	f000 fb76 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <MX_ADC2_Init+0xcc>)
 80010c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c8:	2306      	movs	r3, #6
 80010ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010d0:	237f      	movs	r3, #127	@ 0x7f
 80010d2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010d4:	2304      	movs	r3, #4
 80010d6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_ADC2_Init+0xc4>)
 80010e2:	f002 f939 	bl	8003358 <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 80010ec:	f000 fb60 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000214 	.word	0x20000214
 80010fc:	50000100 	.word	0x50000100
 8001100:	21800100 	.word	0x21800100

08001104 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b09e      	sub	sp, #120	@ 0x78
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2254      	movs	r2, #84	@ 0x54
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f007 ff94 	bl	8009052 <memset>
  if(adcHandle->Instance==ADC2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a33      	ldr	r2, [pc, #204]	@ (80011fc <HAL_ADC_MspInit+0xf8>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d15e      	bne.n	80011f2 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001134:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001138:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800113a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800113e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4618      	mov	r0, r3
 8001146:	f005 f8f1 	bl	800632c <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001150:	f000 fb2e 	bl	80017b0 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001154:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <HAL_ADC_MspInit+0xfc>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001158:	4a29      	ldr	r2, [pc, #164]	@ (8001200 <HAL_ADC_MspInit+0xfc>)
 800115a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800115e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <HAL_ADC_MspInit+0xfc>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116c:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <HAL_ADC_MspInit+0xfc>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001170:	4a23      	ldr	r2, [pc, #140]	@ (8001200 <HAL_ADC_MspInit+0xfc>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001178:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <HAL_ADC_MspInit+0xfc>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC2     ------> ADC2_IN8
    */
    GPIO_InitStruct.Pin = PPG_Pin;
 8001184:	2304      	movs	r3, #4
 8001186:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001188:	2303      	movs	r3, #3
 800118a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(PPG_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001194:	4619      	mov	r1, r3
 8001196:	481b      	ldr	r0, [pc, #108]	@ (8001204 <HAL_ADC_MspInit+0x100>)
 8001198:	f003 fb40 	bl	800481c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 800119c:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <HAL_ADC_MspInit+0x104>)
 800119e:	4a1b      	ldr	r2, [pc, #108]	@ (800120c <HAL_ADC_MspInit+0x108>)
 80011a0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <HAL_ADC_MspInit+0x104>)
 80011a4:	2224      	movs	r2, #36	@ 0x24
 80011a6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011a8:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <HAL_ADC_MspInit+0x104>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <HAL_ADC_MspInit+0x104>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <HAL_ADC_MspInit+0x104>)
 80011b6:	2280      	movs	r2, #128	@ 0x80
 80011b8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <HAL_ADC_MspInit+0x104>)
 80011bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011c0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <HAL_ADC_MspInit+0x104>)
 80011c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011c8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <HAL_ADC_MspInit+0x104>)
 80011cc:	2220      	movs	r2, #32
 80011ce:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80011d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <HAL_ADC_MspInit+0x104>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80011d6:	480c      	ldr	r0, [pc, #48]	@ (8001208 <HAL_ADC_MspInit+0x104>)
 80011d8:	f003 f854 	bl	8004284 <HAL_DMA_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80011e2:	f000 fae5 	bl	80017b0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a07      	ldr	r2, [pc, #28]	@ (8001208 <HAL_ADC_MspInit+0x104>)
 80011ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80011ec:	4a06      	ldr	r2, [pc, #24]	@ (8001208 <HAL_ADC_MspInit+0x104>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80011f2:	bf00      	nop
 80011f4:	3778      	adds	r7, #120	@ 0x78
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	50000100 	.word	0x50000100
 8001200:	40021000 	.word	0x40021000
 8001204:	48000800 	.word	0x48000800
 8001208:	20000280 	.word	0x20000280
 800120c:	40020008 	.word	0x40020008

08001210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_DMA_Init+0x50>)
 8001218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800121a:	4a11      	ldr	r2, [pc, #68]	@ (8001260 <MX_DMA_Init+0x50>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6493      	str	r3, [r2, #72]	@ 0x48
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_DMA_Init+0x50>)
 8001224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_DMA_Init+0x50>)
 8001230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001232:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <MX_DMA_Init+0x50>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6493      	str	r3, [r2, #72]	@ 0x48
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_DMA_Init+0x50>)
 800123c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	200b      	movs	r0, #11
 800124c:	f002 ffe5 	bl	800421a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001250:	200b      	movs	r0, #11
 8001252:	f002 fffc 	bl	800424e <HAL_NVIC_EnableIRQ>

}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000

08001264 <BCD_Decimal>:
#include "stdio.h"

uint8_t data[BUFFER_SIZE];
char *Week[] = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};

uint8_t BCD_Decimal(int value) {
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	return (uint8_t) ((value / 16 * 10) + (value % 16));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	da00      	bge.n	8001274 <BCD_Decimal+0x10>
 8001272:	330f      	adds	r3, #15
 8001274:	111b      	asrs	r3, r3, #4
 8001276:	b2db      	uxtb	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	4413      	add	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	b2da      	uxtb	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4259      	negs	r1, r3
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	f001 010f 	and.w	r1, r1, #15
 800128e:	bf58      	it	pl
 8001290:	424b      	negpl	r3, r1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	b2db      	uxtb	r3, r3
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <Get_Date>:
	if (status != HAL_OK) {
		uint32_t errorCode = HAL_I2C_GetError(hi2c);
	}
}

void Get_Date(Date_Time *dt, I2C_HandleTypeDef *hi2c) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af04      	add	r7, sp, #16
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c,
 80012ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	2307      	movs	r3, #7
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <Get_Date+0xa0>)
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	2200      	movs	r2, #0
 80012c0:	21d0      	movs	r1, #208	@ 0xd0
 80012c2:	6838      	ldr	r0, [r7, #0]
 80012c4:	f003 fddc 	bl	8004e80 <HAL_I2C_Mem_Read>
 80012c8:	4603      	mov	r3, r0
 80012ca:	74fb      	strb	r3, [r7, #19]
			(uint16_t) (ADDRESS_SLAVE), (uint16_t) (ADDRESS_SECONDS),
			ADDRESS_SIZE, (uint8_t*) data, BUFFER_SIZE, 1000);

	if (status == HAL_OK) {
 80012cc:	7cfb      	ldrb	r3, [r7, #19]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d133      	bne.n	800133a <Get_Date+0x96>

		uint8_t values[BUFFER_SIZE];
		for (int i = 0; i < BUFFER_SIZE; i++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e011      	b.n	80012fc <Get_Date+0x58>
			values[i] = BCD_Decimal((int) data[i]);
 80012d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001344 <Get_Date+0xa0>)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	4413      	add	r3, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ffbf 	bl	8001264 <BCD_Decimal>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4619      	mov	r1, r3
 80012ea:	f107 020c 	add.w	r2, r7, #12
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	4413      	add	r3, r2
 80012f2:	460a      	mov	r2, r1
 80012f4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < BUFFER_SIZE; i++) {
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	3301      	adds	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2b06      	cmp	r3, #6
 8001300:	ddea      	ble.n	80012d8 <Get_Date+0x34>
		}

		dt->Seconds = values[0];
 8001302:	7b3a      	ldrb	r2, [r7, #12]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	701a      	strb	r2, [r3, #0]
		dt->Minutes = values[1];
 8001308:	7b7a      	ldrb	r2, [r7, #13]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	705a      	strb	r2, [r3, #1]
		dt->Hours = values[2];
 800130e:	7bba      	ldrb	r2, [r7, #14]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	709a      	strb	r2, [r3, #2]
		dt->Day = Week[values[3] - 1];
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	3b01      	subs	r3, #1
 8001318:	4a0b      	ldr	r2, [pc, #44]	@ (8001348 <Get_Date+0xa4>)
 800131a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	605a      	str	r2, [r3, #4]
		dt->Date = values[4];
 8001322:	7c3a      	ldrb	r2, [r7, #16]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	721a      	strb	r2, [r3, #8]
		dt->Month = values [5];
 8001328:	7c7a      	ldrb	r2, [r7, #17]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	725a      	strb	r2, [r3, #9]
		dt->Year = (2000 + values[6]);
 800132e:	7cbb      	ldrb	r3, [r7, #18]
 8001330:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001334:	b29a      	uxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	815a      	strh	r2, [r3, #10]
	}

}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200002e0 	.word	0x200002e0
 8001348:	20000000 	.word	0x20000000

0800134c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <MX_GPIO_Init+0x44>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4a0e      	ldr	r2, [pc, #56]	@ (8001390 <MX_GPIO_Init+0x44>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135e:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <MX_GPIO_Init+0x44>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <MX_GPIO_Init+0x44>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <MX_GPIO_Init+0x44>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <MX_GPIO_Init+0x44>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]

}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000

08001394 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <MX_I2C3_Init+0x74>)
 800139a:	4a1c      	ldr	r2, [pc, #112]	@ (800140c <MX_I2C3_Init+0x78>)
 800139c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A0A7FB;
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001410 <MX_I2C3_Init+0x7c>)
 80013a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80013a4:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013aa:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b0:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80013b6:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013ce:	480e      	ldr	r0, [pc, #56]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013d0:	f003 fba6 	bl	8004b20 <HAL_I2C_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80013da:	f000 f9e9 	bl	80017b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013de:	2100      	movs	r1, #0
 80013e0:	4809      	ldr	r0, [pc, #36]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013e2:	f004 f929 	bl	8005638 <HAL_I2CEx_ConfigAnalogFilter>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80013ec:	f000 f9e0 	bl	80017b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013f0:	2100      	movs	r1, #0
 80013f2:	4805      	ldr	r0, [pc, #20]	@ (8001408 <MX_I2C3_Init+0x74>)
 80013f4:	f004 f96b 	bl	80056ce <HAL_I2CEx_ConfigDigitalFilter>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80013fe:	f000 f9d7 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200002e8 	.word	0x200002e8
 800140c:	40007800 	.word	0x40007800
 8001410:	30a0a7fb 	.word	0x30a0a7fb

08001414 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b09e      	sub	sp, #120	@ 0x78
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	2254      	movs	r2, #84	@ 0x54
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f007 fe0c 	bl	8009052 <memset>
  if(i2cHandle->Instance==I2C3)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a1f      	ldr	r2, [pc, #124]	@ (80014bc <HAL_I2C_MspInit+0xa8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d137      	bne.n	80014b4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001444:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001448:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800144a:	2300      	movs	r3, #0
 800144c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	4618      	mov	r0, r3
 8001454:	f004 ff6a 	bl	800632c <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800145e:	f000 f9a7 	bl	80017b0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <HAL_I2C_MspInit+0xac>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	4a16      	ldr	r2, [pc, #88]	@ (80014c0 <HAL_I2C_MspInit+0xac>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146e:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <HAL_I2C_MspInit+0xac>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800147a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800147e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001480:	2312      	movs	r3, #18
 8001482:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001484:	2301      	movs	r3, #1
 8001486:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800148c:	2308      	movs	r3, #8
 800148e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001490:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001494:	4619      	mov	r1, r3
 8001496:	480b      	ldr	r0, [pc, #44]	@ (80014c4 <HAL_I2C_MspInit+0xb0>)
 8001498:	f003 f9c0 	bl	800481c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800149c:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <HAL_I2C_MspInit+0xac>)
 800149e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a0:	4a07      	ldr	r2, [pc, #28]	@ (80014c0 <HAL_I2C_MspInit+0xac>)
 80014a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80014a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014a8:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_I2C_MspInit+0xac>)
 80014aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80014b4:	bf00      	nop
 80014b6:	3778      	adds	r7, #120	@ 0x78
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40007800 	.word	0x40007800
 80014c0:	40021000 	.word	0x40021000
 80014c4:	48000800 	.word	0x48000800

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014cc:	f001 f93f 	bl	800274e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d0:	f000 f81a 	bl	8001508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d4:	f7ff ff3a 	bl	800134c <MX_GPIO_Init>
  MX_DMA_Init();
 80014d8:	f7ff fe9a 	bl	8001210 <MX_DMA_Init>
  MX_ADC2_Init();
 80014dc:	f7ff fdaa 	bl	8001034 <MX_ADC2_Init>
  MX_TIM2_Init();
 80014e0:	f000 ff90 	bl	8002404 <MX_TIM2_Init>
  MX_I2C3_Init();
 80014e4:	f7ff ff56 	bl	8001394 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 80014e8:	f001 f864 	bl	80025b4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80014ec:	f000 ffd8 	bl	80024a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init(&hi2c3);
 80014f0:	4803      	ldr	r0, [pc, #12]	@ (8001500 <main+0x38>)
 80014f2:	f000 fb21 	bl	8001b38 <ssd1306_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 80014f6:	4803      	ldr	r0, [pc, #12]	@ (8001504 <main+0x3c>)
 80014f8:	f005 f9be 	bl	8006878 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <main+0x34>
 8001500:	200002e8 	.word	0x200002e8
 8001504:	200084c0 	.word	0x200084c0

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b094      	sub	sp, #80	@ 0x50
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	2238      	movs	r2, #56	@ 0x38
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f007 fd9b 	bl	8009052 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800152a:	2000      	movs	r0, #0
 800152c:	f004 f91c 	bl	8005768 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001534:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800153a:	2340      	movs	r3, #64	@ 0x40
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153e:	2302      	movs	r3, #2
 8001540:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001542:	2302      	movs	r3, #2
 8001544:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001546:	2304      	movs	r3, #4
 8001548:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800154a:	2355      	movs	r3, #85	@ 0x55
 800154c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800154e:	2302      	movs	r3, #2
 8001550:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001552:	2302      	movs	r3, #2
 8001554:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001556:	2302      	movs	r3, #2
 8001558:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155a:	f107 0318 	add.w	r3, r7, #24
 800155e:	4618      	mov	r0, r3
 8001560:	f004 f9b6 	bl	80058d0 <HAL_RCC_OscConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800156a:	f000 f921 	bl	80017b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156e:	230f      	movs	r3, #15
 8001570:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001572:	2303      	movs	r3, #3
 8001574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2104      	movs	r1, #4
 8001586:	4618      	mov	r0, r3
 8001588:	f004 fcb4 	bl	8005ef4 <HAL_RCC_ClockConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001592:	f000 f90d 	bl	80017b0 <Error_Handler>
  }
}
 8001596:	bf00      	nop
 8001598:	3750      	adds	r7, #80	@ 0x50
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80015a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a2:	b0ab      	sub	sp, #172	@ 0xac
 80015a4:	af06      	add	r7, sp, #24
 80015a6:	6078      	str	r0, [r7, #4]

	 Get_Date(&date, &hi2c3 );
 80015a8:	4958      	ldr	r1, [pc, #352]	@ (800170c <HAL_ADC_ConvCpltCallback+0x16c>)
 80015aa:	4859      	ldr	r0, [pc, #356]	@ (8001710 <HAL_ADC_ConvCpltCallback+0x170>)
 80015ac:	f7ff fe7a 	bl	80012a4 <Get_Date>
	 char bpm[30];




	 sprintf(msg, "%d/%d/%d  %d:%d:%d \n\r%d\n\r",date.Year,date.Month ,date.Date, date.Hours, date.Minutes, date.Seconds, data_out);
 80015b0:	4b57      	ldr	r3, [pc, #348]	@ (8001710 <HAL_ADC_ConvCpltCallback+0x170>)
 80015b2:	895b      	ldrh	r3, [r3, #10]
 80015b4:	461e      	mov	r6, r3
 80015b6:	4b56      	ldr	r3, [pc, #344]	@ (8001710 <HAL_ADC_ConvCpltCallback+0x170>)
 80015b8:	7a5b      	ldrb	r3, [r3, #9]
 80015ba:	469c      	mov	ip, r3
 80015bc:	4b54      	ldr	r3, [pc, #336]	@ (8001710 <HAL_ADC_ConvCpltCallback+0x170>)
 80015be:	7a1b      	ldrb	r3, [r3, #8]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b53      	ldr	r3, [pc, #332]	@ (8001710 <HAL_ADC_ConvCpltCallback+0x170>)
 80015c4:	789b      	ldrb	r3, [r3, #2]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4b51      	ldr	r3, [pc, #324]	@ (8001710 <HAL_ADC_ConvCpltCallback+0x170>)
 80015ca:	785b      	ldrb	r3, [r3, #1]
 80015cc:	461c      	mov	r4, r3
 80015ce:	4b50      	ldr	r3, [pc, #320]	@ (8001710 <HAL_ADC_ConvCpltCallback+0x170>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461d      	mov	r5, r3
 80015d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001714 <HAL_ADC_ConvCpltCallback+0x174>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80015dc:	9304      	str	r3, [sp, #16]
 80015de:	9503      	str	r5, [sp, #12]
 80015e0:	9402      	str	r4, [sp, #8]
 80015e2:	9101      	str	r1, [sp, #4]
 80015e4:	9200      	str	r2, [sp, #0]
 80015e6:	4663      	mov	r3, ip
 80015e8:	4632      	mov	r2, r6
 80015ea:	494b      	ldr	r1, [pc, #300]	@ (8001718 <HAL_ADC_ConvCpltCallback+0x178>)
 80015ec:	f007 fcce 	bl	8008f8c <siprintf>
	 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80015f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe fe63 	bl	80002c0 <strlen>
 80015fa:	4603      	mov	r3, r0
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	4845      	ldr	r0, [pc, #276]	@ (800171c <HAL_ADC_ConvCpltCallback+0x17c>)
 8001608:	f005 fee6 	bl	80073d8 <HAL_UART_Transmit>

	 add_point(&graph, graph.num_points, data_out);
 800160c:	4b44      	ldr	r3, [pc, #272]	@ (8001720 <HAL_ADC_ConvCpltCallback+0x180>)
 800160e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001612:	f8d3 3e88 	ldr.w	r3, [r3, #3720]	@ 0xe88
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161e:	4b3d      	ldr	r3, [pc, #244]	@ (8001714 <HAL_ADC_ConvCpltCallback+0x174>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	ee07 3a10 	vmov	s14, r3
 8001626:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800162a:	eef0 0a47 	vmov.f32	s1, s14
 800162e:	eeb0 0a67 	vmov.f32	s0, s15
 8001632:	483b      	ldr	r0, [pc, #236]	@ (8001720 <HAL_ADC_ConvCpltCallback+0x180>)
 8001634:	f000 f8c2 	bl	80017bc <add_point>


	detect_peaks(&graph, peaks_x, peaks_y,  &num_peaks);
 8001638:	4b3a      	ldr	r3, [pc, #232]	@ (8001724 <HAL_ADC_ConvCpltCallback+0x184>)
 800163a:	4a3b      	ldr	r2, [pc, #236]	@ (8001728 <HAL_ADC_ConvCpltCallback+0x188>)
 800163c:	493b      	ldr	r1, [pc, #236]	@ (800172c <HAL_ADC_ConvCpltCallback+0x18c>)
 800163e:	4838      	ldr	r0, [pc, #224]	@ (8001720 <HAL_ADC_ConvCpltCallback+0x180>)
 8001640:	f000 f9fa 	bl	8001a38 <detect_peaks>
	if (num_peaks > 1) {
 8001644:	4b37      	ldr	r3, [pc, #220]	@ (8001724 <HAL_ADC_ConvCpltCallback+0x184>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b01      	cmp	r3, #1
 800164a:	dd4b      	ble.n	80016e4 <HAL_ADC_ConvCpltCallback+0x144>
		float interval = (1/ ((peaks_x[num_peaks-1] - peaks_x[num_peaks-2])+(peaks_x[num_peaks-2] - peaks_x[num_peaks-3]))/2);
 800164c:	4b35      	ldr	r3, [pc, #212]	@ (8001724 <HAL_ADC_ConvCpltCallback+0x184>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3b01      	subs	r3, #1
 8001652:	4a36      	ldr	r2, [pc, #216]	@ (800172c <HAL_ADC_ConvCpltCallback+0x18c>)
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	ed93 7a00 	vldr	s14, [r3]
 800165c:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <HAL_ADC_ConvCpltCallback+0x184>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3b02      	subs	r3, #2
 8001662:	4a32      	ldr	r2, [pc, #200]	@ (800172c <HAL_ADC_ConvCpltCallback+0x18c>)
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001670:	4b2c      	ldr	r3, [pc, #176]	@ (8001724 <HAL_ADC_ConvCpltCallback+0x184>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3b02      	subs	r3, #2
 8001676:	4a2d      	ldr	r2, [pc, #180]	@ (800172c <HAL_ADC_ConvCpltCallback+0x18c>)
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	edd3 6a00 	vldr	s13, [r3]
 8001680:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <HAL_ADC_ConvCpltCallback+0x184>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3b03      	subs	r3, #3
 8001686:	4a29      	ldr	r2, [pc, #164]	@ (800172c <HAL_ADC_ConvCpltCallback+0x18c>)
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001698:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800169c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016a0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80016a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a8:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		sprintf(bpm, "%.0f bpm ", (6 / interval));
 80016ac:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80016b0:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80016b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016b8:	ee16 0a90 	vmov	r0, s13
 80016bc:	f7fe ff6c 	bl	8000598 <__aeabi_f2d>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	f107 0008 	add.w	r0, r7, #8
 80016c8:	4919      	ldr	r1, [pc, #100]	@ (8001730 <HAL_ADC_ConvCpltCallback+0x190>)
 80016ca:	f007 fc5f 	bl	8008f8c <siprintf>
		ssd1306_SetCursor(10, 50);
 80016ce:	2132      	movs	r1, #50	@ 0x32
 80016d0:	200a      	movs	r0, #10
 80016d2:	f000 fd0b 	bl	80020ec <ssd1306_SetCursor>
		ssd1306_WriteString(bpm, Font_7x10, White);
 80016d6:	4a17      	ldr	r2, [pc, #92]	@ (8001734 <HAL_ADC_ConvCpltCallback+0x194>)
 80016d8:	f107 0008 	add.w	r0, r7, #8
 80016dc:	2301      	movs	r3, #1
 80016de:	ca06      	ldmia	r2, {r1, r2}
 80016e0:	f000 fcde 	bl	80020a0 <ssd1306_WriteString>
	}

	 ssd1306_SetCursor(40, 50);
 80016e4:	2132      	movs	r1, #50	@ 0x32
 80016e6:	2028      	movs	r0, #40	@ 0x28
 80016e8:	f000 fd00 	bl	80020ec <ssd1306_SetCursor>
	 ssd1306_WriteString(msg, Font_7x10, White);
 80016ec:	4a11      	ldr	r2, [pc, #68]	@ (8001734 <HAL_ADC_ConvCpltCallback+0x194>)
 80016ee:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80016f2:	2301      	movs	r3, #1
 80016f4:	ca06      	ldmia	r2, {r1, r2}
 80016f6:	f000 fcd3 	bl	80020a0 <ssd1306_WriteString>
	 ssd1306_ScrollLeft();
 80016fa:	f000 fd0f 	bl	800211c <ssd1306_ScrollLeft>
	 ssd1306_UpdateScreen(&hi2c3);
 80016fe:	4803      	ldr	r0, [pc, #12]	@ (800170c <HAL_ADC_ConvCpltCallback+0x16c>)
 8001700:	f000 fb5e 	bl	8001dc0 <ssd1306_UpdateScreen>

}
 8001704:	bf00      	nop
 8001706:	3794      	adds	r7, #148	@ 0x94
 8001708:	46bd      	mov	sp, r7
 800170a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170c:	200002e8 	.word	0x200002e8
 8001710:	2000033c 	.word	0x2000033c
 8001714:	20000348 	.word	0x20000348
 8001718:	0800c85c 	.word	0x0800c85c
 800171c:	2000850c 	.word	0x2000850c
 8001720:	2000034c 	.word	0x2000034c
 8001724:	20008060 	.word	0x20008060
 8001728:	20006120 	.word	0x20006120
 800172c:	200041e0 	.word	0x200041e0
 8001730:	0800c878 	.word	0x0800c878
 8001734:	2000001c 	.word	0x2000001c

08001738 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a14      	ldr	r2, [pc, #80]	@ (8001798 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d10e      	bne.n	8001768 <HAL_TIM_PeriodElapsedCallback+0x30>
	    {
	        tim2_seconds_counter = 0;
 800174a:	4b14      	ldr	r3, [pc, #80]	@ (800179c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
	        HAL_TIM_Base_Start_IT(&htim2);
 8001750:	4813      	ldr	r0, [pc, #76]	@ (80017a0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001752:	f005 f891 	bl	8006878 <HAL_TIM_Base_Start_IT>
	        HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&data_out, 1);
 8001756:	2201      	movs	r2, #1
 8001758:	4912      	ldr	r1, [pc, #72]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800175a:	4813      	ldr	r0, [pc, #76]	@ (80017a8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800175c:	f001 fcb2 	bl	80030c4 <HAL_ADC_Start_DMA>
	        HAL_TIM_Base_Stop_IT(&htim3);
 8001760:	4812      	ldr	r0, [pc, #72]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001762:	f005 f901 	bl	8006968 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim2);
			HAL_ADC_Stop_DMA(&hadc2);
		}
	}

}
 8001766:	e013      	b.n	8001790 <HAL_TIM_PeriodElapsedCallback+0x58>
	else if (htim->Instance == TIM2){
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001770:	d10e      	bne.n	8001790 <HAL_TIM_PeriodElapsedCallback+0x58>
		tim2_seconds_counter++;
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	4a08      	ldr	r2, [pc, #32]	@ (800179c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800177a:	6013      	str	r3, [r2, #0]
		if (tim2_seconds_counter >= 10)
 800177c:	4b07      	ldr	r3, [pc, #28]	@ (800179c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b09      	cmp	r3, #9
 8001782:	dd05      	ble.n	8001790 <HAL_TIM_PeriodElapsedCallback+0x58>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001784:	4806      	ldr	r0, [pc, #24]	@ (80017a0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001786:	f005 f8ef 	bl	8006968 <HAL_TIM_Base_Stop_IT>
			HAL_ADC_Stop_DMA(&hadc2);
 800178a:	4807      	ldr	r0, [pc, #28]	@ (80017a8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800178c:	f001 fd6e 	bl	800326c <HAL_ADC_Stop_DMA>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40000400 	.word	0x40000400
 800179c:	20008064 	.word	0x20008064
 80017a0:	20008474 	.word	0x20008474
 80017a4:	20000348 	.word	0x20000348
 80017a8:	20000214 	.word	0x20000214
 80017ac:	200084c0 	.word	0x200084c0

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <Error_Handler+0x8>

080017bc <add_point>:
    graph->num_points = 0;
    graph->min_value = 4095;
    graph->max_value = 0;  // Imposta il valore massimo al minimo valore float
}

void add_point(PlotData *graph, float x, float y) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b096      	sub	sp, #88	@ 0x58
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80017c8:	edc7 0a01 	vstr	s1, [r7, #4]


    float min_input = 1900.0;
 80017cc:	4b8f      	ldr	r3, [pc, #572]	@ (8001a0c <add_point+0x250>)
 80017ce:	647b      	str	r3, [r7, #68]	@ 0x44
    float max_input = 2500.0;
 80017d0:	4b8f      	ldr	r3, [pc, #572]	@ (8001a10 <add_point+0x254>)
 80017d2:	643b      	str	r3, [r7, #64]	@ 0x40

    float min_output = 5.0;
 80017d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001a14 <add_point+0x258>)
 80017d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float max_output = 40.0;
 80017d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001a18 <add_point+0x25c>)
 80017da:	63bb      	str	r3, [r7, #56]	@ 0x38
    char msg[30];
    if(y<min_input || y>max_input){
 80017dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80017e0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80017e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ec:	d408      	bmi.n	8001800 <add_point+0x44>
 80017ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80017f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fe:	dd22      	ble.n	8001846 <add_point+0x8a>
    	sprintf(msg, "%Sensore scollegato ");
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4985      	ldr	r1, [pc, #532]	@ (8001a1c <add_point+0x260>)
 8001806:	4618      	mov	r0, r3
 8001808:	f007 fbc0 	bl	8008f8c <siprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fd55 	bl	80002c0 <strlen>
 8001816:	4603      	mov	r3, r0
 8001818:	b29a      	uxth	r2, r3
 800181a:	f107 0114 	add.w	r1, r7, #20
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	487f      	ldr	r0, [pc, #508]	@ (8001a20 <add_point+0x264>)
 8001824:	f005 fdd8 	bl	80073d8 <HAL_UART_Transmit>
    	ssd1306_SetCursor(10, 40);
 8001828:	2128      	movs	r1, #40	@ 0x28
 800182a:	200a      	movs	r0, #10
 800182c:	f000 fc5e 	bl	80020ec <ssd1306_SetCursor>
		ssd1306_WriteString(msg, Font_7x10, White);
 8001830:	4a7c      	ldr	r2, [pc, #496]	@ (8001a24 <add_point+0x268>)
 8001832:	f107 0014 	add.w	r0, r7, #20
 8001836:	2301      	movs	r3, #1
 8001838:	ca06      	ldmia	r2, {r1, r2}
 800183a:	f000 fc31 	bl	80020a0 <ssd1306_WriteString>
		ssd1306_UpdateScreen(&hi2c3);
 800183e:	487a      	ldr	r0, [pc, #488]	@ (8001a28 <add_point+0x26c>)
 8001840:	f000 fabe 	bl	8001dc0 <ssd1306_UpdateScreen>
 8001844:	e0df      	b.n	8001a06 <add_point+0x24a>

    	return;
    }


    float scaled_y = 40 - ( min_output + ((y - min_input) / (max_input - min_input)) * (max_output - min_output));
 8001846:	ed97 7a01 	vldr	s14, [r7, #4]
 800184a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800184e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001852:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001856:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800185a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001862:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001866:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800186a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800186e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001872:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187a:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001a2c <add_point+0x270>
 800187e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001882:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    float sum=0.0;
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = graph->num_points-6; i<graph->num_points-1; i++){
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001892:	f8d3 3e88 	ldr.w	r3, [r3, #3720]	@ 0xe88
 8001896:	3b06      	subs	r3, #6
 8001898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800189a:	e010      	b.n	80018be <add_point+0x102>
    	sum+=graph->y[i];
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018a0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80018b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    for (int i = graph->num_points-6; i<graph->num_points-1; i++){
 80018b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018ba:	3301      	adds	r3, #1
 80018bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80018c4:	f8d3 3e88 	ldr.w	r3, [r3, #3720]	@ 0xe88
 80018c8:	3b01      	subs	r3, #1
 80018ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbe5      	blt.n	800189c <add_point+0xe0>
    }
    scaled_y-= (sum+scaled_y)/6;
 80018d0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80018d4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018dc:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80018e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018e4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80018e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ec:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34


    if (x >= SSD1306_WIDTH) {
 80018f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018f4:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001a30 <add_point+0x274>
 80018f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001900:	db01      	blt.n	8001906 <add_point+0x14a>
        x = SSD1306_WIDTH - 5;
 8001902:	4b4c      	ldr	r3, [pc, #304]	@ (8001a34 <add_point+0x278>)
 8001904:	60bb      	str	r3, [r7, #8]
    }

    ssd1306_SetCursor(x,scaled_y);
 8001906:	edd7 7a02 	vldr	s15, [r7, #8]
 800190a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800190e:	edc7 7a00 	vstr	s15, [r7]
 8001912:	783b      	ldrb	r3, [r7, #0]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800191a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800191e:	edc7 7a00 	vstr	s15, [r7]
 8001922:	783a      	ldrb	r2, [r7, #0]
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fbdf 	bl	80020ec <ssd1306_SetCursor>
    	if(graph->num_points > 0  ){
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001934:	f8d3 3e88 	ldr.w	r3, [r3, #3720]	@ 0xe88
 8001938:	2b00      	cmp	r3, #0
 800193a:	dd2f      	ble.n	800199c <add_point+0x1e0>
	    	ssd1306_DrawLine(graph->x[graph->num_points-1], graph->y[graph->num_points-1],x,scaled_y,White);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001942:	f8d3 3e88 	ldr.w	r3, [r3, #3720]	@ 0xe88
 8001946:	3b01      	subs	r3, #1
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800195c:	f8d3 3e88 	ldr.w	r3, [r3, #3720]	@ 0xe88
 8001960:	3b01      	subs	r3, #1
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001974:	edd7 7a02 	vldr	s15, [r7, #8]
 8001978:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 800197c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001984:	2301      	movs	r3, #1
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	ee17 3a90 	vmov	r3, s15
 800198c:	ee16 2a10 	vmov	r2, s12
 8001990:	ee16 1a90 	vmov	r1, s13
 8001994:	ee17 0a10 	vmov	r0, s14
 8001998:	f000 faa4 	bl	8001ee4 <ssd1306_DrawLine>
    	}

		graph->x[graph->num_points] = x;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80019a2:	f8d3 3e88 	ldr.w	r3, [r3, #3720]	@ 0xe88
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	601a      	str	r2, [r3, #0]
		graph->y[graph->num_points] = scaled_y;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80019b6:	f8d3 3e88 	ldr.w	r3, [r3, #3720]	@ 0xe88
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019c6:	601a      	str	r2, [r3, #0]
		graph->num_points++;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80019ce:	f8d3 3e88 	ldr.w	r3, [r3, #3720]	@ 0xe88
 80019d2:	3301      	adds	r3, #1
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 80019da:	f8c2 3e88 	str.w	r3, [r2, #3720]	@ 0xe88

		ssd1306_DrawPixel(x, scaled_y, White);
 80019de:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019e6:	edc7 7a00 	vstr	s15, [r7]
 80019ea:	783b      	ldrb	r3, [r7, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f6:	edc7 7a00 	vstr	s15, [r7]
 80019fa:	783a      	ldrb	r2, [r7, #0]
 80019fc:	b2d1      	uxtb	r1, r2
 80019fe:	2201      	movs	r2, #1
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fa0f 	bl	8001e24 <ssd1306_DrawPixel>

}
 8001a06:	3750      	adds	r7, #80	@ 0x50
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	44ed8000 	.word	0x44ed8000
 8001a10:	451c4000 	.word	0x451c4000
 8001a14:	40a00000 	.word	0x40a00000
 8001a18:	42200000 	.word	0x42200000
 8001a1c:	0800c884 	.word	0x0800c884
 8001a20:	2000850c 	.word	0x2000850c
 8001a24:	2000001c 	.word	0x2000001c
 8001a28:	200002e8 	.word	0x200002e8
 8001a2c:	42200000 	.word	0x42200000
 8001a30:	43000000 	.word	0x43000000
 8001a34:	42f60000 	.word	0x42f60000

08001a38 <detect_peaks>:
        graph->num_points--;
    }
}


void detect_peaks(PlotData *graph, float *peaks_x, float *peaks_y, int *num_peaks) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
    *num_peaks = 0;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

    for (int i = 1; i < graph->num_points - 1; i++) {
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e04b      	b.n	8001aea <detect_peaks+0xb2>
	if (graph->y[i] > graph->y[i - 1] && graph->y[i] > graph->y[i + 1] ) {
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	ed93 7a00 	vldr	s14, [r3]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7c:	dd32      	ble.n	8001ae4 <detect_peaks+0xac>
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	ed93 7a00 	vldr	s14, [r3]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	3301      	adds	r3, #1
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	dd1c      	ble.n	8001ae4 <detect_peaks+0xac>
            peaks_x[*num_peaks] = graph->x[i];
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	68f9      	ldr	r1, [r7, #12]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	0092      	lsls	r2, r2, #2
 8001aba:	440a      	add	r2, r1
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	601a      	str	r2, [r3, #0]
            peaks_y[*num_peaks] = graph->y[i];
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	68f9      	ldr	r1, [r7, #12]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	f502 62fa 	add.w	r2, r2, #2000	@ 0x7d0
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	440a      	add	r2, r1
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	601a      	str	r2, [r3, #0]
            (*num_peaks)++;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	601a      	str	r2, [r3, #0]
    for (int i = 1; i < graph->num_points - 1; i++) {
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001af0:	f8d3 3e88 	ldr.w	r3, [r3, #3720]	@ 0xe88
 8001af4:	3b01      	subs	r3, #1
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dbaa      	blt.n	8001a52 <detect_peaks+0x1a>
        }
    }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	371c      	adds	r7, #28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af04      	add	r7, sp, #16
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001b16:	230a      	movs	r3, #10
 8001b18:	9302      	str	r3, [sp, #8]
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	1cfb      	adds	r3, r7, #3
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2301      	movs	r3, #1
 8001b24:	2200      	movs	r2, #0
 8001b26:	2178      	movs	r1, #120	@ 0x78
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f003 f895 	bl	8004c58 <HAL_I2C_Mem_Write>
 8001b2e:	4603      	mov	r3, r0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001b40:	2064      	movs	r0, #100	@ 0x64
 8001b42:	f000 fe75 	bl	8002830 <HAL_Delay>
    int status = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001b4a:	21ae      	movs	r1, #174	@ 0xae
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ffdc 	bl	8001b0a <ssd1306_WriteCommand>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001b5c:	2120      	movs	r1, #32
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffd3 	bl	8001b0a <ssd1306_WriteCommand>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001b6e:	2110      	movs	r1, #16
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ffca 	bl	8001b0a <ssd1306_WriteCommand>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001b80:	21b0      	movs	r1, #176	@ 0xb0
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffc1 	bl	8001b0a <ssd1306_WriteCommand>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001b92:	21c8      	movs	r1, #200	@ 0xc8
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ffb8 	bl	8001b0a <ssd1306_WriteCommand>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffaf 	bl	8001b0a <ssd1306_WriteCommand>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001bb6:	2110      	movs	r1, #16
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ffa6 	bl	8001b0a <ssd1306_WriteCommand>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001bc8:	2140      	movs	r1, #64	@ 0x40
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ff9d 	bl	8001b0a <ssd1306_WriteCommand>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001bda:	2181      	movs	r1, #129	@ 0x81
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff94 	bl	8001b0a <ssd1306_WriteCommand>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4413      	add	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001bec:	21ff      	movs	r1, #255	@ 0xff
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ff8b 	bl	8001b0a <ssd1306_WriteCommand>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001bfe:	21a1      	movs	r1, #161	@ 0xa1
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff82 	bl	8001b0a <ssd1306_WriteCommand>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001c10:	21a6      	movs	r1, #166	@ 0xa6
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ff79 	bl	8001b0a <ssd1306_WriteCommand>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001c22:	21a8      	movs	r1, #168	@ 0xa8
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff70 	bl	8001b0a <ssd1306_WriteCommand>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001c34:	213f      	movs	r1, #63	@ 0x3f
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ff67 	bl	8001b0a <ssd1306_WriteCommand>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c46:	21a4      	movs	r1, #164	@ 0xa4
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff5e 	bl	8001b0a <ssd1306_WriteCommand>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4413      	add	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001c58:	21d3      	movs	r1, #211	@ 0xd3
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ff55 	bl	8001b0a <ssd1306_WriteCommand>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff4c 	bl	8001b0a <ssd1306_WriteCommand>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4413      	add	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001c7c:	21d5      	movs	r1, #213	@ 0xd5
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ff43 	bl	8001b0a <ssd1306_WriteCommand>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001c8e:	21f0      	movs	r1, #240	@ 0xf0
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff3a 	bl	8001b0a <ssd1306_WriteCommand>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001ca0:	21d9      	movs	r1, #217	@ 0xd9
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ff31 	bl	8001b0a <ssd1306_WriteCommand>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001cb2:	2122      	movs	r1, #34	@ 0x22
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff28 	bl	8001b0a <ssd1306_WriteCommand>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001cc4:	21da      	movs	r1, #218	@ 0xda
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ff1f 	bl	8001b0a <ssd1306_WriteCommand>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8001cd6:	2112      	movs	r1, #18
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff16 	bl	8001b0a <ssd1306_WriteCommand>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001ce8:	21db      	movs	r1, #219	@ 0xdb
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ff0d 	bl	8001b0a <ssd1306_WriteCommand>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001cfa:	2120      	movs	r1, #32
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff04 	bl	8001b0a <ssd1306_WriteCommand>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4413      	add	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001d0c:	218d      	movs	r1, #141	@ 0x8d
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff fefb 	bl	8001b0a <ssd1306_WriteCommand>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001d1e:	2114      	movs	r1, #20
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff fef2 	bl	8001b0a <ssd1306_WriteCommand>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001d30:	21af      	movs	r1, #175	@ 0xaf
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fee9 	bl	8001b0a <ssd1306_WriteCommand>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <ssd1306_Init+0x214>
        return 1;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e00f      	b.n	8001d6c <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f000 f813 	bl	8001d78 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f834 	bl	8001dc0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <ssd1306_Init+0x23c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001d5e:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <ssd1306_Init+0x23c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001d64:	4b03      	ldr	r3, [pc, #12]	@ (8001d74 <ssd1306_Init+0x23c>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	715a      	strb	r2, [r3, #5]

    return 0;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20008468 	.word	0x20008468

08001d78 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	e00d      	b.n	8001da4 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <ssd1306_Fill+0x1a>
 8001d8e:	2100      	movs	r1, #0
 8001d90:	e000      	b.n	8001d94 <ssd1306_Fill+0x1c>
 8001d92:	21ff      	movs	r1, #255	@ 0xff
 8001d94:	4a09      	ldr	r2, [pc, #36]	@ (8001dbc <ssd1306_Fill+0x44>)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4413      	add	r3, r2
 8001d9a:	460a      	mov	r2, r1
 8001d9c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3301      	adds	r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001daa:	d3ed      	bcc.n	8001d88 <ssd1306_Fill+0x10>
    }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20008068 	.word	0x20008068

08001dc0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af04      	add	r7, sp, #16
 8001dc6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e020      	b.n	8001e10 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	3b50      	subs	r3, #80	@ 0x50
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fe97 	bl	8001b0a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001ddc:	2100      	movs	r1, #0
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff fe93 	bl	8001b0a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001de4:	2110      	movs	r1, #16
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff fe8f 	bl	8001b0a <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	01db      	lsls	r3, r3, #7
 8001df0:	4a0b      	ldr	r2, [pc, #44]	@ (8001e20 <ssd1306_UpdateScreen+0x60>)
 8001df2:	4413      	add	r3, r2
 8001df4:	2264      	movs	r2, #100	@ 0x64
 8001df6:	9202      	str	r2, [sp, #8]
 8001df8:	2280      	movs	r2, #128	@ 0x80
 8001dfa:	9201      	str	r2, [sp, #4]
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2301      	movs	r3, #1
 8001e00:	2240      	movs	r2, #64	@ 0x40
 8001e02:	2178      	movs	r1, #120	@ 0x78
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f002 ff27 	bl	8004c58 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	2b07      	cmp	r3, #7
 8001e14:	d9db      	bls.n	8001dce <ssd1306_UpdateScreen+0xe>
    }
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20008068 	.word	0x20008068

08001e24 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	71bb      	strb	r3, [r7, #6]
 8001e32:	4613      	mov	r3, r2
 8001e34:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db48      	blt.n	8001ed0 <ssd1306_DrawPixel+0xac>
 8001e3e:	79bb      	ldrb	r3, [r7, #6]
 8001e40:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e42:	d845      	bhi.n	8001ed0 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001e44:	4b25      	ldr	r3, [pc, #148]	@ (8001edc <ssd1306_DrawPixel+0xb8>)
 8001e46:	791b      	ldrb	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001e4c:	797b      	ldrb	r3, [r7, #5]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf0c      	ite	eq
 8001e52:	2301      	moveq	r3, #1
 8001e54:	2300      	movne	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001e5a:	797b      	ldrb	r3, [r7, #5]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d11a      	bne.n	8001e96 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001e60:	79fa      	ldrb	r2, [r7, #7]
 8001e62:	79bb      	ldrb	r3, [r7, #6]
 8001e64:	08db      	lsrs	r3, r3, #3
 8001e66:	b2d8      	uxtb	r0, r3
 8001e68:	4603      	mov	r3, r0
 8001e6a:	01db      	lsls	r3, r3, #7
 8001e6c:	4413      	add	r3, r2
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee0 <ssd1306_DrawPixel+0xbc>)
 8001e70:	5cd3      	ldrb	r3, [r2, r3]
 8001e72:	b25a      	sxtb	r2, r3
 8001e74:	79bb      	ldrb	r3, [r7, #6]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	b25b      	sxtb	r3, r3
 8001e82:	4313      	orrs	r3, r2
 8001e84:	b259      	sxtb	r1, r3
 8001e86:	79fa      	ldrb	r2, [r7, #7]
 8001e88:	4603      	mov	r3, r0
 8001e8a:	01db      	lsls	r3, r3, #7
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b2c9      	uxtb	r1, r1
 8001e90:	4a13      	ldr	r2, [pc, #76]	@ (8001ee0 <ssd1306_DrawPixel+0xbc>)
 8001e92:	54d1      	strb	r1, [r2, r3]
 8001e94:	e01d      	b.n	8001ed2 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e96:	79fa      	ldrb	r2, [r7, #7]
 8001e98:	79bb      	ldrb	r3, [r7, #6]
 8001e9a:	08db      	lsrs	r3, r3, #3
 8001e9c:	b2d8      	uxtb	r0, r3
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	01db      	lsls	r3, r3, #7
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee0 <ssd1306_DrawPixel+0xbc>)
 8001ea6:	5cd3      	ldrb	r3, [r2, r3]
 8001ea8:	b25a      	sxtb	r2, r3
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	b25b      	sxtb	r3, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	b25b      	sxtb	r3, r3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	b259      	sxtb	r1, r3
 8001ec0:	79fa      	ldrb	r2, [r7, #7]
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	01db      	lsls	r3, r3, #7
 8001ec6:	4413      	add	r3, r2
 8001ec8:	b2c9      	uxtb	r1, r1
 8001eca:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <ssd1306_DrawPixel+0xbc>)
 8001ecc:	54d1      	strb	r1, [r2, r3]
 8001ece:	e000      	b.n	8001ed2 <ssd1306_DrawPixel+0xae>
        return;
 8001ed0:	bf00      	nop
    }
}
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	20008468 	.word	0x20008468
 8001ee0:	20008068 	.word	0x20008068

08001ee4 <ssd1306_DrawLine>:

void ssd1306_DrawLine(int x0, int y0, int x1, int y1, uint8_t color) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	@ 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
    int dx = abs(x1 - x0);
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bfb8      	it	lt
 8001efc:	425b      	neglt	r3, r3
 8001efe:	623b      	str	r3, [r7, #32]
    int sx = x0 < x1 ? 1 : -1;
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	da01      	bge.n	8001f0c <ssd1306_DrawLine+0x28>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e001      	b.n	8001f10 <ssd1306_DrawLine+0x2c>
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f10:	61fb      	str	r3, [r7, #28]
    int dy = -abs(y1 - y0);
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bfb8      	it	lt
 8001f1c:	425b      	neglt	r3, r3
 8001f1e:	425b      	negs	r3, r3
 8001f20:	61bb      	str	r3, [r7, #24]
    int sy = y0 < y1 ? 1 : -1;
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	da01      	bge.n	8001f2e <ssd1306_DrawLine+0x4a>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e001      	b.n	8001f32 <ssd1306_DrawLine+0x4e>
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	617b      	str	r3, [r7, #20]
    int err = dx + dy;
 8001f34:	6a3a      	ldr	r2, [r7, #32]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4413      	add	r3, r2
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24

    while (1) {
        ssd1306_DrawPixel(x0, y0, color);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	b2d1      	uxtb	r1, r2
 8001f44:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff6b 	bl	8001e24 <ssd1306_DrawPixel>
        if (x0 == x1 && y0 == y1) break;
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d103      	bne.n	8001f5e <ssd1306_DrawLine+0x7a>
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d01b      	beq.n	8001f96 <ssd1306_DrawLine+0xb2>
        int e2 = 2 * err;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	613b      	str	r3, [r7, #16]
        if (e2 >= dy) {
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	db07      	blt.n	8001f7c <ssd1306_DrawLine+0x98>
            err += dy;
 8001f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	4413      	add	r3, r2
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
            x0 += sx;
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
        }
        if (e2 <= dx) {
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	dcdb      	bgt.n	8001f3c <ssd1306_DrawLine+0x58>
            err += dx;
 8001f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	4413      	add	r3, r2
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
            y0 += sy;
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	4413      	add	r3, r2
 8001f92:	60bb      	str	r3, [r7, #8]
    while (1) {
 8001f94:	e7d2      	b.n	8001f3c <ssd1306_DrawLine+0x58>
        if (x0 == x1 && y0 == y1) break;
 8001f96:	bf00      	nop
        }
    }
}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	@ 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b089      	sub	sp, #36	@ 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	1d38      	adds	r0, r7, #4
 8001faa:	e880 0006 	stmia.w	r0, {r1, r2}
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4623      	mov	r3, r4
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001fb8:	4b38      	ldr	r3, [pc, #224]	@ (800209c <ssd1306_WriteChar+0xfc>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	793b      	ldrb	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fc4:	dc06      	bgt.n	8001fd4 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001fc6:	4b35      	ldr	r3, [pc, #212]	@ (800209c <ssd1306_WriteChar+0xfc>)
 8001fc8:	885b      	ldrh	r3, [r3, #2]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	797b      	ldrb	r3, [r7, #5]
 8001fce:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001fd0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fd2:	dd01      	ble.n	8001fd8 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e05c      	b.n	8002092 <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	e04c      	b.n	8002078 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	3b20      	subs	r3, #32
 8001fe4:	7979      	ldrb	r1, [r7, #5]
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4619      	mov	r1, r3
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	440b      	add	r3, r1
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	e034      	b.n	8002068 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d012      	beq.n	8002034 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800200e:	4b23      	ldr	r3, [pc, #140]	@ (800209c <ssd1306_WriteChar+0xfc>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	4413      	add	r3, r2
 800201a:	b2d8      	uxtb	r0, r3
 800201c:	4b1f      	ldr	r3, [pc, #124]	@ (800209c <ssd1306_WriteChar+0xfc>)
 800201e:	885b      	ldrh	r3, [r3, #2]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	4413      	add	r3, r2
 8002028:	b2db      	uxtb	r3, r3
 800202a:	7bba      	ldrb	r2, [r7, #14]
 800202c:	4619      	mov	r1, r3
 800202e:	f7ff fef9 	bl	8001e24 <ssd1306_DrawPixel>
 8002032:	e016      	b.n	8002062 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002034:	4b19      	ldr	r3, [pc, #100]	@ (800209c <ssd1306_WriteChar+0xfc>)
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	4413      	add	r3, r2
 8002040:	b2d8      	uxtb	r0, r3
 8002042:	4b16      	ldr	r3, [pc, #88]	@ (800209c <ssd1306_WriteChar+0xfc>)
 8002044:	885b      	ldrh	r3, [r3, #2]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	4413      	add	r3, r2
 800204e:	b2d9      	uxtb	r1, r3
 8002050:	7bbb      	ldrb	r3, [r7, #14]
 8002052:	2b00      	cmp	r3, #0
 8002054:	bf0c      	ite	eq
 8002056:	2301      	moveq	r3, #1
 8002058:	2300      	movne	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	f7ff fee1 	bl	8001e24 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	3301      	adds	r3, #1
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	793b      	ldrb	r3, [r7, #4]
 800206a:	461a      	mov	r2, r3
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	4293      	cmp	r3, r2
 8002070:	d3c5      	bcc.n	8001ffe <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3301      	adds	r3, #1
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	797b      	ldrb	r3, [r7, #5]
 800207a:	461a      	mov	r2, r3
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	4293      	cmp	r3, r2
 8002080:	d3ad      	bcc.n	8001fde <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002082:	4b06      	ldr	r3, [pc, #24]	@ (800209c <ssd1306_WriteChar+0xfc>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	793a      	ldrb	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	b29a      	uxth	r2, r3
 800208c:	4b03      	ldr	r3, [pc, #12]	@ (800209c <ssd1306_WriteChar+0xfc>)
 800208e:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	@ 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd90      	pop	{r4, r7, pc}
 800209a:	bf00      	nop
 800209c:	20008468 	.word	0x20008468

080020a0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	1d38      	adds	r0, r7, #4
 80020aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80020ae:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 80020b0:	e012      	b.n	80020d8 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	7818      	ldrb	r0, [r3, #0]
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	1d3a      	adds	r2, r7, #4
 80020ba:	ca06      	ldmia	r2, {r1, r2}
 80020bc:	f7ff ff70 	bl	8001fa0 <ssd1306_WriteChar>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d002      	beq.n	80020d2 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	e008      	b.n	80020e4 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3301      	adds	r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
    while (*str)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1e8      	bne.n	80020b2 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	781b      	ldrb	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	460a      	mov	r2, r1
 80020f6:	71fb      	strb	r3, [r7, #7]
 80020f8:	4613      	mov	r3, r2
 80020fa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	b29a      	uxth	r2, r3
 8002100:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <ssd1306_SetCursor+0x2c>)
 8002102:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002104:	79bb      	ldrb	r3, [r7, #6]
 8002106:	b29a      	uxth	r2, r3
 8002108:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <ssd1306_SetCursor+0x2c>)
 800210a:	805a      	strh	r2, [r3, #2]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	20008468 	.word	0x20008468

0800211c <ssd1306_ScrollLeft>:

    return (SSD1306_Buffer[index] & bitMask) ? 1 : 0;
}

void ssd1306_ScrollLeft(void)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
    for (uint8_t y = 0; y < SSD1306_HEIGHT / 8; y++) {
 8002122:	2300      	movs	r3, #0
 8002124:	71fb      	strb	r3, [r7, #7]
 8002126:	e020      	b.n	800216a <ssd1306_ScrollLeft+0x4e>
        for (uint32_t x = 0; x < SSD1306_WIDTH - 1; x++) {
 8002128:	2300      	movs	r3, #0
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	e011      	b.n	8002152 <ssd1306_ScrollLeft+0x36>
            SSD1306_Buffer[x + y * SSD1306_WIDTH] = SSD1306_Buffer[(x + 1) + y * SSD1306_WIDTH];
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	01db      	lsls	r3, r3, #7
 8002132:	461a      	mov	r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4413      	add	r3, r2
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	01db      	lsls	r3, r3, #7
 800213e:	4619      	mov	r1, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	440b      	add	r3, r1
 8002144:	490e      	ldr	r1, [pc, #56]	@ (8002180 <ssd1306_ScrollLeft+0x64>)
 8002146:	5c89      	ldrb	r1, [r1, r2]
 8002148:	4a0d      	ldr	r2, [pc, #52]	@ (8002180 <ssd1306_ScrollLeft+0x64>)
 800214a:	54d1      	strb	r1, [r2, r3]
        for (uint32_t x = 0; x < SSD1306_WIDTH - 1; x++) {
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b7e      	cmp	r3, #126	@ 0x7e
 8002156:	d9ea      	bls.n	800212e <ssd1306_ScrollLeft+0x12>
        }
        SSD1306_Buffer[(SSD1306_WIDTH - 1) + y * SSD1306_WIDTH] = 0x00;
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	01db      	lsls	r3, r3, #7
 800215c:	337f      	adds	r3, #127	@ 0x7f
 800215e:	4a08      	ldr	r2, [pc, #32]	@ (8002180 <ssd1306_ScrollLeft+0x64>)
 8002160:	2100      	movs	r1, #0
 8002162:	54d1      	strb	r1, [r2, r3]
    for (uint8_t y = 0; y < SSD1306_HEIGHT / 8; y++) {
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	3301      	adds	r3, #1
 8002168:	71fb      	strb	r3, [r7, #7]
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	2b07      	cmp	r3, #7
 800216e:	d9db      	bls.n	8002128 <ssd1306_ScrollLeft+0xc>
    }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20008068 	.word	0x20008068

08002184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218a:	4b0f      	ldr	r3, [pc, #60]	@ (80021c8 <HAL_MspInit+0x44>)
 800218c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218e:	4a0e      	ldr	r2, [pc, #56]	@ (80021c8 <HAL_MspInit+0x44>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6613      	str	r3, [r2, #96]	@ 0x60
 8002196:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <HAL_MspInit+0x44>)
 8002198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	4b09      	ldr	r3, [pc, #36]	@ (80021c8 <HAL_MspInit+0x44>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	4a08      	ldr	r2, [pc, #32]	@ (80021c8 <HAL_MspInit+0x44>)
 80021a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ae:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_MspInit+0x44>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80021ba:	f003 fb79 	bl	80058b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000

080021cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <NMI_Handler+0x4>

080021d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <HardFault_Handler+0x4>

080021dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <MemManage_Handler+0x4>

080021e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <BusFault_Handler+0x4>

080021ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <UsageFault_Handler+0x4>

080021f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002222:	f000 fae7 	bl	80027f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002230:	4802      	ldr	r0, [pc, #8]	@ (800223c <DMA1_Channel1_IRQHandler+0x10>)
 8002232:	f002 f9a3 	bl	800457c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000280 	.word	0x20000280

08002240 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002244:	4802      	ldr	r0, [pc, #8]	@ (8002250 <TIM3_IRQHandler+0x10>)
 8002246:	f004 fbbe 	bl	80069c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200084c0 	.word	0x200084c0

08002254 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return 1;
 8002258:	2301      	movs	r3, #1
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_kill>:

int _kill(int pid, int sig)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800226e:	f006 ff43 	bl	80090f8 <__errno>
 8002272:	4603      	mov	r3, r0
 8002274:	2216      	movs	r2, #22
 8002276:	601a      	str	r2, [r3, #0]
  return -1;
 8002278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <_exit>:

void _exit (int status)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800228c:	f04f 31ff 	mov.w	r1, #4294967295
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ffe7 	bl	8002264 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002296:	bf00      	nop
 8002298:	e7fd      	b.n	8002296 <_exit+0x12>

0800229a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e00a      	b.n	80022c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ac:	f3af 8000 	nop.w
 80022b0:	4601      	mov	r1, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	60ba      	str	r2, [r7, #8]
 80022b8:	b2ca      	uxtb	r2, r1
 80022ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3301      	adds	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	dbf0      	blt.n	80022ac <_read+0x12>
  }

  return len;
 80022ca:	687b      	ldr	r3, [r7, #4]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e009      	b.n	80022fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	60ba      	str	r2, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	3301      	adds	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	429a      	cmp	r2, r3
 8002300:	dbf1      	blt.n	80022e6 <_write+0x12>
  }
  return len;
 8002302:	687b      	ldr	r3, [r7, #4]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <_close>:

int _close(int file)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002334:	605a      	str	r2, [r3, #4]
  return 0;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <_isatty>:

int _isatty(int file)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800234c:	2301      	movs	r3, #1
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800237c:	4a14      	ldr	r2, [pc, #80]	@ (80023d0 <_sbrk+0x5c>)
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <_sbrk+0x60>)
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002388:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <_sbrk+0x64>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002390:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <_sbrk+0x64>)
 8002392:	4a12      	ldr	r2, [pc, #72]	@ (80023dc <_sbrk+0x68>)
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002396:	4b10      	ldr	r3, [pc, #64]	@ (80023d8 <_sbrk+0x64>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d207      	bcs.n	80023b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a4:	f006 fea8 	bl	80090f8 <__errno>
 80023a8:	4603      	mov	r3, r0
 80023aa:	220c      	movs	r2, #12
 80023ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	e009      	b.n	80023c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b4:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <_sbrk+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ba:	4b07      	ldr	r3, [pc, #28]	@ (80023d8 <_sbrk+0x64>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	4a05      	ldr	r2, [pc, #20]	@ (80023d8 <_sbrk+0x64>)
 80023c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023c6:	68fb      	ldr	r3, [r7, #12]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20020000 	.word	0x20020000
 80023d4:	00000400 	.word	0x00000400
 80023d8:	20008470 	.word	0x20008470
 80023dc:	200086f0 	.word	0x200086f0

080023e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023e4:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <SystemInit+0x20>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ea:	4a05      	ldr	r2, [pc, #20]	@ (8002400 <SystemInit+0x20>)
 80023ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800240a:	f107 0310 	add.w	r3, r7, #16
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002422:	4b1e      	ldr	r3, [pc, #120]	@ (800249c <MX_TIM2_Init+0x98>)
 8002424:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002428:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800242a:	4b1c      	ldr	r3, [pc, #112]	@ (800249c <MX_TIM2_Init+0x98>)
 800242c:	22a9      	movs	r2, #169	@ 0xa9
 800242e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002430:	4b1a      	ldr	r3, [pc, #104]	@ (800249c <MX_TIM2_Init+0x98>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8002436:	4b19      	ldr	r3, [pc, #100]	@ (800249c <MX_TIM2_Init+0x98>)
 8002438:	f242 720f 	movw	r2, #9999	@ 0x270f
 800243c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243e:	4b17      	ldr	r3, [pc, #92]	@ (800249c <MX_TIM2_Init+0x98>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002444:	4b15      	ldr	r3, [pc, #84]	@ (800249c <MX_TIM2_Init+0x98>)
 8002446:	2200      	movs	r2, #0
 8002448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800244a:	4814      	ldr	r0, [pc, #80]	@ (800249c <MX_TIM2_Init+0x98>)
 800244c:	f004 f9bc 	bl	80067c8 <HAL_TIM_Base_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002456:	f7ff f9ab 	bl	80017b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800245a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800245e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	4619      	mov	r1, r3
 8002466:	480d      	ldr	r0, [pc, #52]	@ (800249c <MX_TIM2_Init+0x98>)
 8002468:	f004 fbfc 	bl	8006c64 <HAL_TIM_ConfigClockSource>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002472:	f7ff f99d 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002476:	2320      	movs	r3, #32
 8002478:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800247a:	2380      	movs	r3, #128	@ 0x80
 800247c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	4619      	mov	r1, r3
 8002482:	4806      	ldr	r0, [pc, #24]	@ (800249c <MX_TIM2_Init+0x98>)
 8002484:	f004 fe7c 	bl	8007180 <HAL_TIMEx_MasterConfigSynchronization>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800248e:	f7ff f98f 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	3720      	adds	r7, #32
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20008474 	.word	0x20008474

080024a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024a6:	f107 0310 	add.w	r3, r7, #16
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024be:	4b1f      	ldr	r3, [pc, #124]	@ (800253c <MX_TIM3_Init+0x9c>)
 80024c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002540 <MX_TIM3_Init+0xa0>)
 80024c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 80024c4:	4b1d      	ldr	r3, [pc, #116]	@ (800253c <MX_TIM3_Init+0x9c>)
 80024c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <MX_TIM3_Init+0x9c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 80024d2:	4b1a      	ldr	r3, [pc, #104]	@ (800253c <MX_TIM3_Init+0x9c>)
 80024d4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80024d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80024da:	4b18      	ldr	r3, [pc, #96]	@ (800253c <MX_TIM3_Init+0x9c>)
 80024dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e2:	4b16      	ldr	r3, [pc, #88]	@ (800253c <MX_TIM3_Init+0x9c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024e8:	4814      	ldr	r0, [pc, #80]	@ (800253c <MX_TIM3_Init+0x9c>)
 80024ea:	f004 f96d 	bl	80067c8 <HAL_TIM_Base_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80024f4:	f7ff f95c 	bl	80017b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024fe:	f107 0310 	add.w	r3, r7, #16
 8002502:	4619      	mov	r1, r3
 8002504:	480d      	ldr	r0, [pc, #52]	@ (800253c <MX_TIM3_Init+0x9c>)
 8002506:	f004 fbad 	bl	8006c64 <HAL_TIM_ConfigClockSource>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002510:	f7ff f94e 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENCODER_CLK;
 8002514:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002518:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800251a:	2380      	movs	r3, #128	@ 0x80
 800251c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800251e:	1d3b      	adds	r3, r7, #4
 8002520:	4619      	mov	r1, r3
 8002522:	4806      	ldr	r0, [pc, #24]	@ (800253c <MX_TIM3_Init+0x9c>)
 8002524:	f004 fe2c 	bl	8007180 <HAL_TIMEx_MasterConfigSynchronization>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800252e:	f7ff f93f 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002532:	bf00      	nop
 8002534:	3720      	adds	r7, #32
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200084c0 	.word	0x200084c0
 8002540:	40000400 	.word	0x40000400

08002544 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002554:	d10c      	bne.n	8002570 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002556:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <HAL_TIM_Base_MspInit+0x68>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255a:	4a14      	ldr	r2, [pc, #80]	@ (80025ac <HAL_TIM_Base_MspInit+0x68>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6593      	str	r3, [r2, #88]	@ 0x58
 8002562:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_TIM_Base_MspInit+0x68>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800256e:	e018      	b.n	80025a2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0e      	ldr	r2, [pc, #56]	@ (80025b0 <HAL_TIM_Base_MspInit+0x6c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d113      	bne.n	80025a2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800257a:	4b0c      	ldr	r3, [pc, #48]	@ (80025ac <HAL_TIM_Base_MspInit+0x68>)
 800257c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257e:	4a0b      	ldr	r2, [pc, #44]	@ (80025ac <HAL_TIM_Base_MspInit+0x68>)
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	6593      	str	r3, [r2, #88]	@ 0x58
 8002586:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <HAL_TIM_Base_MspInit+0x68>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	201d      	movs	r0, #29
 8002598:	f001 fe3f 	bl	800421a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800259c:	201d      	movs	r0, #29
 800259e:	f001 fe56 	bl	800424e <HAL_NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40000400 	.word	0x40000400

080025b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025b8:	4b22      	ldr	r3, [pc, #136]	@ (8002644 <MX_USART2_UART_Init+0x90>)
 80025ba:	4a23      	ldr	r2, [pc, #140]	@ (8002648 <MX_USART2_UART_Init+0x94>)
 80025bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80025be:	4b21      	ldr	r3, [pc, #132]	@ (8002644 <MX_USART2_UART_Init+0x90>)
 80025c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80025c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002644 <MX_USART2_UART_Init+0x90>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002644 <MX_USART2_UART_Init+0x90>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002644 <MX_USART2_UART_Init+0x90>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002644 <MX_USART2_UART_Init+0x90>)
 80025da:	220c      	movs	r2, #12
 80025dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025de:	4b19      	ldr	r3, [pc, #100]	@ (8002644 <MX_USART2_UART_Init+0x90>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e4:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <MX_USART2_UART_Init+0x90>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ea:	4b16      	ldr	r3, [pc, #88]	@ (8002644 <MX_USART2_UART_Init+0x90>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025f0:	4b14      	ldr	r3, [pc, #80]	@ (8002644 <MX_USART2_UART_Init+0x90>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025f6:	4b13      	ldr	r3, [pc, #76]	@ (8002644 <MX_USART2_UART_Init+0x90>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025fc:	4811      	ldr	r0, [pc, #68]	@ (8002644 <MX_USART2_UART_Init+0x90>)
 80025fe:	f004 fe9b 	bl	8007338 <HAL_UART_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002608:	f7ff f8d2 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800260c:	2100      	movs	r1, #0
 800260e:	480d      	ldr	r0, [pc, #52]	@ (8002644 <MX_USART2_UART_Init+0x90>)
 8002610:	f005 fcc4 	bl	8007f9c <HAL_UARTEx_SetTxFifoThreshold>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800261a:	f7ff f8c9 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800261e:	2100      	movs	r1, #0
 8002620:	4808      	ldr	r0, [pc, #32]	@ (8002644 <MX_USART2_UART_Init+0x90>)
 8002622:	f005 fcf9 	bl	8008018 <HAL_UARTEx_SetRxFifoThreshold>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800262c:	f7ff f8c0 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002630:	4804      	ldr	r0, [pc, #16]	@ (8002644 <MX_USART2_UART_Init+0x90>)
 8002632:	f005 fc7a 	bl	8007f2a <HAL_UARTEx_DisableFifoMode>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800263c:	f7ff f8b8 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	2000850c 	.word	0x2000850c
 8002648:	40004400 	.word	0x40004400

0800264c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b09e      	sub	sp, #120	@ 0x78
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002664:	f107 0310 	add.w	r3, r7, #16
 8002668:	2254      	movs	r2, #84	@ 0x54
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f006 fcf0 	bl	8009052 <memset>
  if(uartHandle->Instance==USART2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1f      	ldr	r2, [pc, #124]	@ (80026f4 <HAL_UART_MspInit+0xa8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d136      	bne.n	80026ea <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800267c:	2302      	movs	r3, #2
 800267e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	4618      	mov	r0, r3
 800268a:	f003 fe4f 	bl	800632c <HAL_RCCEx_PeriphCLKConfig>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002694:	f7ff f88c 	bl	80017b0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002698:	4b17      	ldr	r3, [pc, #92]	@ (80026f8 <HAL_UART_MspInit+0xac>)
 800269a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269c:	4a16      	ldr	r2, [pc, #88]	@ (80026f8 <HAL_UART_MspInit+0xac>)
 800269e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80026a4:	4b14      	ldr	r3, [pc, #80]	@ (80026f8 <HAL_UART_MspInit+0xac>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b0:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <HAL_UART_MspInit+0xac>)
 80026b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b4:	4a10      	ldr	r2, [pc, #64]	@ (80026f8 <HAL_UART_MspInit+0xac>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026bc:	4b0e      	ldr	r3, [pc, #56]	@ (80026f8 <HAL_UART_MspInit+0xac>)
 80026be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026c8:	230c      	movs	r3, #12
 80026ca:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026d8:	2307      	movs	r3, #7
 80026da:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026e0:	4619      	mov	r1, r3
 80026e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026e6:	f002 f899 	bl	800481c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026ea:	bf00      	nop
 80026ec:	3778      	adds	r7, #120	@ 0x78
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40004400 	.word	0x40004400
 80026f8:	40021000 	.word	0x40021000

080026fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026fc:	480d      	ldr	r0, [pc, #52]	@ (8002734 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002700:	f7ff fe6e 	bl	80023e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002704:	480c      	ldr	r0, [pc, #48]	@ (8002738 <LoopForever+0x6>)
  ldr r1, =_edata
 8002706:	490d      	ldr	r1, [pc, #52]	@ (800273c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002708:	4a0d      	ldr	r2, [pc, #52]	@ (8002740 <LoopForever+0xe>)
  movs r3, #0
 800270a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800270c:	e002      	b.n	8002714 <LoopCopyDataInit>

0800270e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002712:	3304      	adds	r3, #4

08002714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002718:	d3f9      	bcc.n	800270e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271a:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <LoopForever+0x12>)
  ldr r4, =_ebss
 800271c:	4c0a      	ldr	r4, [pc, #40]	@ (8002748 <LoopForever+0x16>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002720:	e001      	b.n	8002726 <LoopFillZerobss>

08002722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002724:	3204      	adds	r2, #4

08002726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002728:	d3fb      	bcc.n	8002722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800272a:	f006 fceb 	bl	8009104 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800272e:	f7fe fecb 	bl	80014c8 <main>

08002732 <LoopForever>:

LoopForever:
    b LoopForever
 8002732:	e7fe      	b.n	8002732 <LoopForever>
  ldr   r0, =_estack
 8002734:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800273c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002740:	0800d488 	.word	0x0800d488
  ldr r2, =_sbss
 8002744:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002748:	200086f0 	.word	0x200086f0

0800274c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800274c:	e7fe      	b.n	800274c <ADC1_2_IRQHandler>

0800274e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002758:	2003      	movs	r0, #3
 800275a:	f001 fd53 	bl	8004204 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800275e:	2000      	movs	r0, #0
 8002760:	f000 f80e 	bl	8002780 <HAL_InitTick>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	71fb      	strb	r3, [r7, #7]
 800276e:	e001      	b.n	8002774 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002770:	f7ff fd08 	bl	8002184 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002774:	79fb      	ldrb	r3, [r7, #7]

}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800278c:	4b16      	ldr	r3, [pc, #88]	@ (80027e8 <HAL_InitTick+0x68>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d022      	beq.n	80027da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002794:	4b15      	ldr	r3, [pc, #84]	@ (80027ec <HAL_InitTick+0x6c>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b13      	ldr	r3, [pc, #76]	@ (80027e8 <HAL_InitTick+0x68>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80027a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 fd5e 	bl	800426a <HAL_SYSTICK_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10f      	bne.n	80027d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b0f      	cmp	r3, #15
 80027b8:	d809      	bhi.n	80027ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ba:	2200      	movs	r2, #0
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	f04f 30ff 	mov.w	r0, #4294967295
 80027c2:	f001 fd2a 	bl	800421a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027c6:	4a0a      	ldr	r2, [pc, #40]	@ (80027f0 <HAL_InitTick+0x70>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	e007      	b.n	80027de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	e004      	b.n	80027de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
 80027d8:	e001      	b.n	80027de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	2000002c 	.word	0x2000002c
 80027ec:	20000024 	.word	0x20000024
 80027f0:	20000028 	.word	0x20000028

080027f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f8:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <HAL_IncTick+0x1c>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <HAL_IncTick+0x20>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4413      	add	r3, r2
 8002802:	4a03      	ldr	r2, [pc, #12]	@ (8002810 <HAL_IncTick+0x1c>)
 8002804:	6013      	str	r3, [r2, #0]
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	200085a0 	.word	0x200085a0
 8002814:	2000002c 	.word	0x2000002c

08002818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return uwTick;
 800281c:	4b03      	ldr	r3, [pc, #12]	@ (800282c <HAL_GetTick+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	200085a0 	.word	0x200085a0

08002830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff ffee 	bl	8002818 <HAL_GetTick>
 800283c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d004      	beq.n	8002854 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800284a:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <HAL_Delay+0x40>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4413      	add	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002854:	bf00      	nop
 8002856:	f7ff ffdf 	bl	8002818 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	429a      	cmp	r2, r3
 8002864:	d8f7      	bhi.n	8002856 <HAL_Delay+0x26>
  {
  }
}
 8002866:	bf00      	nop
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	2000002c 	.word	0x2000002c

08002874 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	609a      	str	r2, [r3, #8]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	609a      	str	r2, [r3, #8]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3360      	adds	r3, #96	@ 0x60
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <LL_ADC_SetOffset+0x44>)
 80028fe:	4013      	ands	r3, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	4313      	orrs	r3, r2
 800290c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	03fff000 	.word	0x03fff000

08002924 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3360      	adds	r3, #96	@ 0x60
 8002932:	461a      	mov	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3360      	adds	r3, #96	@ 0x60
 8002960:	461a      	mov	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	431a      	orrs	r2, r3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002986:	b480      	push	{r7}
 8002988:	b087      	sub	sp, #28
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3360      	adds	r3, #96	@ 0x60
 8002996:	461a      	mov	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3360      	adds	r3, #96	@ 0x60
 80029cc:	461a      	mov	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	615a      	str	r2, [r3, #20]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b087      	sub	sp, #28
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3330      	adds	r3, #48	@ 0x30
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	0a1b      	lsrs	r3, r3, #8
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	4413      	add	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	211f      	movs	r1, #31
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	401a      	ands	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0e9b      	lsrs	r3, r3, #26
 8002a76:	f003 011f 	and.w	r1, r3, #31
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	431a      	orrs	r2, r3
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a8a:	bf00      	nop
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b087      	sub	sp, #28
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	3314      	adds	r3, #20
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	0e5b      	lsrs	r3, r3, #25
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	4413      	add	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	0d1b      	lsrs	r3, r3, #20
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2107      	movs	r1, #7
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	401a      	ands	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	0d1b      	lsrs	r3, r3, #20
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	431a      	orrs	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ae0:	bf00      	nop
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b04:	43db      	mvns	r3, r3
 8002b06:	401a      	ands	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0318 	and.w	r3, r3, #24
 8002b0e:	4908      	ldr	r1, [pc, #32]	@ (8002b30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b10:	40d9      	lsrs	r1, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	400b      	ands	r3, r1
 8002b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	0007ffff 	.word	0x0007ffff

08002b34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 031f 	and.w	r3, r3, #31
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6093      	str	r3, [r2, #8]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b88:	d101      	bne.n	8002b8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002bac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bb0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bd8:	d101      	bne.n	8002bde <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c00:	f043 0201 	orr.w	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c28:	f043 0202 	orr.w	r2, r3, #2
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <LL_ADC_IsEnabled+0x18>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <LL_ADC_IsEnabled+0x1a>
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d101      	bne.n	8002c7a <LL_ADC_IsDisableOngoing+0x18>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <LL_ADC_IsDisableOngoing+0x1a>
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c9c:	f043 0204 	orr.w	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cc4:	f043 0210 	orr.w	r2, r3, #16
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d101      	bne.n	8002cf0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d0e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d12:	f043 0220 	orr.w	r2, r3, #32
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d101      	bne.n	8002d3e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b089      	sub	sp, #36	@ 0x24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e1a9      	b.n	80030ba <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d109      	bne.n	8002d88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7fe f9c5 	bl	8001104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fef1 	bl	8002b74 <LL_ADC_IsDeepPowerDownEnabled>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d004      	beq.n	8002da2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fed7 	bl	8002b50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ff0c 	bl	8002bc4 <LL_ADC_IsInternalRegulatorEnabled>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d115      	bne.n	8002dde <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fef0 	bl	8002b9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dbc:	4b9c      	ldr	r3, [pc, #624]	@ (8003030 <HAL_ADC_Init+0x2e4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	4a9c      	ldr	r2, [pc, #624]	@ (8003034 <HAL_ADC_Init+0x2e8>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	099b      	lsrs	r3, r3, #6
 8002dca:	3301      	adds	r3, #1
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002dd0:	e002      	b.n	8002dd8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f9      	bne.n	8002dd2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff feee 	bl	8002bc4 <LL_ADC_IsInternalRegulatorEnabled>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10d      	bne.n	8002e0a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df2:	f043 0210 	orr.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff ff62 	bl	8002cd8 <LL_ADC_REG_IsConversionOngoing>
 8002e14:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f040 8142 	bne.w	80030a8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f040 813e 	bne.w	80030a8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e30:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e34:	f043 0202 	orr.w	r2, r3, #2
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fefb 	bl	8002c3c <LL_ADC_IsEnabled>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d141      	bne.n	8002ed0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e54:	d004      	beq.n	8002e60 <HAL_ADC_Init+0x114>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a77      	ldr	r2, [pc, #476]	@ (8003038 <HAL_ADC_Init+0x2ec>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d10f      	bne.n	8002e80 <HAL_ADC_Init+0x134>
 8002e60:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e64:	f7ff feea 	bl	8002c3c <LL_ADC_IsEnabled>
 8002e68:	4604      	mov	r4, r0
 8002e6a:	4873      	ldr	r0, [pc, #460]	@ (8003038 <HAL_ADC_Init+0x2ec>)
 8002e6c:	f7ff fee6 	bl	8002c3c <LL_ADC_IsEnabled>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4323      	orrs	r3, r4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf0c      	ite	eq
 8002e78:	2301      	moveq	r3, #1
 8002e7a:	2300      	movne	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e012      	b.n	8002ea6 <HAL_ADC_Init+0x15a>
 8002e80:	486e      	ldr	r0, [pc, #440]	@ (800303c <HAL_ADC_Init+0x2f0>)
 8002e82:	f7ff fedb 	bl	8002c3c <LL_ADC_IsEnabled>
 8002e86:	4604      	mov	r4, r0
 8002e88:	486d      	ldr	r0, [pc, #436]	@ (8003040 <HAL_ADC_Init+0x2f4>)
 8002e8a:	f7ff fed7 	bl	8002c3c <LL_ADC_IsEnabled>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	431c      	orrs	r4, r3
 8002e92:	486c      	ldr	r0, [pc, #432]	@ (8003044 <HAL_ADC_Init+0x2f8>)
 8002e94:	f7ff fed2 	bl	8002c3c <LL_ADC_IsEnabled>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4323      	orrs	r3, r4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d012      	beq.n	8002ed0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eb2:	d004      	beq.n	8002ebe <HAL_ADC_Init+0x172>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a5f      	ldr	r2, [pc, #380]	@ (8003038 <HAL_ADC_Init+0x2ec>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_Init+0x176>
 8002ebe:	4a62      	ldr	r2, [pc, #392]	@ (8003048 <HAL_ADC_Init+0x2fc>)
 8002ec0:	e000      	b.n	8002ec4 <HAL_ADC_Init+0x178>
 8002ec2:	4a62      	ldr	r2, [pc, #392]	@ (800304c <HAL_ADC_Init+0x300>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f7ff fcd2 	bl	8002874 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7f5b      	ldrb	r3, [r3, #29]
 8002ed4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eda:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ee0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ee6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002eee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d106      	bne.n	8002f0c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	045b      	lsls	r3, r3, #17
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f20:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	4b48      	ldr	r3, [pc, #288]	@ (8003050 <HAL_ADC_Init+0x304>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	69b9      	ldr	r1, [r7, #24]
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fee5 	bl	8002d26 <LL_ADC_INJ_IsConversionOngoing>
 8002f5c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d17f      	bne.n	8003064 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d17c      	bne.n	8003064 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f6e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f76:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f86:	f023 0302 	bic.w	r3, r3, #2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	69b9      	ldr	r1, [r7, #24]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d017      	beq.n	8002fcc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002faa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fb4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6911      	ldr	r1, [r2, #16]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002fca:	e013      	b.n	8002ff4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002fda:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ff0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d12a      	bne.n	8003054 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003008:	f023 0304 	bic.w	r3, r3, #4
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003014:	4311      	orrs	r1, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800301a:	4311      	orrs	r1, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003020:	430a      	orrs	r2, r1
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	611a      	str	r2, [r3, #16]
 800302e:	e019      	b.n	8003064 <HAL_ADC_Init+0x318>
 8003030:	20000024 	.word	0x20000024
 8003034:	053e2d63 	.word	0x053e2d63
 8003038:	50000100 	.word	0x50000100
 800303c:	50000400 	.word	0x50000400
 8003040:	50000500 	.word	0x50000500
 8003044:	50000600 	.word	0x50000600
 8003048:	50000300 	.word	0x50000300
 800304c:	50000700 	.word	0x50000700
 8003050:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d10c      	bne.n	8003086 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	f023 010f 	bic.w	r1, r3, #15
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	1e5a      	subs	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
 8003084:	e007      	b.n	8003096 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 020f 	bic.w	r2, r2, #15
 8003094:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309a:	f023 0303 	bic.w	r3, r3, #3
 800309e:	f043 0201 	orr.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030a6:	e007      	b.n	80030b8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ac:	f043 0210 	orr.w	r2, r3, #16
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3724      	adds	r7, #36	@ 0x24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}
 80030c2:	bf00      	nop

080030c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030d8:	d004      	beq.n	80030e4 <HAL_ADC_Start_DMA+0x20>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a5a      	ldr	r2, [pc, #360]	@ (8003248 <HAL_ADC_Start_DMA+0x184>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_Start_DMA+0x24>
 80030e4:	4b59      	ldr	r3, [pc, #356]	@ (800324c <HAL_ADC_Start_DMA+0x188>)
 80030e6:	e000      	b.n	80030ea <HAL_ADC_Start_DMA+0x26>
 80030e8:	4b59      	ldr	r3, [pc, #356]	@ (8003250 <HAL_ADC_Start_DMA+0x18c>)
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fd22 	bl	8002b34 <LL_ADC_GetMultimode>
 80030f0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fdee 	bl	8002cd8 <LL_ADC_REG_IsConversionOngoing>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f040 809b 	bne.w	800323a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_ADC_Start_DMA+0x4e>
 800310e:	2302      	movs	r3, #2
 8003110:	e096      	b.n	8003240 <HAL_ADC_Start_DMA+0x17c>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a4d      	ldr	r2, [pc, #308]	@ (8003254 <HAL_ADC_Start_DMA+0x190>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d008      	beq.n	8003136 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	2b05      	cmp	r3, #5
 800312e:	d002      	beq.n	8003136 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	2b09      	cmp	r3, #9
 8003134:	d17a      	bne.n	800322c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fe0a 	bl	8003d50 <ADC_Enable>
 800313c:	4603      	mov	r3, r0
 800313e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003140:	7dfb      	ldrb	r3, [r7, #23]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d16d      	bne.n	8003222 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a3a      	ldr	r2, [pc, #232]	@ (8003248 <HAL_ADC_Start_DMA+0x184>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d009      	beq.n	8003178 <HAL_ADC_Start_DMA+0xb4>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a3b      	ldr	r2, [pc, #236]	@ (8003258 <HAL_ADC_Start_DMA+0x194>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d002      	beq.n	8003174 <HAL_ADC_Start_DMA+0xb0>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	e003      	b.n	800317c <HAL_ADC_Start_DMA+0xb8>
 8003174:	4b39      	ldr	r3, [pc, #228]	@ (800325c <HAL_ADC_Start_DMA+0x198>)
 8003176:	e001      	b.n	800317c <HAL_ADC_Start_DMA+0xb8>
 8003178:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	4293      	cmp	r3, r2
 8003182:	d002      	beq.n	800318a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d006      	beq.n	80031b0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a6:	f023 0206 	bic.w	r2, r3, #6
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	661a      	str	r2, [r3, #96]	@ 0x60
 80031ae:	e002      	b.n	80031b6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ba:	4a29      	ldr	r2, [pc, #164]	@ (8003260 <HAL_ADC_Start_DMA+0x19c>)
 80031bc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c2:	4a28      	ldr	r2, [pc, #160]	@ (8003264 <HAL_ADC_Start_DMA+0x1a0>)
 80031c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ca:	4a27      	ldr	r2, [pc, #156]	@ (8003268 <HAL_ADC_Start_DMA+0x1a4>)
 80031cc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	221c      	movs	r2, #28
 80031d4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0210 	orr.w	r2, r2, #16
 80031ec:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0201 	orr.w	r2, r2, #1
 80031fc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3340      	adds	r3, #64	@ 0x40
 8003208:	4619      	mov	r1, r3
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f001 f8e1 	bl	80043d4 <HAL_DMA_Start_IT>
 8003212:	4603      	mov	r3, r0
 8003214:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fd34 	bl	8002c88 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003220:	e00d      	b.n	800323e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800322a:	e008      	b.n	800323e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003238:	e001      	b.n	800323e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800323a:	2302      	movs	r3, #2
 800323c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800323e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	50000100 	.word	0x50000100
 800324c:	50000300 	.word	0x50000300
 8003250:	50000700 	.word	0x50000700
 8003254:	50000600 	.word	0x50000600
 8003258:	50000500 	.word	0x50000500
 800325c:	50000400 	.word	0x50000400
 8003260:	08003f3b 	.word	0x08003f3b
 8003264:	08004013 	.word	0x08004013
 8003268:	0800402f 	.word	0x0800402f

0800326c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_ADC_Stop_DMA+0x16>
 800327e:	2302      	movs	r3, #2
 8003280:	e051      	b.n	8003326 <HAL_ADC_Stop_DMA+0xba>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800328a:	2103      	movs	r1, #3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fca3 	bl	8003bd8 <ADC_ConversionStop>
 8003292:	4603      	mov	r3, r0
 8003294:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d13f      	bne.n	800331c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d10f      	bne.n	80032da <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 f903 	bl	80044ca <HAL_DMA_Abort>
 80032c4:	4603      	mov	r3, r0
 80032c6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0210 	bic.w	r2, r2, #16
 80032e8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fdc3 	bl	8003e7c <ADC_Disable>
 80032f6:	4603      	mov	r3, r0
 80032f8:	73fb      	strb	r3, [r7, #15]
 80032fa:	e002      	b.n	8003302 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fdbd 	bl	8003e7c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003324:	7bfb      	ldrb	r3, [r7, #15]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b0b6      	sub	sp, #216	@ 0xd8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003372:	2b01      	cmp	r3, #1
 8003374:	d102      	bne.n	800337c <HAL_ADC_ConfigChannel+0x24>
 8003376:	2302      	movs	r3, #2
 8003378:	f000 bc13 	b.w	8003ba2 <HAL_ADC_ConfigChannel+0x84a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fca5 	bl	8002cd8 <LL_ADC_REG_IsConversionOngoing>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	f040 83f3 	bne.w	8003b7c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6859      	ldr	r1, [r3, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f7ff fb4b 	bl	8002a3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fc93 	bl	8002cd8 <LL_ADC_REG_IsConversionOngoing>
 80033b2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fcb3 	bl	8002d26 <LL_ADC_INJ_IsConversionOngoing>
 80033c0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f040 81d9 	bne.w	8003780 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f040 81d4 	bne.w	8003780 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033e0:	d10f      	bne.n	8003402 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	4619      	mov	r1, r3
 80033ee:	f7ff fb52 	bl	8002a96 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff faf9 	bl	80029f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003400:	e00e      	b.n	8003420 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6819      	ldr	r1, [r3, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	461a      	mov	r2, r3
 8003410:	f7ff fb41 	bl	8002a96 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2100      	movs	r1, #0
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fae9 	bl	80029f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	08db      	lsrs	r3, r3, #3
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b04      	cmp	r3, #4
 8003440:	d022      	beq.n	8003488 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6919      	ldr	r1, [r3, #16]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003452:	f7ff fa43 	bl	80028dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6919      	ldr	r1, [r3, #16]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	461a      	mov	r2, r3
 8003464:	f7ff fa8f 	bl	8002986 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003474:	2b01      	cmp	r3, #1
 8003476:	d102      	bne.n	800347e <HAL_ADC_ConfigChannel+0x126>
 8003478:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800347c:	e000      	b.n	8003480 <HAL_ADC_ConfigChannel+0x128>
 800347e:	2300      	movs	r3, #0
 8003480:	461a      	mov	r2, r3
 8003482:	f7ff fa9b 	bl	80029bc <LL_ADC_SetOffsetSaturation>
 8003486:	e17b      	b.n	8003780 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2100      	movs	r1, #0
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fa48 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003494:	4603      	mov	r3, r0
 8003496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10a      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x15c>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fa3d 	bl	8002924 <LL_ADC_GetOffsetChannel>
 80034aa:	4603      	mov	r3, r0
 80034ac:	0e9b      	lsrs	r3, r3, #26
 80034ae:	f003 021f 	and.w	r2, r3, #31
 80034b2:	e01e      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x19a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fa32 	bl	8002924 <LL_ADC_GetOffsetChannel>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034ca:	fa93 f3a3 	rbit	r3, r3
 80034ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80034e2:	2320      	movs	r3, #32
 80034e4:	e004      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80034e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d105      	bne.n	800350a <HAL_ADC_ConfigChannel+0x1b2>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	0e9b      	lsrs	r3, r3, #26
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	e018      	b.n	800353c <HAL_ADC_ConfigChannel+0x1e4>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800351e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003522:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003526:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800352e:	2320      	movs	r3, #32
 8003530:	e004      	b.n	800353c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003532:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800353c:	429a      	cmp	r2, r3
 800353e:	d106      	bne.n	800354e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2200      	movs	r2, #0
 8003546:	2100      	movs	r1, #0
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fa01 	bl	8002950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2101      	movs	r1, #1
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff f9e5 	bl	8002924 <LL_ADC_GetOffsetChannel>
 800355a:	4603      	mov	r3, r0
 800355c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <HAL_ADC_ConfigChannel+0x222>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2101      	movs	r1, #1
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff f9da 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003570:	4603      	mov	r3, r0
 8003572:	0e9b      	lsrs	r3, r3, #26
 8003574:	f003 021f 	and.w	r2, r3, #31
 8003578:	e01e      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x260>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2101      	movs	r1, #1
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff f9cf 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003586:	4603      	mov	r3, r0
 8003588:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003590:	fa93 f3a3 	rbit	r3, r3
 8003594:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003598:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800359c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80035a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80035a8:	2320      	movs	r3, #32
 80035aa:	e004      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80035ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035b0:	fab3 f383 	clz	r3, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d105      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x278>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	0e9b      	lsrs	r3, r3, #26
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	e018      	b.n	8003602 <HAL_ADC_ConfigChannel+0x2aa>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80035e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80035ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80035f4:	2320      	movs	r3, #32
 80035f6:	e004      	b.n	8003602 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80035f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003602:	429a      	cmp	r2, r3
 8003604:	d106      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	2101      	movs	r1, #1
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff f99e 	bl	8002950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2102      	movs	r1, #2
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff f982 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003620:	4603      	mov	r3, r0
 8003622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x2e8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2102      	movs	r1, #2
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f977 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003636:	4603      	mov	r3, r0
 8003638:	0e9b      	lsrs	r3, r3, #26
 800363a:	f003 021f 	and.w	r2, r3, #31
 800363e:	e01e      	b.n	800367e <HAL_ADC_ConfigChannel+0x326>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2102      	movs	r1, #2
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff f96c 	bl	8002924 <LL_ADC_GetOffsetChannel>
 800364c:	4603      	mov	r3, r0
 800364e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800365e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003662:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003666:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800366e:	2320      	movs	r3, #32
 8003670:	e004      	b.n	800367c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003672:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003676:	fab3 f383 	clz	r3, r3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003686:	2b00      	cmp	r3, #0
 8003688:	d105      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x33e>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	0e9b      	lsrs	r3, r3, #26
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	e016      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x36c>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036a2:	fa93 f3a3 	rbit	r3, r3
 80036a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80036a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80036ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80036b6:	2320      	movs	r3, #32
 80036b8:	e004      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80036ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d106      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2200      	movs	r2, #0
 80036ce:	2102      	movs	r1, #2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff f93d 	bl	8002950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2103      	movs	r1, #3
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff f921 	bl	8002924 <LL_ADC_GetOffsetChannel>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x3aa>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2103      	movs	r1, #3
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff f916 	bl	8002924 <LL_ADC_GetOffsetChannel>
 80036f8:	4603      	mov	r3, r0
 80036fa:	0e9b      	lsrs	r3, r3, #26
 80036fc:	f003 021f 	and.w	r2, r3, #31
 8003700:	e017      	b.n	8003732 <HAL_ADC_ConfigChannel+0x3da>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2103      	movs	r1, #3
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff f90b 	bl	8002924 <LL_ADC_GetOffsetChannel>
 800370e:	4603      	mov	r3, r0
 8003710:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800371a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800371c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800371e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003724:	2320      	movs	r3, #32
 8003726:	e003      	b.n	8003730 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373a:	2b00      	cmp	r3, #0
 800373c:	d105      	bne.n	800374a <HAL_ADC_ConfigChannel+0x3f2>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	0e9b      	lsrs	r3, r3, #26
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	e011      	b.n	800376e <HAL_ADC_ConfigChannel+0x416>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800375a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800375c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003762:	2320      	movs	r3, #32
 8003764:	e003      	b.n	800376e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003768:	fab3 f383 	clz	r3, r3
 800376c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800376e:	429a      	cmp	r2, r3
 8003770:	d106      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	2103      	movs	r1, #3
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff f8e8 	bl	8002950 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fa59 	bl	8002c3c <LL_ADC_IsEnabled>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	f040 813d 	bne.w	8003a0c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	461a      	mov	r2, r3
 80037a0:	f7ff f9a4 	bl	8002aec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4aa2      	ldr	r2, [pc, #648]	@ (8003a34 <HAL_ADC_ConfigChannel+0x6dc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	f040 812e 	bne.w	8003a0c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10b      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x480>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	0e9b      	lsrs	r3, r3, #26
 80037c6:	3301      	adds	r3, #1
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	2b09      	cmp	r3, #9
 80037ce:	bf94      	ite	ls
 80037d0:	2301      	movls	r3, #1
 80037d2:	2300      	movhi	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	e019      	b.n	800380c <HAL_ADC_ConfigChannel+0x4b4>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80037e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037e8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80037ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80037f0:	2320      	movs	r3, #32
 80037f2:	e003      	b.n	80037fc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80037f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	3301      	adds	r3, #1
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	2b09      	cmp	r3, #9
 8003804:	bf94      	ite	ls
 8003806:	2301      	movls	r3, #1
 8003808:	2300      	movhi	r3, #0
 800380a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800380c:	2b00      	cmp	r3, #0
 800380e:	d079      	beq.n	8003904 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003818:	2b00      	cmp	r3, #0
 800381a:	d107      	bne.n	800382c <HAL_ADC_ConfigChannel+0x4d4>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	0e9b      	lsrs	r3, r3, #26
 8003822:	3301      	adds	r3, #1
 8003824:	069b      	lsls	r3, r3, #26
 8003826:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800382a:	e015      	b.n	8003858 <HAL_ADC_ConfigChannel+0x500>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003834:	fa93 f3a3 	rbit	r3, r3
 8003838:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800383a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800383c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800383e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003844:	2320      	movs	r3, #32
 8003846:	e003      	b.n	8003850 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384a:	fab3 f383 	clz	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	3301      	adds	r3, #1
 8003852:	069b      	lsls	r3, r3, #26
 8003854:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x520>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	0e9b      	lsrs	r3, r3, #26
 800386a:	3301      	adds	r3, #1
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	2101      	movs	r1, #1
 8003872:	fa01 f303 	lsl.w	r3, r1, r3
 8003876:	e017      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x550>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003888:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800388a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003890:	2320      	movs	r3, #32
 8003892:	e003      	b.n	800389c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	3301      	adds	r3, #1
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	2101      	movs	r1, #1
 80038a4:	fa01 f303 	lsl.w	r3, r1, r3
 80038a8:	ea42 0103 	orr.w	r1, r2, r3
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x576>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	0e9b      	lsrs	r3, r3, #26
 80038be:	3301      	adds	r3, #1
 80038c0:	f003 021f 	and.w	r2, r3, #31
 80038c4:	4613      	mov	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	051b      	lsls	r3, r3, #20
 80038cc:	e018      	b.n	8003900 <HAL_ADC_ConfigChannel+0x5a8>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80038dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80038e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80038e6:	2320      	movs	r3, #32
 80038e8:	e003      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80038ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ec:	fab3 f383 	clz	r3, r3
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	f003 021f 	and.w	r2, r3, #31
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003900:	430b      	orrs	r3, r1
 8003902:	e07e      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800390c:	2b00      	cmp	r3, #0
 800390e:	d107      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x5c8>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	0e9b      	lsrs	r3, r3, #26
 8003916:	3301      	adds	r3, #1
 8003918:	069b      	lsls	r3, r3, #26
 800391a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800391e:	e015      	b.n	800394c <HAL_ADC_ConfigChannel+0x5f4>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800392e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003930:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003938:	2320      	movs	r3, #32
 800393a:	e003      	b.n	8003944 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393e:	fab3 f383 	clz	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	3301      	adds	r3, #1
 8003946:	069b      	lsls	r3, r3, #26
 8003948:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <HAL_ADC_ConfigChannel+0x614>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	0e9b      	lsrs	r3, r3, #26
 800395e:	3301      	adds	r3, #1
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	2101      	movs	r1, #1
 8003966:	fa01 f303 	lsl.w	r3, r1, r3
 800396a:	e017      	b.n	800399c <HAL_ADC_ConfigChannel+0x644>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	fa93 f3a3 	rbit	r3, r3
 8003978:	61fb      	str	r3, [r7, #28]
  return result;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003984:	2320      	movs	r3, #32
 8003986:	e003      	b.n	8003990 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	fab3 f383 	clz	r3, r3
 800398e:	b2db      	uxtb	r3, r3
 8003990:	3301      	adds	r3, #1
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	2101      	movs	r1, #1
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	ea42 0103 	orr.w	r1, r2, r3
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10d      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x670>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	0e9b      	lsrs	r3, r3, #26
 80039b2:	3301      	adds	r3, #1
 80039b4:	f003 021f 	and.w	r2, r3, #31
 80039b8:	4613      	mov	r3, r2
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4413      	add	r3, r2
 80039be:	3b1e      	subs	r3, #30
 80039c0:	051b      	lsls	r3, r3, #20
 80039c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039c6:	e01b      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x6a8>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	fa93 f3a3 	rbit	r3, r3
 80039d4:	613b      	str	r3, [r7, #16]
  return result;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80039e0:	2320      	movs	r3, #32
 80039e2:	e003      	b.n	80039ec <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	fab3 f383 	clz	r3, r3
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	3301      	adds	r3, #1
 80039ee:	f003 021f 	and.w	r2, r3, #31
 80039f2:	4613      	mov	r3, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4413      	add	r3, r2
 80039f8:	3b1e      	subs	r3, #30
 80039fa:	051b      	lsls	r3, r3, #20
 80039fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a00:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a06:	4619      	mov	r1, r3
 8003a08:	f7ff f845 	bl	8002a96 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4b09      	ldr	r3, [pc, #36]	@ (8003a38 <HAL_ADC_ConfigChannel+0x6e0>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80be 	beq.w	8003b96 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a22:	d004      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x6d6>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a04      	ldr	r2, [pc, #16]	@ (8003a3c <HAL_ADC_ConfigChannel+0x6e4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10a      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x6ec>
 8003a2e:	4b04      	ldr	r3, [pc, #16]	@ (8003a40 <HAL_ADC_ConfigChannel+0x6e8>)
 8003a30:	e009      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x6ee>
 8003a32:	bf00      	nop
 8003a34:	407f0000 	.word	0x407f0000
 8003a38:	80080000 	.word	0x80080000
 8003a3c:	50000100 	.word	0x50000100
 8003a40:	50000300 	.word	0x50000300
 8003a44:	4b59      	ldr	r3, [pc, #356]	@ (8003bac <HAL_ADC_ConfigChannel+0x854>)
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe ff3a 	bl	80028c0 <LL_ADC_GetCommonPathInternalCh>
 8003a4c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a56      	ldr	r2, [pc, #344]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x858>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_ADC_ConfigChannel+0x70c>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a55      	ldr	r2, [pc, #340]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x85c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d13a      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d134      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a78:	d005      	beq.n	8003a86 <HAL_ADC_ConfigChannel+0x72e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a4e      	ldr	r2, [pc, #312]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x860>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	f040 8085 	bne.w	8003b90 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a8e:	d004      	beq.n	8003a9a <HAL_ADC_ConfigChannel+0x742>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a49      	ldr	r2, [pc, #292]	@ (8003bbc <HAL_ADC_ConfigChannel+0x864>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d101      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x746>
 8003a9a:	4a49      	ldr	r2, [pc, #292]	@ (8003bc0 <HAL_ADC_ConfigChannel+0x868>)
 8003a9c:	e000      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x748>
 8003a9e:	4a43      	ldr	r2, [pc, #268]	@ (8003bac <HAL_ADC_ConfigChannel+0x854>)
 8003aa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003aa4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f7fe fef5 	bl	800289a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ab0:	4b44      	ldr	r3, [pc, #272]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x86c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	099b      	lsrs	r3, r3, #6
 8003ab6:	4a44      	ldr	r2, [pc, #272]	@ (8003bc8 <HAL_ADC_ConfigChannel+0x870>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	099b      	lsrs	r3, r3, #6
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003aca:	e002      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f9      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ad8:	e05a      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a3b      	ldr	r2, [pc, #236]	@ (8003bcc <HAL_ADC_ConfigChannel+0x874>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d125      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ae8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d11f      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a31      	ldr	r2, [pc, #196]	@ (8003bbc <HAL_ADC_ConfigChannel+0x864>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d104      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x7ac>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a34      	ldr	r2, [pc, #208]	@ (8003bd0 <HAL_ADC_ConfigChannel+0x878>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d047      	beq.n	8003b94 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b0c:	d004      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0x7c0>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a2a      	ldr	r2, [pc, #168]	@ (8003bbc <HAL_ADC_ConfigChannel+0x864>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d101      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x7c4>
 8003b18:	4a29      	ldr	r2, [pc, #164]	@ (8003bc0 <HAL_ADC_ConfigChannel+0x868>)
 8003b1a:	e000      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x7c6>
 8003b1c:	4a23      	ldr	r2, [pc, #140]	@ (8003bac <HAL_ADC_ConfigChannel+0x854>)
 8003b1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b26:	4619      	mov	r1, r3
 8003b28:	4610      	mov	r0, r2
 8003b2a:	f7fe feb6 	bl	800289a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b2e:	e031      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a27      	ldr	r2, [pc, #156]	@ (8003bd4 <HAL_ADC_ConfigChannel+0x87c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d12d      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d127      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bbc <HAL_ADC_ConfigChannel+0x864>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d022      	beq.n	8003b96 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b58:	d004      	beq.n	8003b64 <HAL_ADC_ConfigChannel+0x80c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a17      	ldr	r2, [pc, #92]	@ (8003bbc <HAL_ADC_ConfigChannel+0x864>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d101      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x810>
 8003b64:	4a16      	ldr	r2, [pc, #88]	@ (8003bc0 <HAL_ADC_ConfigChannel+0x868>)
 8003b66:	e000      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x812>
 8003b68:	4a10      	ldr	r2, [pc, #64]	@ (8003bac <HAL_ADC_ConfigChannel+0x854>)
 8003b6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b72:	4619      	mov	r1, r3
 8003b74:	4610      	mov	r0, r2
 8003b76:	f7fe fe90 	bl	800289a <LL_ADC_SetCommonPathInternalCh>
 8003b7a:	e00c      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003b8e:	e002      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b90:	bf00      	nop
 8003b92:	e000      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	37d8      	adds	r7, #216	@ 0xd8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	50000700 	.word	0x50000700
 8003bb0:	c3210000 	.word	0xc3210000
 8003bb4:	90c00010 	.word	0x90c00010
 8003bb8:	50000600 	.word	0x50000600
 8003bbc:	50000100 	.word	0x50000100
 8003bc0:	50000300 	.word	0x50000300
 8003bc4:	20000024 	.word	0x20000024
 8003bc8:	053e2d63 	.word	0x053e2d63
 8003bcc:	c7520000 	.word	0xc7520000
 8003bd0:	50000500 	.word	0x50000500
 8003bd4:	cb840000 	.word	0xcb840000

08003bd8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff f872 	bl	8002cd8 <LL_ADC_REG_IsConversionOngoing>
 8003bf4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff f893 	bl	8002d26 <LL_ADC_INJ_IsConversionOngoing>
 8003c00:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d103      	bne.n	8003c10 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8098 	beq.w	8003d40 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d02a      	beq.n	8003c74 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	7f5b      	ldrb	r3, [r3, #29]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d126      	bne.n	8003c74 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7f1b      	ldrb	r3, [r3, #28]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d122      	bne.n	8003c74 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c32:	e014      	b.n	8003c5e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	4a45      	ldr	r2, [pc, #276]	@ (8003d4c <ADC_ConversionStop+0x174>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d90d      	bls.n	8003c58 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c40:	f043 0210 	orr.w	r2, r3, #16
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c4c:	f043 0201 	orr.w	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e074      	b.n	8003d42 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c68:	2b40      	cmp	r3, #64	@ 0x40
 8003c6a:	d1e3      	bne.n	8003c34 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2240      	movs	r2, #64	@ 0x40
 8003c72:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d014      	beq.n	8003ca4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff f82a 	bl	8002cd8 <LL_ADC_REG_IsConversionOngoing>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00c      	beq.n	8003ca4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe ffe7 	bl	8002c62 <LL_ADC_IsDisableOngoing>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d104      	bne.n	8003ca4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff f806 	bl	8002cb0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d014      	beq.n	8003cd4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff f839 	bl	8002d26 <LL_ADC_INJ_IsConversionOngoing>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00c      	beq.n	8003cd4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe ffcf 	bl	8002c62 <LL_ADC_IsDisableOngoing>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d104      	bne.n	8003cd4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff f815 	bl	8002cfe <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d005      	beq.n	8003ce6 <ADC_ConversionStop+0x10e>
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d105      	bne.n	8003cec <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003ce0:	230c      	movs	r3, #12
 8003ce2:	617b      	str	r3, [r7, #20]
        break;
 8003ce4:	e005      	b.n	8003cf2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	617b      	str	r3, [r7, #20]
        break;
 8003cea:	e002      	b.n	8003cf2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003cec:	2304      	movs	r3, #4
 8003cee:	617b      	str	r3, [r7, #20]
        break;
 8003cf0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003cf2:	f7fe fd91 	bl	8002818 <HAL_GetTick>
 8003cf6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003cf8:	e01b      	b.n	8003d32 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003cfa:	f7fe fd8d 	bl	8002818 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b05      	cmp	r3, #5
 8003d06:	d914      	bls.n	8003d32 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1a:	f043 0210 	orr.w	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d26:	f043 0201 	orr.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e007      	b.n	8003d42 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1dc      	bne.n	8003cfa <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3720      	adds	r7, #32
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	a33fffff 	.word	0xa33fffff

08003d50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe ff6b 	bl	8002c3c <LL_ADC_IsEnabled>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d176      	bne.n	8003e5a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	4b3c      	ldr	r3, [pc, #240]	@ (8003e64 <ADC_Enable+0x114>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00d      	beq.n	8003d96 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7e:	f043 0210 	orr.w	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8a:	f043 0201 	orr.w	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e062      	b.n	8003e5c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe ff26 	bl	8002bec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003da8:	d004      	beq.n	8003db4 <ADC_Enable+0x64>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a2e      	ldr	r2, [pc, #184]	@ (8003e68 <ADC_Enable+0x118>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d101      	bne.n	8003db8 <ADC_Enable+0x68>
 8003db4:	4b2d      	ldr	r3, [pc, #180]	@ (8003e6c <ADC_Enable+0x11c>)
 8003db6:	e000      	b.n	8003dba <ADC_Enable+0x6a>
 8003db8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e70 <ADC_Enable+0x120>)
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fe fd80 	bl	80028c0 <LL_ADC_GetCommonPathInternalCh>
 8003dc0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003dc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d013      	beq.n	8003df2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dca:	4b2a      	ldr	r3, [pc, #168]	@ (8003e74 <ADC_Enable+0x124>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	099b      	lsrs	r3, r3, #6
 8003dd0:	4a29      	ldr	r2, [pc, #164]	@ (8003e78 <ADC_Enable+0x128>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	099b      	lsrs	r3, r3, #6
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003de4:	e002      	b.n	8003dec <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f9      	bne.n	8003de6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003df2:	f7fe fd11 	bl	8002818 <HAL_GetTick>
 8003df6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003df8:	e028      	b.n	8003e4c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe ff1c 	bl	8002c3c <LL_ADC_IsEnabled>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe feec 	bl	8002bec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e14:	f7fe fd00 	bl	8002818 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d914      	bls.n	8003e4c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d00d      	beq.n	8003e4c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e34:	f043 0210 	orr.w	r2, r3, #16
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e40:	f043 0201 	orr.w	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e007      	b.n	8003e5c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d1cf      	bne.n	8003dfa <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	8000003f 	.word	0x8000003f
 8003e68:	50000100 	.word	0x50000100
 8003e6c:	50000300 	.word	0x50000300
 8003e70:	50000700 	.word	0x50000700
 8003e74:	20000024 	.word	0x20000024
 8003e78:	053e2d63 	.word	0x053e2d63

08003e7c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fe feea 	bl	8002c62 <LL_ADC_IsDisableOngoing>
 8003e8e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fe fed1 	bl	8002c3c <LL_ADC_IsEnabled>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d047      	beq.n	8003f30 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d144      	bne.n	8003f30 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 030d 	and.w	r3, r3, #13
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d10c      	bne.n	8003ece <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fe feab 	bl	8002c14 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ec6:	f7fe fca7 	bl	8002818 <HAL_GetTick>
 8003eca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ecc:	e029      	b.n	8003f22 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed2:	f043 0210 	orr.w	r2, r3, #16
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ede:	f043 0201 	orr.w	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e023      	b.n	8003f32 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003eea:	f7fe fc95 	bl	8002818 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d914      	bls.n	8003f22 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00d      	beq.n	8003f22 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0a:	f043 0210 	orr.w	r2, r3, #16
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f16:	f043 0201 	orr.w	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e007      	b.n	8003f32 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1dc      	bne.n	8003eea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d14b      	bne.n	8003fec <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f58:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d021      	beq.n	8003fb2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe fd50 	bl	8002a18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d032      	beq.n	8003fe4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d12b      	bne.n	8003fe4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d11f      	bne.n	8003fe4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa8:	f043 0201 	orr.w	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fb0:	e018      	b.n	8003fe4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d111      	bne.n	8003fe4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fdc:	f043 0201 	orr.w	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7fd fadb 	bl	80015a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003fea:	e00e      	b.n	800400a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff f9a2 	bl	8003342 <HAL_ADC_ErrorCallback>
}
 8003ffe:	e004      	b.n	800400a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	4798      	blx	r3
}
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff f984 	bl	800332e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004040:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404c:	f043 0204 	orr.w	r2, r3, #4
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f7ff f974 	bl	8003342 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004074:	4b0c      	ldr	r3, [pc, #48]	@ (80040a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004080:	4013      	ands	r3, r2
 8004082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800408c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004096:	4a04      	ldr	r2, [pc, #16]	@ (80040a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	60d3      	str	r3, [r2, #12]
}
 800409c:	bf00      	nop
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040b0:	4b04      	ldr	r3, [pc, #16]	@ (80040c4 <__NVIC_GetPriorityGrouping+0x18>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	0a1b      	lsrs	r3, r3, #8
 80040b6:	f003 0307 	and.w	r3, r3, #7
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	e000ed00 	.word	0xe000ed00

080040c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	db0b      	blt.n	80040f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	f003 021f 	and.w	r2, r3, #31
 80040e0:	4907      	ldr	r1, [pc, #28]	@ (8004100 <__NVIC_EnableIRQ+0x38>)
 80040e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	2001      	movs	r0, #1
 80040ea:	fa00 f202 	lsl.w	r2, r0, r2
 80040ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	e000e100 	.word	0xe000e100

08004104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	6039      	str	r1, [r7, #0]
 800410e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004114:	2b00      	cmp	r3, #0
 8004116:	db0a      	blt.n	800412e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	b2da      	uxtb	r2, r3
 800411c:	490c      	ldr	r1, [pc, #48]	@ (8004150 <__NVIC_SetPriority+0x4c>)
 800411e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004122:	0112      	lsls	r2, r2, #4
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	440b      	add	r3, r1
 8004128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800412c:	e00a      	b.n	8004144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	b2da      	uxtb	r2, r3
 8004132:	4908      	ldr	r1, [pc, #32]	@ (8004154 <__NVIC_SetPriority+0x50>)
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	3b04      	subs	r3, #4
 800413c:	0112      	lsls	r2, r2, #4
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	440b      	add	r3, r1
 8004142:	761a      	strb	r2, [r3, #24]
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	e000e100 	.word	0xe000e100
 8004154:	e000ed00 	.word	0xe000ed00

08004158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004158:	b480      	push	{r7}
 800415a:	b089      	sub	sp, #36	@ 0x24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f1c3 0307 	rsb	r3, r3, #7
 8004172:	2b04      	cmp	r3, #4
 8004174:	bf28      	it	cs
 8004176:	2304      	movcs	r3, #4
 8004178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3304      	adds	r3, #4
 800417e:	2b06      	cmp	r3, #6
 8004180:	d902      	bls.n	8004188 <NVIC_EncodePriority+0x30>
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	3b03      	subs	r3, #3
 8004186:	e000      	b.n	800418a <NVIC_EncodePriority+0x32>
 8004188:	2300      	movs	r3, #0
 800418a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800418c:	f04f 32ff 	mov.w	r2, #4294967295
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	43da      	mvns	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	401a      	ands	r2, r3
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041a0:	f04f 31ff 	mov.w	r1, #4294967295
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	fa01 f303 	lsl.w	r3, r1, r3
 80041aa:	43d9      	mvns	r1, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b0:	4313      	orrs	r3, r2
         );
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3724      	adds	r7, #36	@ 0x24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041d0:	d301      	bcc.n	80041d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041d2:	2301      	movs	r3, #1
 80041d4:	e00f      	b.n	80041f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004200 <SysTick_Config+0x40>)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3b01      	subs	r3, #1
 80041dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041de:	210f      	movs	r1, #15
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295
 80041e4:	f7ff ff8e 	bl	8004104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041e8:	4b05      	ldr	r3, [pc, #20]	@ (8004200 <SysTick_Config+0x40>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041ee:	4b04      	ldr	r3, [pc, #16]	@ (8004200 <SysTick_Config+0x40>)
 80041f0:	2207      	movs	r2, #7
 80041f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	e000e010 	.word	0xe000e010

08004204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff ff29 	bl	8004064 <__NVIC_SetPriorityGrouping>
}
 8004212:	bf00      	nop
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b086      	sub	sp, #24
 800421e:	af00      	add	r7, sp, #0
 8004220:	4603      	mov	r3, r0
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004228:	f7ff ff40 	bl	80040ac <__NVIC_GetPriorityGrouping>
 800422c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	6978      	ldr	r0, [r7, #20]
 8004234:	f7ff ff90 	bl	8004158 <NVIC_EncodePriority>
 8004238:	4602      	mov	r2, r0
 800423a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800423e:	4611      	mov	r1, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff5f 	bl	8004104 <__NVIC_SetPriority>
}
 8004246:	bf00      	nop
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	4603      	mov	r3, r0
 8004256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ff33 	bl	80040c8 <__NVIC_EnableIRQ>
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b082      	sub	sp, #8
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff ffa4 	bl	80041c0 <SysTick_Config>
 8004278:	4603      	mov	r3, r0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e08d      	b.n	80043b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	4b47      	ldr	r3, [pc, #284]	@ (80043bc <HAL_DMA_Init+0x138>)
 800429e:	429a      	cmp	r2, r3
 80042a0:	d80f      	bhi.n	80042c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	4b45      	ldr	r3, [pc, #276]	@ (80043c0 <HAL_DMA_Init+0x13c>)
 80042aa:	4413      	add	r3, r2
 80042ac:	4a45      	ldr	r2, [pc, #276]	@ (80043c4 <HAL_DMA_Init+0x140>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	091b      	lsrs	r3, r3, #4
 80042b4:	009a      	lsls	r2, r3, #2
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a42      	ldr	r2, [pc, #264]	@ (80043c8 <HAL_DMA_Init+0x144>)
 80042be:	641a      	str	r2, [r3, #64]	@ 0x40
 80042c0:	e00e      	b.n	80042e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	4b40      	ldr	r3, [pc, #256]	@ (80043cc <HAL_DMA_Init+0x148>)
 80042ca:	4413      	add	r3, r2
 80042cc:	4a3d      	ldr	r2, [pc, #244]	@ (80043c4 <HAL_DMA_Init+0x140>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	091b      	lsrs	r3, r3, #4
 80042d4:	009a      	lsls	r2, r3, #2
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a3c      	ldr	r2, [pc, #240]	@ (80043d0 <HAL_DMA_Init+0x14c>)
 80042de:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80042f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800431c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa10 	bl	8004758 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004340:	d102      	bne.n	8004348 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800435c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d010      	beq.n	8004388 <HAL_DMA_Init+0x104>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b04      	cmp	r3, #4
 800436c:	d80c      	bhi.n	8004388 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fa30 	bl	80047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	e008      	b.n	800439a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40020407 	.word	0x40020407
 80043c0:	bffdfff8 	.word	0xbffdfff8
 80043c4:	cccccccd 	.word	0xcccccccd
 80043c8:	40020000 	.word	0x40020000
 80043cc:	bffdfbf8 	.word	0xbffdfbf8
 80043d0:	40020400 	.word	0x40020400

080043d4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_DMA_Start_IT+0x20>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e066      	b.n	80044c2 <HAL_DMA_Start_IT+0xee>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	d155      	bne.n	80044b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f954 	bl	80046da <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 020e 	orr.w	r2, r2, #14
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	e00f      	b.n	800446c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0204 	bic.w	r2, r2, #4
 800445a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 020a 	orr.w	r2, r2, #10
 800446a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004484:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004488:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0201 	orr.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	e005      	b.n	80044c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80044bc:	2302      	movs	r3, #2
 80044be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b085      	sub	sp, #20
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d005      	beq.n	80044ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2204      	movs	r2, #4
 80044e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
 80044ec:	e037      	b.n	800455e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 020e 	bic.w	r2, r2, #14
 80044fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004508:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800450c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0201 	bic.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004522:	f003 021f 	and.w	r2, r3, #31
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	2101      	movs	r1, #1
 800452c:	fa01 f202 	lsl.w	r2, r1, r2
 8004530:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800453a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00c      	beq.n	800455e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004552:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800455c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	2204      	movs	r2, #4
 800459e:	409a      	lsls	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d026      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x7a>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d021      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d107      	bne.n	80045d0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0204 	bic.w	r2, r2, #4
 80045ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d4:	f003 021f 	and.w	r2, r3, #31
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045dc:	2104      	movs	r1, #4
 80045de:	fa01 f202 	lsl.w	r2, r1, r2
 80045e2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d071      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045f4:	e06c      	b.n	80046d0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	2202      	movs	r2, #2
 8004600:	409a      	lsls	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d02e      	beq.n	8004668 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d029      	beq.n	8004668 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10b      	bne.n	800463a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 020a 	bic.w	r2, r2, #10
 8004630:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463e:	f003 021f 	and.w	r2, r3, #31
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	2102      	movs	r1, #2
 8004648:	fa01 f202 	lsl.w	r2, r1, r2
 800464c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d038      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004666:	e033      	b.n	80046d0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	2208      	movs	r2, #8
 8004672:	409a      	lsls	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d02a      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d025      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 020e 	bic.w	r2, r2, #14
 8004694:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469a:	f003 021f 	and.w	r2, r3, #31
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	2101      	movs	r1, #1
 80046a4:	fa01 f202 	lsl.w	r2, r1, r2
 80046a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
}
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	607a      	str	r2, [r7, #4]
 80046e6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046f0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d004      	beq.n	8004704 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004702:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004708:	f003 021f 	and.w	r2, r3, #31
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004710:	2101      	movs	r1, #1
 8004712:	fa01 f202 	lsl.w	r2, r1, r2
 8004716:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b10      	cmp	r3, #16
 8004726:	d108      	bne.n	800473a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004738:	e007      	b.n	800474a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	60da      	str	r2, [r3, #12]
}
 800474a:	bf00      	nop
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	4b16      	ldr	r3, [pc, #88]	@ (80047c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004768:	429a      	cmp	r2, r3
 800476a:	d802      	bhi.n	8004772 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800476c:	4b15      	ldr	r3, [pc, #84]	@ (80047c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	e001      	b.n	8004776 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004772:	4b15      	ldr	r3, [pc, #84]	@ (80047c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004774:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	b2db      	uxtb	r3, r3
 8004780:	3b08      	subs	r3, #8
 8004782:	4a12      	ldr	r2, [pc, #72]	@ (80047cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004790:	089b      	lsrs	r3, r3, #2
 8004792:	009a      	lsls	r2, r3, #2
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	461a      	mov	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a0b      	ldr	r2, [pc, #44]	@ (80047d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80047a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	2201      	movs	r2, #1
 80047ac:	409a      	lsls	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40020407 	.word	0x40020407
 80047c4:	40020800 	.word	0x40020800
 80047c8:	40020820 	.word	0x40020820
 80047cc:	cccccccd 	.word	0xcccccccd
 80047d0:	40020880 	.word	0x40020880

080047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	461a      	mov	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a08      	ldr	r2, [pc, #32]	@ (8004818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80047f6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	2201      	movs	r2, #1
 8004802:	409a      	lsls	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004808:	bf00      	nop
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	1000823f 	.word	0x1000823f
 8004818:	40020940 	.word	0x40020940

0800481c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800482a:	e15a      	b.n	8004ae2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	2101      	movs	r1, #1
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	4013      	ands	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 814c 	beq.w	8004adc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d005      	beq.n	800485c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004858:	2b02      	cmp	r3, #2
 800485a:	d130      	bne.n	80048be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	2203      	movs	r2, #3
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4013      	ands	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004892:	2201      	movs	r2, #1
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4013      	ands	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 0201 	and.w	r2, r3, #1
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d017      	beq.n	80048fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	2203      	movs	r2, #3
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4013      	ands	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d123      	bne.n	800494e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	08da      	lsrs	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3208      	adds	r2, #8
 800490e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	220f      	movs	r2, #15
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4013      	ands	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	08da      	lsrs	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3208      	adds	r2, #8
 8004948:	6939      	ldr	r1, [r7, #16]
 800494a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	2203      	movs	r2, #3
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	43db      	mvns	r3, r3
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4013      	ands	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 0203 	and.w	r2, r3, #3
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 80a6 	beq.w	8004adc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004990:	4b5b      	ldr	r3, [pc, #364]	@ (8004b00 <HAL_GPIO_Init+0x2e4>)
 8004992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004994:	4a5a      	ldr	r2, [pc, #360]	@ (8004b00 <HAL_GPIO_Init+0x2e4>)
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	6613      	str	r3, [r2, #96]	@ 0x60
 800499c:	4b58      	ldr	r3, [pc, #352]	@ (8004b00 <HAL_GPIO_Init+0x2e4>)
 800499e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049a8:	4a56      	ldr	r2, [pc, #344]	@ (8004b04 <HAL_GPIO_Init+0x2e8>)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	089b      	lsrs	r3, r3, #2
 80049ae:	3302      	adds	r3, #2
 80049b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	220f      	movs	r2, #15
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	43db      	mvns	r3, r3
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4013      	ands	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049d2:	d01f      	beq.n	8004a14 <HAL_GPIO_Init+0x1f8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a4c      	ldr	r2, [pc, #304]	@ (8004b08 <HAL_GPIO_Init+0x2ec>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d019      	beq.n	8004a10 <HAL_GPIO_Init+0x1f4>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a4b      	ldr	r2, [pc, #300]	@ (8004b0c <HAL_GPIO_Init+0x2f0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d013      	beq.n	8004a0c <HAL_GPIO_Init+0x1f0>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004b10 <HAL_GPIO_Init+0x2f4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00d      	beq.n	8004a08 <HAL_GPIO_Init+0x1ec>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a49      	ldr	r2, [pc, #292]	@ (8004b14 <HAL_GPIO_Init+0x2f8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d007      	beq.n	8004a04 <HAL_GPIO_Init+0x1e8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a48      	ldr	r2, [pc, #288]	@ (8004b18 <HAL_GPIO_Init+0x2fc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d101      	bne.n	8004a00 <HAL_GPIO_Init+0x1e4>
 80049fc:	2305      	movs	r3, #5
 80049fe:	e00a      	b.n	8004a16 <HAL_GPIO_Init+0x1fa>
 8004a00:	2306      	movs	r3, #6
 8004a02:	e008      	b.n	8004a16 <HAL_GPIO_Init+0x1fa>
 8004a04:	2304      	movs	r3, #4
 8004a06:	e006      	b.n	8004a16 <HAL_GPIO_Init+0x1fa>
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e004      	b.n	8004a16 <HAL_GPIO_Init+0x1fa>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e002      	b.n	8004a16 <HAL_GPIO_Init+0x1fa>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <HAL_GPIO_Init+0x1fa>
 8004a14:	2300      	movs	r3, #0
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	f002 0203 	and.w	r2, r2, #3
 8004a1c:	0092      	lsls	r2, r2, #2
 8004a1e:	4093      	lsls	r3, r2
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a26:	4937      	ldr	r1, [pc, #220]	@ (8004b04 <HAL_GPIO_Init+0x2e8>)
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	089b      	lsrs	r3, r3, #2
 8004a2c:	3302      	adds	r3, #2
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a34:	4b39      	ldr	r3, [pc, #228]	@ (8004b1c <HAL_GPIO_Init+0x300>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4013      	ands	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a58:	4a30      	ldr	r2, [pc, #192]	@ (8004b1c <HAL_GPIO_Init+0x300>)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8004b1c <HAL_GPIO_Init+0x300>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	43db      	mvns	r3, r3
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a82:	4a26      	ldr	r2, [pc, #152]	@ (8004b1c <HAL_GPIO_Init+0x300>)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a88:	4b24      	ldr	r3, [pc, #144]	@ (8004b1c <HAL_GPIO_Init+0x300>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	43db      	mvns	r3, r3
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4013      	ands	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004aac:	4a1b      	ldr	r2, [pc, #108]	@ (8004b1c <HAL_GPIO_Init+0x300>)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8004b1c <HAL_GPIO_Init+0x300>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	43db      	mvns	r3, r3
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ad6:	4a11      	ldr	r2, [pc, #68]	@ (8004b1c <HAL_GPIO_Init+0x300>)
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f47f ae9d 	bne.w	800482c <HAL_GPIO_Init+0x10>
  }
}
 8004af2:	bf00      	nop
 8004af4:	bf00      	nop
 8004af6:	371c      	adds	r7, #28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40010000 	.word	0x40010000
 8004b08:	48000400 	.word	0x48000400
 8004b0c:	48000800 	.word	0x48000800
 8004b10:	48000c00 	.word	0x48000c00
 8004b14:	48001000 	.word	0x48001000
 8004b18:	48001400 	.word	0x48001400
 8004b1c:	40010400 	.word	0x40010400

08004b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e08d      	b.n	8004c4e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc fc64 	bl	8001414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2224      	movs	r2, #36	@ 0x24
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d107      	bne.n	8004b9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	e006      	b.n	8004ba8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004ba6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d108      	bne.n	8004bc2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bbe:	605a      	str	r2, [r3, #4]
 8004bc0:	e007      	b.n	8004bd2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004be4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69d9      	ldr	r1, [r3, #28]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1a      	ldr	r2, [r3, #32]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	4608      	mov	r0, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	461a      	mov	r2, r3
 8004c66:	4603      	mov	r3, r0
 8004c68:	817b      	strh	r3, [r7, #10]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	813b      	strh	r3, [r7, #8]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	f040 80f9 	bne.w	8004e72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_I2C_Mem_Write+0x34>
 8004c86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0ed      	b.n	8004e74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_I2C_Mem_Write+0x4e>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e0e6      	b.n	8004e74 <HAL_I2C_Mem_Write+0x21c>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cae:	f7fd fdb3 	bl	8002818 <HAL_GetTick>
 8004cb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	2319      	movs	r3, #25
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fac3 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0d1      	b.n	8004e74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2221      	movs	r2, #33	@ 0x21
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2240      	movs	r2, #64	@ 0x40
 8004cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a3a      	ldr	r2, [r7, #32]
 8004cea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cf8:	88f8      	ldrh	r0, [r7, #6]
 8004cfa:	893a      	ldrh	r2, [r7, #8]
 8004cfc:	8979      	ldrh	r1, [r7, #10]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	4603      	mov	r3, r0
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f9d3 	bl	80050b4 <I2C_RequestMemoryWrite>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0a9      	b.n	8004e74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2bff      	cmp	r3, #255	@ 0xff
 8004d28:	d90e      	bls.n	8004d48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	22ff      	movs	r2, #255	@ 0xff
 8004d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	8979      	ldrh	r1, [r7, #10]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fc47 	bl	80055d4 <I2C_TransferConfig>
 8004d46:	e00f      	b.n	8004d68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	8979      	ldrh	r1, [r7, #10]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 fc36 	bl	80055d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 fac6 	bl	80052fe <I2C_WaitOnTXISFlagUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e07b      	b.n	8004e74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d80:	781a      	ldrb	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d034      	beq.n	8004e20 <HAL_I2C_Mem_Write+0x1c8>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d130      	bne.n	8004e20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2180      	movs	r1, #128	@ 0x80
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 fa3f 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e04d      	b.n	8004e74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2bff      	cmp	r3, #255	@ 0xff
 8004de0:	d90e      	bls.n	8004e00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	22ff      	movs	r2, #255	@ 0xff
 8004de6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	8979      	ldrh	r1, [r7, #10]
 8004df0:	2300      	movs	r3, #0
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 fbeb 	bl	80055d4 <I2C_TransferConfig>
 8004dfe:	e00f      	b.n	8004e20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	8979      	ldrh	r1, [r7, #10]
 8004e12:	2300      	movs	r3, #0
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fbda 	bl	80055d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d19e      	bne.n	8004d68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 faac 	bl	800538c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e01a      	b.n	8004e74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2220      	movs	r2, #32
 8004e44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6859      	ldr	r1, [r3, #4]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	4b0a      	ldr	r3, [pc, #40]	@ (8004e7c <HAL_I2C_Mem_Write+0x224>)
 8004e52:	400b      	ands	r3, r1
 8004e54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e000      	b.n	8004e74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004e72:	2302      	movs	r3, #2
  }
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	fe00e800 	.word	0xfe00e800

08004e80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	4608      	mov	r0, r1
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	817b      	strh	r3, [r7, #10]
 8004e92:	460b      	mov	r3, r1
 8004e94:	813b      	strh	r3, [r7, #8]
 8004e96:	4613      	mov	r3, r2
 8004e98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	f040 80fd 	bne.w	80050a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_I2C_Mem_Read+0x34>
 8004eae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d105      	bne.n	8004ec0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0f1      	b.n	80050a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_I2C_Mem_Read+0x4e>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e0ea      	b.n	80050a4 <HAL_I2C_Mem_Read+0x224>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ed6:	f7fd fc9f 	bl	8002818 <HAL_GetTick>
 8004eda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	2319      	movs	r3, #25
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f9af 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0d5      	b.n	80050a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2222      	movs	r2, #34	@ 0x22
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2240      	movs	r2, #64	@ 0x40
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a3a      	ldr	r2, [r7, #32]
 8004f12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f20:	88f8      	ldrh	r0, [r7, #6]
 8004f22:	893a      	ldrh	r2, [r7, #8]
 8004f24:	8979      	ldrh	r1, [r7, #10]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	4603      	mov	r3, r0
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f913 	bl	800515c <I2C_RequestMemoryRead>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0ad      	b.n	80050a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	2bff      	cmp	r3, #255	@ 0xff
 8004f50:	d90e      	bls.n	8004f70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	22ff      	movs	r2, #255	@ 0xff
 8004f56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	8979      	ldrh	r1, [r7, #10]
 8004f60:	4b52      	ldr	r3, [pc, #328]	@ (80050ac <HAL_I2C_Mem_Read+0x22c>)
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 fb33 	bl	80055d4 <I2C_TransferConfig>
 8004f6e:	e00f      	b.n	8004f90 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	8979      	ldrh	r1, [r7, #10]
 8004f82:	4b4a      	ldr	r3, [pc, #296]	@ (80050ac <HAL_I2C_Mem_Read+0x22c>)
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 fb22 	bl	80055d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f96:	2200      	movs	r2, #0
 8004f98:	2104      	movs	r1, #4
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f956 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e07c      	b.n	80050a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d034      	beq.n	8005050 <HAL_I2C_Mem_Read+0x1d0>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d130      	bne.n	8005050 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2180      	movs	r1, #128	@ 0x80
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f927 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e04d      	b.n	80050a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500c:	b29b      	uxth	r3, r3
 800500e:	2bff      	cmp	r3, #255	@ 0xff
 8005010:	d90e      	bls.n	8005030 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	22ff      	movs	r2, #255	@ 0xff
 8005016:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800501c:	b2da      	uxtb	r2, r3
 800501e:	8979      	ldrh	r1, [r7, #10]
 8005020:	2300      	movs	r3, #0
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 fad3 	bl	80055d4 <I2C_TransferConfig>
 800502e:	e00f      	b.n	8005050 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800503e:	b2da      	uxtb	r2, r3
 8005040:	8979      	ldrh	r1, [r7, #10]
 8005042:	2300      	movs	r3, #0
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 fac2 	bl	80055d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d19a      	bne.n	8004f90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f994 	bl	800538c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e01a      	b.n	80050a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2220      	movs	r2, #32
 8005074:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6859      	ldr	r1, [r3, #4]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	4b0b      	ldr	r3, [pc, #44]	@ (80050b0 <HAL_I2C_Mem_Read+0x230>)
 8005082:	400b      	ands	r3, r1
 8005084:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	e000      	b.n	80050a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80050a2:	2302      	movs	r3, #2
  }
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	80002400 	.word	0x80002400
 80050b0:	fe00e800 	.word	0xfe00e800

080050b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	4608      	mov	r0, r1
 80050be:	4611      	mov	r1, r2
 80050c0:	461a      	mov	r2, r3
 80050c2:	4603      	mov	r3, r0
 80050c4:	817b      	strh	r3, [r7, #10]
 80050c6:	460b      	mov	r3, r1
 80050c8:	813b      	strh	r3, [r7, #8]
 80050ca:	4613      	mov	r3, r2
 80050cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	8979      	ldrh	r1, [r7, #10]
 80050d4:	4b20      	ldr	r3, [pc, #128]	@ (8005158 <I2C_RequestMemoryWrite+0xa4>)
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 fa79 	bl	80055d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	69b9      	ldr	r1, [r7, #24]
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f909 	bl	80052fe <I2C_WaitOnTXISFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e02c      	b.n	8005150 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d105      	bne.n	8005108 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050fc:	893b      	ldrh	r3, [r7, #8]
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	629a      	str	r2, [r3, #40]	@ 0x28
 8005106:	e015      	b.n	8005134 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005108:	893b      	ldrh	r3, [r7, #8]
 800510a:	0a1b      	lsrs	r3, r3, #8
 800510c:	b29b      	uxth	r3, r3
 800510e:	b2da      	uxtb	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	69b9      	ldr	r1, [r7, #24]
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 f8ef 	bl	80052fe <I2C_WaitOnTXISFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e012      	b.n	8005150 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800512a:	893b      	ldrh	r3, [r7, #8]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	2200      	movs	r2, #0
 800513c:	2180      	movs	r1, #128	@ 0x80
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 f884 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	80002000 	.word	0x80002000

0800515c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	4608      	mov	r0, r1
 8005166:	4611      	mov	r1, r2
 8005168:	461a      	mov	r2, r3
 800516a:	4603      	mov	r3, r0
 800516c:	817b      	strh	r3, [r7, #10]
 800516e:	460b      	mov	r3, r1
 8005170:	813b      	strh	r3, [r7, #8]
 8005172:	4613      	mov	r3, r2
 8005174:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005176:	88fb      	ldrh	r3, [r7, #6]
 8005178:	b2da      	uxtb	r2, r3
 800517a:	8979      	ldrh	r1, [r7, #10]
 800517c:	4b20      	ldr	r3, [pc, #128]	@ (8005200 <I2C_RequestMemoryRead+0xa4>)
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	2300      	movs	r3, #0
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 fa26 	bl	80055d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	69b9      	ldr	r1, [r7, #24]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f8b6 	bl	80052fe <I2C_WaitOnTXISFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e02c      	b.n	80051f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d105      	bne.n	80051ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051a2:	893b      	ldrh	r3, [r7, #8]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80051ac:	e015      	b.n	80051da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051ae:	893b      	ldrh	r3, [r7, #8]
 80051b0:	0a1b      	lsrs	r3, r3, #8
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	69b9      	ldr	r1, [r7, #24]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 f89c 	bl	80052fe <I2C_WaitOnTXISFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e012      	b.n	80051f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051d0:	893b      	ldrh	r3, [r7, #8]
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	2200      	movs	r2, #0
 80051e2:	2140      	movs	r1, #64	@ 0x40
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f831 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e000      	b.n	80051f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	80002000 	.word	0x80002000

08005204 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b02      	cmp	r3, #2
 8005218:	d103      	bne.n	8005222 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2200      	movs	r2, #0
 8005220:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b01      	cmp	r3, #1
 800522e:	d007      	beq.n	8005240 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0201 	orr.w	r2, r2, #1
 800523e:	619a      	str	r2, [r3, #24]
  }
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800525c:	e03b      	b.n	80052d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f8d6 	bl	8005414 <I2C_IsErrorOccurred>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e041      	b.n	80052f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d02d      	beq.n	80052d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527a:	f7fd facd 	bl	8002818 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d302      	bcc.n	8005290 <I2C_WaitOnFlagUntilTimeout+0x44>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d122      	bne.n	80052d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4013      	ands	r3, r2
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	429a      	cmp	r2, r3
 800529e:	bf0c      	ite	eq
 80052a0:	2301      	moveq	r3, #1
 80052a2:	2300      	movne	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	79fb      	ldrb	r3, [r7, #7]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d113      	bne.n	80052d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b2:	f043 0220 	orr.w	r2, r3, #32
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e00f      	b.n	80052f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699a      	ldr	r2, [r3, #24]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4013      	ands	r3, r2
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	bf0c      	ite	eq
 80052e6:	2301      	moveq	r3, #1
 80052e8:	2300      	movne	r3, #0
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d0b4      	beq.n	800525e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800530a:	e033      	b.n	8005374 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f87f 	bl	8005414 <I2C_IsErrorOccurred>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e031      	b.n	8005384 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005326:	d025      	beq.n	8005374 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005328:	f7fd fa76 	bl	8002818 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	429a      	cmp	r2, r3
 8005336:	d302      	bcc.n	800533e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d11a      	bne.n	8005374 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b02      	cmp	r3, #2
 800534a:	d013      	beq.n	8005374 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005350:	f043 0220 	orr.w	r2, r3, #32
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e007      	b.n	8005384 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b02      	cmp	r3, #2
 8005380:	d1c4      	bne.n	800530c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005398:	e02f      	b.n	80053fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f838 	bl	8005414 <I2C_IsErrorOccurred>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e02d      	b.n	800540a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ae:	f7fd fa33 	bl	8002818 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d302      	bcc.n	80053c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d11a      	bne.n	80053fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d013      	beq.n	80053fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d6:	f043 0220 	orr.w	r2, r3, #32
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e007      	b.n	800540a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b20      	cmp	r3, #32
 8005406:	d1c8      	bne.n	800539a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	@ 0x28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b00      	cmp	r3, #0
 800543e:	d068      	beq.n	8005512 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2210      	movs	r2, #16
 8005446:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005448:	e049      	b.n	80054de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005450:	d045      	beq.n	80054de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005452:	f7fd f9e1 	bl	8002818 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	429a      	cmp	r2, r3
 8005460:	d302      	bcc.n	8005468 <I2C_IsErrorOccurred+0x54>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d13a      	bne.n	80054de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005472:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800547a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005486:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800548a:	d121      	bne.n	80054d0 <I2C_IsErrorOccurred+0xbc>
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005492:	d01d      	beq.n	80054d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005494:	7cfb      	ldrb	r3, [r7, #19]
 8005496:	2b20      	cmp	r3, #32
 8005498:	d01a      	beq.n	80054d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80054aa:	f7fd f9b5 	bl	8002818 <HAL_GetTick>
 80054ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054b0:	e00e      	b.n	80054d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80054b2:	f7fd f9b1 	bl	8002818 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b19      	cmp	r3, #25
 80054be:	d907      	bls.n	80054d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	f043 0320 	orr.w	r3, r3, #32
 80054c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80054ce:	e006      	b.n	80054de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d1e9      	bne.n	80054b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d003      	beq.n	80054f4 <I2C_IsErrorOccurred+0xe0>
 80054ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0aa      	beq.n	800544a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80054f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d103      	bne.n	8005504 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2220      	movs	r2, #32
 8005502:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	f043 0304 	orr.w	r3, r3, #4
 800550a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00b      	beq.n	800553c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	f043 0301 	orr.w	r3, r3, #1
 800552a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005534:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	f043 0308 	orr.w	r3, r3, #8
 800554c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005556:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00b      	beq.n	8005580 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	f043 0302 	orr.w	r3, r3, #2
 800556e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005578:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01c      	beq.n	80055c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff fe3b 	bl	8005204 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6859      	ldr	r1, [r3, #4]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	4b0d      	ldr	r3, [pc, #52]	@ (80055d0 <I2C_IsErrorOccurred+0x1bc>)
 800559a:	400b      	ands	r3, r1
 800559c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	431a      	orrs	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80055c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3728      	adds	r7, #40	@ 0x28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	fe00e800 	.word	0xfe00e800

080055d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	607b      	str	r3, [r7, #4]
 80055de:	460b      	mov	r3, r1
 80055e0:	817b      	strh	r3, [r7, #10]
 80055e2:	4613      	mov	r3, r2
 80055e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055e6:	897b      	ldrh	r3, [r7, #10]
 80055e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055ec:	7a7b      	ldrb	r3, [r7, #9]
 80055ee:	041b      	lsls	r3, r3, #16
 80055f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005602:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	0d5b      	lsrs	r3, r3, #21
 800560e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005612:	4b08      	ldr	r3, [pc, #32]	@ (8005634 <I2C_TransferConfig+0x60>)
 8005614:	430b      	orrs	r3, r1
 8005616:	43db      	mvns	r3, r3
 8005618:	ea02 0103 	and.w	r1, r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	03ff63ff 	.word	0x03ff63ff

08005638 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b20      	cmp	r3, #32
 800564c:	d138      	bne.n	80056c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005658:	2302      	movs	r3, #2
 800565a:	e032      	b.n	80056c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2224      	movs	r2, #36	@ 0x24
 8005668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0201 	bic.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800568a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6819      	ldr	r1, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	e000      	b.n	80056c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056c0:	2302      	movs	r3, #2
  }
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d139      	bne.n	8005758 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056ee:	2302      	movs	r3, #2
 80056f0:	e033      	b.n	800575a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2224      	movs	r2, #36	@ 0x24
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005720:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	e000      	b.n	800575a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d141      	bne.n	80057fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005776:	4b4b      	ldr	r3, [pc, #300]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800577e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005782:	d131      	bne.n	80057e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005784:	4b47      	ldr	r3, [pc, #284]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800578a:	4a46      	ldr	r2, [pc, #280]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800578c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005790:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005794:	4b43      	ldr	r3, [pc, #268]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800579c:	4a41      	ldr	r2, [pc, #260]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800579e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057a4:	4b40      	ldr	r3, [pc, #256]	@ (80058a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2232      	movs	r2, #50	@ 0x32
 80057aa:	fb02 f303 	mul.w	r3, r2, r3
 80057ae:	4a3f      	ldr	r2, [pc, #252]	@ (80058ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057b0:	fba2 2303 	umull	r2, r3, r2, r3
 80057b4:	0c9b      	lsrs	r3, r3, #18
 80057b6:	3301      	adds	r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057ba:	e002      	b.n	80057c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3b01      	subs	r3, #1
 80057c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057c2:	4b38      	ldr	r3, [pc, #224]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ce:	d102      	bne.n	80057d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f2      	bne.n	80057bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057d6:	4b33      	ldr	r3, [pc, #204]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057e2:	d158      	bne.n	8005896 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e057      	b.n	8005898 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057e8:	4b2e      	ldr	r3, [pc, #184]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057ee:	4a2d      	ldr	r2, [pc, #180]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80057f8:	e04d      	b.n	8005896 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005800:	d141      	bne.n	8005886 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005802:	4b28      	ldr	r3, [pc, #160]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800580a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800580e:	d131      	bne.n	8005874 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005810:	4b24      	ldr	r3, [pc, #144]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005816:	4a23      	ldr	r2, [pc, #140]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800581c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005820:	4b20      	ldr	r3, [pc, #128]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005828:	4a1e      	ldr	r2, [pc, #120]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800582e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005830:	4b1d      	ldr	r3, [pc, #116]	@ (80058a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2232      	movs	r2, #50	@ 0x32
 8005836:	fb02 f303 	mul.w	r3, r2, r3
 800583a:	4a1c      	ldr	r2, [pc, #112]	@ (80058ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	0c9b      	lsrs	r3, r3, #18
 8005842:	3301      	adds	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005846:	e002      	b.n	800584e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3b01      	subs	r3, #1
 800584c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800584e:	4b15      	ldr	r3, [pc, #84]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800585a:	d102      	bne.n	8005862 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f2      	bne.n	8005848 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005862:	4b10      	ldr	r3, [pc, #64]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800586a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800586e:	d112      	bne.n	8005896 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e011      	b.n	8005898 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005874:	4b0b      	ldr	r3, [pc, #44]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800587a:	4a0a      	ldr	r2, [pc, #40]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800587c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005880:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005884:	e007      	b.n	8005896 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005886:	4b07      	ldr	r3, [pc, #28]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800588e:	4a05      	ldr	r2, [pc, #20]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005890:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005894:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	40007000 	.word	0x40007000
 80058a8:	20000024 	.word	0x20000024
 80058ac:	431bde83 	.word	0x431bde83

080058b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80058b4:	4b05      	ldr	r3, [pc, #20]	@ (80058cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4a04      	ldr	r2, [pc, #16]	@ (80058cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058be:	6093      	str	r3, [r2, #8]
}
 80058c0:	bf00      	nop
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40007000 	.word	0x40007000

080058d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e2fe      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d075      	beq.n	80059da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ee:	4b97      	ldr	r3, [pc, #604]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 030c 	and.w	r3, r3, #12
 80058f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058f8:	4b94      	ldr	r3, [pc, #592]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0303 	and.w	r3, r3, #3
 8005900:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b0c      	cmp	r3, #12
 8005906:	d102      	bne.n	800590e <HAL_RCC_OscConfig+0x3e>
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b03      	cmp	r3, #3
 800590c:	d002      	beq.n	8005914 <HAL_RCC_OscConfig+0x44>
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b08      	cmp	r3, #8
 8005912:	d10b      	bne.n	800592c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005914:	4b8d      	ldr	r3, [pc, #564]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d05b      	beq.n	80059d8 <HAL_RCC_OscConfig+0x108>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d157      	bne.n	80059d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e2d9      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005934:	d106      	bne.n	8005944 <HAL_RCC_OscConfig+0x74>
 8005936:	4b85      	ldr	r3, [pc, #532]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a84      	ldr	r2, [pc, #528]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 800593c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	e01d      	b.n	8005980 <HAL_RCC_OscConfig+0xb0>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800594c:	d10c      	bne.n	8005968 <HAL_RCC_OscConfig+0x98>
 800594e:	4b7f      	ldr	r3, [pc, #508]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a7e      	ldr	r2, [pc, #504]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	4b7c      	ldr	r3, [pc, #496]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a7b      	ldr	r2, [pc, #492]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	e00b      	b.n	8005980 <HAL_RCC_OscConfig+0xb0>
 8005968:	4b78      	ldr	r3, [pc, #480]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a77      	ldr	r2, [pc, #476]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 800596e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	4b75      	ldr	r3, [pc, #468]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a74      	ldr	r2, [pc, #464]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 800597a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800597e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d013      	beq.n	80059b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005988:	f7fc ff46 	bl	8002818 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005990:	f7fc ff42 	bl	8002818 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b64      	cmp	r3, #100	@ 0x64
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e29e      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059a2:	4b6a      	ldr	r3, [pc, #424]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0f0      	beq.n	8005990 <HAL_RCC_OscConfig+0xc0>
 80059ae:	e014      	b.n	80059da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b0:	f7fc ff32 	bl	8002818 <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059b8:	f7fc ff2e 	bl	8002818 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b64      	cmp	r3, #100	@ 0x64
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e28a      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059ca:	4b60      	ldr	r3, [pc, #384]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1f0      	bne.n	80059b8 <HAL_RCC_OscConfig+0xe8>
 80059d6:	e000      	b.n	80059da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d075      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059e6:	4b59      	ldr	r3, [pc, #356]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 030c 	and.w	r3, r3, #12
 80059ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059f0:	4b56      	ldr	r3, [pc, #344]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0303 	and.w	r3, r3, #3
 80059f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b0c      	cmp	r3, #12
 80059fe:	d102      	bne.n	8005a06 <HAL_RCC_OscConfig+0x136>
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d002      	beq.n	8005a0c <HAL_RCC_OscConfig+0x13c>
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d11f      	bne.n	8005a4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <HAL_RCC_OscConfig+0x154>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e25d      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a24:	4b49      	ldr	r3, [pc, #292]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	061b      	lsls	r3, r3, #24
 8005a32:	4946      	ldr	r1, [pc, #280]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a38:	4b45      	ldr	r3, [pc, #276]	@ (8005b50 <HAL_RCC_OscConfig+0x280>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fc fe9f 	bl	8002780 <HAL_InitTick>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d043      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e249      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d023      	beq.n	8005a9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a54:	4b3d      	ldr	r3, [pc, #244]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a3c      	ldr	r2, [pc, #240]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a60:	f7fc feda 	bl	8002818 <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a68:	f7fc fed6 	bl	8002818 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e232      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a7a:	4b34      	ldr	r3, [pc, #208]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0f0      	beq.n	8005a68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a86:	4b31      	ldr	r3, [pc, #196]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	061b      	lsls	r3, r3, #24
 8005a94:	492d      	ldr	r1, [pc, #180]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	604b      	str	r3, [r1, #4]
 8005a9a:	e01a      	b.n	8005ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a2a      	ldr	r2, [pc, #168]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005aa2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa8:	f7fc feb6 	bl	8002818 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ab0:	f7fc feb2 	bl	8002818 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e20e      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ac2:	4b22      	ldr	r3, [pc, #136]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f0      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x1e0>
 8005ace:	e000      	b.n	8005ad2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ad0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d041      	beq.n	8005b62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d01c      	beq.n	8005b20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ae6:	4b19      	ldr	r3, [pc, #100]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aec:	4a17      	ldr	r2, [pc, #92]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005aee:	f043 0301 	orr.w	r3, r3, #1
 8005af2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af6:	f7fc fe8f 	bl	8002818 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005afe:	f7fc fe8b 	bl	8002818 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e1e7      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b10:	4b0e      	ldr	r3, [pc, #56]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0ef      	beq.n	8005afe <HAL_RCC_OscConfig+0x22e>
 8005b1e:	e020      	b.n	8005b62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b20:	4b0a      	ldr	r3, [pc, #40]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b26:	4a09      	ldr	r2, [pc, #36]	@ (8005b4c <HAL_RCC_OscConfig+0x27c>)
 8005b28:	f023 0301 	bic.w	r3, r3, #1
 8005b2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b30:	f7fc fe72 	bl	8002818 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b36:	e00d      	b.n	8005b54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b38:	f7fc fe6e 	bl	8002818 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d906      	bls.n	8005b54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e1ca      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
 8005b4a:	bf00      	nop
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b54:	4b8c      	ldr	r3, [pc, #560]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1ea      	bne.n	8005b38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 80a6 	beq.w	8005cbc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b70:	2300      	movs	r3, #0
 8005b72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b74:	4b84      	ldr	r3, [pc, #528]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_RCC_OscConfig+0x2b4>
 8005b80:	2301      	movs	r3, #1
 8005b82:	e000      	b.n	8005b86 <HAL_RCC_OscConfig+0x2b6>
 8005b84:	2300      	movs	r3, #0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00d      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b94:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b96:	4b7c      	ldr	r3, [pc, #496]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ba6:	4b79      	ldr	r3, [pc, #484]	@ (8005d8c <HAL_RCC_OscConfig+0x4bc>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d118      	bne.n	8005be4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bb2:	4b76      	ldr	r3, [pc, #472]	@ (8005d8c <HAL_RCC_OscConfig+0x4bc>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a75      	ldr	r2, [pc, #468]	@ (8005d8c <HAL_RCC_OscConfig+0x4bc>)
 8005bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bbe:	f7fc fe2b 	bl	8002818 <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bc6:	f7fc fe27 	bl	8002818 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e183      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bd8:	4b6c      	ldr	r3, [pc, #432]	@ (8005d8c <HAL_RCC_OscConfig+0x4bc>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0f0      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d108      	bne.n	8005bfe <HAL_RCC_OscConfig+0x32e>
 8005bec:	4b66      	ldr	r3, [pc, #408]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf2:	4a65      	ldr	r2, [pc, #404]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005bf4:	f043 0301 	orr.w	r3, r3, #1
 8005bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bfc:	e024      	b.n	8005c48 <HAL_RCC_OscConfig+0x378>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b05      	cmp	r3, #5
 8005c04:	d110      	bne.n	8005c28 <HAL_RCC_OscConfig+0x358>
 8005c06:	4b60      	ldr	r3, [pc, #384]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0c:	4a5e      	ldr	r2, [pc, #376]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005c0e:	f043 0304 	orr.w	r3, r3, #4
 8005c12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c16:	4b5c      	ldr	r3, [pc, #368]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c1c:	4a5a      	ldr	r2, [pc, #360]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c26:	e00f      	b.n	8005c48 <HAL_RCC_OscConfig+0x378>
 8005c28:	4b57      	ldr	r3, [pc, #348]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c2e:	4a56      	ldr	r2, [pc, #344]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005c30:	f023 0301 	bic.w	r3, r3, #1
 8005c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c38:	4b53      	ldr	r3, [pc, #332]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c3e:	4a52      	ldr	r2, [pc, #328]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005c40:	f023 0304 	bic.w	r3, r3, #4
 8005c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d016      	beq.n	8005c7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c50:	f7fc fde2 	bl	8002818 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c56:	e00a      	b.n	8005c6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c58:	f7fc fdde 	bl	8002818 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e138      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c6e:	4b46      	ldr	r3, [pc, #280]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0ed      	beq.n	8005c58 <HAL_RCC_OscConfig+0x388>
 8005c7c:	e015      	b.n	8005caa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7e:	f7fc fdcb 	bl	8002818 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c84:	e00a      	b.n	8005c9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c86:	f7fc fdc7 	bl	8002818 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e121      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c9c:	4b3a      	ldr	r3, [pc, #232]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1ed      	bne.n	8005c86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005caa:	7ffb      	ldrb	r3, [r7, #31]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d105      	bne.n	8005cbc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cb0:	4b35      	ldr	r3, [pc, #212]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb4:	4a34      	ldr	r2, [pc, #208]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005cb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d03c      	beq.n	8005d42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01c      	beq.n	8005d0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce0:	f7fc fd9a 	bl	8002818 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ce8:	f7fc fd96 	bl	8002818 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e0f2      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cfa:	4b23      	ldr	r3, [pc, #140]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0ef      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x418>
 8005d08:	e01b      	b.n	8005d42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d10:	4a1d      	ldr	r2, [pc, #116]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005d12:	f023 0301 	bic.w	r3, r3, #1
 8005d16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1a:	f7fc fd7d 	bl	8002818 <HAL_GetTick>
 8005d1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d20:	e008      	b.n	8005d34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d22:	f7fc fd79 	bl	8002818 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e0d5      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d34:	4b14      	ldr	r3, [pc, #80]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1ef      	bne.n	8005d22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 80c9 	beq.w	8005ede <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 030c 	and.w	r3, r3, #12
 8005d54:	2b0c      	cmp	r3, #12
 8005d56:	f000 8083 	beq.w	8005e60 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d15e      	bne.n	8005e20 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d62:	4b09      	ldr	r3, [pc, #36]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a08      	ldr	r2, [pc, #32]	@ (8005d88 <HAL_RCC_OscConfig+0x4b8>)
 8005d68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6e:	f7fc fd53 	bl	8002818 <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d74:	e00c      	b.n	8005d90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d76:	f7fc fd4f 	bl	8002818 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d905      	bls.n	8005d90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e0ab      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d90:	4b55      	ldr	r3, [pc, #340]	@ (8005ee8 <HAL_RCC_OscConfig+0x618>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1ec      	bne.n	8005d76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d9c:	4b52      	ldr	r3, [pc, #328]	@ (8005ee8 <HAL_RCC_OscConfig+0x618>)
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	4b52      	ldr	r3, [pc, #328]	@ (8005eec <HAL_RCC_OscConfig+0x61c>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6a11      	ldr	r1, [r2, #32]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dac:	3a01      	subs	r2, #1
 8005dae:	0112      	lsls	r2, r2, #4
 8005db0:	4311      	orrs	r1, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005db6:	0212      	lsls	r2, r2, #8
 8005db8:	4311      	orrs	r1, r2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005dbe:	0852      	lsrs	r2, r2, #1
 8005dc0:	3a01      	subs	r2, #1
 8005dc2:	0552      	lsls	r2, r2, #21
 8005dc4:	4311      	orrs	r1, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005dca:	0852      	lsrs	r2, r2, #1
 8005dcc:	3a01      	subs	r2, #1
 8005dce:	0652      	lsls	r2, r2, #25
 8005dd0:	4311      	orrs	r1, r2
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005dd6:	06d2      	lsls	r2, r2, #27
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	4943      	ldr	r1, [pc, #268]	@ (8005ee8 <HAL_RCC_OscConfig+0x618>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005de0:	4b41      	ldr	r3, [pc, #260]	@ (8005ee8 <HAL_RCC_OscConfig+0x618>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a40      	ldr	r2, [pc, #256]	@ (8005ee8 <HAL_RCC_OscConfig+0x618>)
 8005de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005dec:	4b3e      	ldr	r3, [pc, #248]	@ (8005ee8 <HAL_RCC_OscConfig+0x618>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4a3d      	ldr	r2, [pc, #244]	@ (8005ee8 <HAL_RCC_OscConfig+0x618>)
 8005df2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005df6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df8:	f7fc fd0e 	bl	8002818 <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e00:	f7fc fd0a 	bl	8002818 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e066      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e12:	4b35      	ldr	r3, [pc, #212]	@ (8005ee8 <HAL_RCC_OscConfig+0x618>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0f0      	beq.n	8005e00 <HAL_RCC_OscConfig+0x530>
 8005e1e:	e05e      	b.n	8005ede <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e20:	4b31      	ldr	r3, [pc, #196]	@ (8005ee8 <HAL_RCC_OscConfig+0x618>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a30      	ldr	r2, [pc, #192]	@ (8005ee8 <HAL_RCC_OscConfig+0x618>)
 8005e26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2c:	f7fc fcf4 	bl	8002818 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e34:	f7fc fcf0 	bl	8002818 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e04c      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e46:	4b28      	ldr	r3, [pc, #160]	@ (8005ee8 <HAL_RCC_OscConfig+0x618>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f0      	bne.n	8005e34 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e52:	4b25      	ldr	r3, [pc, #148]	@ (8005ee8 <HAL_RCC_OscConfig+0x618>)
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	4924      	ldr	r1, [pc, #144]	@ (8005ee8 <HAL_RCC_OscConfig+0x618>)
 8005e58:	4b25      	ldr	r3, [pc, #148]	@ (8005ef0 <HAL_RCC_OscConfig+0x620>)
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	60cb      	str	r3, [r1, #12]
 8005e5e:	e03e      	b.n	8005ede <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e039      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ee8 <HAL_RCC_OscConfig+0x618>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f003 0203 	and.w	r2, r3, #3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d12c      	bne.n	8005eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d123      	bne.n	8005eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d11b      	bne.n	8005eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d113      	bne.n	8005eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebc:	085b      	lsrs	r3, r3, #1
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d109      	bne.n	8005eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed0:	085b      	lsrs	r3, r3, #1
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d001      	beq.n	8005ede <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3720      	adds	r7, #32
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	019f800c 	.word	0x019f800c
 8005ef0:	feeefffc 	.word	0xfeeefffc

08005ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e11e      	b.n	800614a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f0c:	4b91      	ldr	r3, [pc, #580]	@ (8006154 <HAL_RCC_ClockConfig+0x260>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 030f 	and.w	r3, r3, #15
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d910      	bls.n	8005f3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f1a:	4b8e      	ldr	r3, [pc, #568]	@ (8006154 <HAL_RCC_ClockConfig+0x260>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f023 020f 	bic.w	r2, r3, #15
 8005f22:	498c      	ldr	r1, [pc, #560]	@ (8006154 <HAL_RCC_ClockConfig+0x260>)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f2a:	4b8a      	ldr	r3, [pc, #552]	@ (8006154 <HAL_RCC_ClockConfig+0x260>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d001      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e106      	b.n	800614a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d073      	beq.n	8006030 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d129      	bne.n	8005fa4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f50:	4b81      	ldr	r3, [pc, #516]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0f4      	b.n	800614a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f60:	f000 f99e 	bl	80062a0 <RCC_GetSysClockFreqFromPLLSource>
 8005f64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	4a7c      	ldr	r2, [pc, #496]	@ (800615c <HAL_RCC_ClockConfig+0x268>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d93f      	bls.n	8005fee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d009      	beq.n	8005f8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d033      	beq.n	8005fee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d12f      	bne.n	8005fee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f8e:	4b72      	ldr	r3, [pc, #456]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f96:	4a70      	ldr	r2, [pc, #448]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 8005f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f9e:	2380      	movs	r3, #128	@ 0x80
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	e024      	b.n	8005fee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d107      	bne.n	8005fbc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fac:	4b6a      	ldr	r3, [pc, #424]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d109      	bne.n	8005fcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e0c6      	b.n	800614a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fbc:	4b66      	ldr	r3, [pc, #408]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0be      	b.n	800614a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005fcc:	f000 f8ce 	bl	800616c <HAL_RCC_GetSysClockFreq>
 8005fd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	4a61      	ldr	r2, [pc, #388]	@ (800615c <HAL_RCC_ClockConfig+0x268>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d909      	bls.n	8005fee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fda:	4b5f      	ldr	r3, [pc, #380]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fe2:	4a5d      	ldr	r2, [pc, #372]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 8005fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fe8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005fea:	2380      	movs	r3, #128	@ 0x80
 8005fec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fee:	4b5a      	ldr	r3, [pc, #360]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f023 0203 	bic.w	r2, r3, #3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	4957      	ldr	r1, [pc, #348]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006000:	f7fc fc0a 	bl	8002818 <HAL_GetTick>
 8006004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006006:	e00a      	b.n	800601e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006008:	f7fc fc06 	bl	8002818 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006016:	4293      	cmp	r3, r2
 8006018:	d901      	bls.n	800601e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e095      	b.n	800614a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800601e:	4b4e      	ldr	r3, [pc, #312]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 020c 	and.w	r2, r3, #12
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	429a      	cmp	r2, r3
 800602e:	d1eb      	bne.n	8006008 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d023      	beq.n	8006084 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006048:	4b43      	ldr	r3, [pc, #268]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	4a42      	ldr	r2, [pc, #264]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 800604e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006052:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b00      	cmp	r3, #0
 800605e:	d007      	beq.n	8006070 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006060:	4b3d      	ldr	r3, [pc, #244]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006068:	4a3b      	ldr	r2, [pc, #236]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 800606a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800606e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006070:	4b39      	ldr	r3, [pc, #228]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	4936      	ldr	r1, [pc, #216]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 800607e:	4313      	orrs	r3, r2
 8006080:	608b      	str	r3, [r1, #8]
 8006082:	e008      	b.n	8006096 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2b80      	cmp	r3, #128	@ 0x80
 8006088:	d105      	bne.n	8006096 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800608a:	4b33      	ldr	r3, [pc, #204]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	4a32      	ldr	r2, [pc, #200]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 8006090:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006094:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006096:	4b2f      	ldr	r3, [pc, #188]	@ (8006154 <HAL_RCC_ClockConfig+0x260>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d21d      	bcs.n	80060e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006154 <HAL_RCC_ClockConfig+0x260>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f023 020f 	bic.w	r2, r3, #15
 80060ac:	4929      	ldr	r1, [pc, #164]	@ (8006154 <HAL_RCC_ClockConfig+0x260>)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80060b4:	f7fc fbb0 	bl	8002818 <HAL_GetTick>
 80060b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ba:	e00a      	b.n	80060d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060bc:	f7fc fbac 	bl	8002818 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e03b      	b.n	800614a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d2:	4b20      	ldr	r3, [pc, #128]	@ (8006154 <HAL_RCC_ClockConfig+0x260>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 030f 	and.w	r3, r3, #15
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d1ed      	bne.n	80060bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4917      	ldr	r1, [pc, #92]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800610a:	4b13      	ldr	r3, [pc, #76]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	490f      	ldr	r1, [pc, #60]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 800611a:	4313      	orrs	r3, r2
 800611c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800611e:	f000 f825 	bl	800616c <HAL_RCC_GetSysClockFreq>
 8006122:	4602      	mov	r2, r0
 8006124:	4b0c      	ldr	r3, [pc, #48]	@ (8006158 <HAL_RCC_ClockConfig+0x264>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	490c      	ldr	r1, [pc, #48]	@ (8006160 <HAL_RCC_ClockConfig+0x26c>)
 8006130:	5ccb      	ldrb	r3, [r1, r3]
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	fa22 f303 	lsr.w	r3, r2, r3
 800613a:	4a0a      	ldr	r2, [pc, #40]	@ (8006164 <HAL_RCC_ClockConfig+0x270>)
 800613c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800613e:	4b0a      	ldr	r3, [pc, #40]	@ (8006168 <HAL_RCC_ClockConfig+0x274>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f7fc fb1c 	bl	8002780 <HAL_InitTick>
 8006148:	4603      	mov	r3, r0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	40022000 	.word	0x40022000
 8006158:	40021000 	.word	0x40021000
 800615c:	04c4b400 	.word	0x04c4b400
 8006160:	0800d008 	.word	0x0800d008
 8006164:	20000024 	.word	0x20000024
 8006168:	20000028 	.word	0x20000028

0800616c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006172:	4b2c      	ldr	r3, [pc, #176]	@ (8006224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 030c 	and.w	r3, r3, #12
 800617a:	2b04      	cmp	r3, #4
 800617c:	d102      	bne.n	8006184 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800617e:	4b2a      	ldr	r3, [pc, #168]	@ (8006228 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006180:	613b      	str	r3, [r7, #16]
 8006182:	e047      	b.n	8006214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006184:	4b27      	ldr	r3, [pc, #156]	@ (8006224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 030c 	and.w	r3, r3, #12
 800618c:	2b08      	cmp	r3, #8
 800618e:	d102      	bne.n	8006196 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006190:	4b26      	ldr	r3, [pc, #152]	@ (800622c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006192:	613b      	str	r3, [r7, #16]
 8006194:	e03e      	b.n	8006214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006196:	4b23      	ldr	r3, [pc, #140]	@ (8006224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 030c 	and.w	r3, r3, #12
 800619e:	2b0c      	cmp	r3, #12
 80061a0:	d136      	bne.n	8006210 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061a2:	4b20      	ldr	r3, [pc, #128]	@ (8006224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	091b      	lsrs	r3, r3, #4
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	3301      	adds	r3, #1
 80061b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d10c      	bne.n	80061da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061c0:	4a1a      	ldr	r2, [pc, #104]	@ (800622c <HAL_RCC_GetSysClockFreq+0xc0>)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c8:	4a16      	ldr	r2, [pc, #88]	@ (8006224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ca:	68d2      	ldr	r2, [r2, #12]
 80061cc:	0a12      	lsrs	r2, r2, #8
 80061ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	617b      	str	r3, [r7, #20]
      break;
 80061d8:	e00c      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061da:	4a13      	ldr	r2, [pc, #76]	@ (8006228 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e2:	4a10      	ldr	r2, [pc, #64]	@ (8006224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061e4:	68d2      	ldr	r2, [r2, #12]
 80061e6:	0a12      	lsrs	r2, r2, #8
 80061e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061ec:	fb02 f303 	mul.w	r3, r2, r3
 80061f0:	617b      	str	r3, [r7, #20]
      break;
 80061f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	0e5b      	lsrs	r3, r3, #25
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	3301      	adds	r3, #1
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	fbb2 f3f3 	udiv	r3, r2, r3
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	e001      	b.n	8006214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006214:	693b      	ldr	r3, [r7, #16]
}
 8006216:	4618      	mov	r0, r3
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40021000 	.word	0x40021000
 8006228:	00f42400 	.word	0x00f42400
 800622c:	016e3600 	.word	0x016e3600

08006230 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006230:	b480      	push	{r7}
 8006232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006234:	4b03      	ldr	r3, [pc, #12]	@ (8006244 <HAL_RCC_GetHCLKFreq+0x14>)
 8006236:	681b      	ldr	r3, [r3, #0]
}
 8006238:	4618      	mov	r0, r3
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	20000024 	.word	0x20000024

08006248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800624c:	f7ff fff0 	bl	8006230 <HAL_RCC_GetHCLKFreq>
 8006250:	4602      	mov	r2, r0
 8006252:	4b06      	ldr	r3, [pc, #24]	@ (800626c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	0a1b      	lsrs	r3, r3, #8
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	4904      	ldr	r1, [pc, #16]	@ (8006270 <HAL_RCC_GetPCLK1Freq+0x28>)
 800625e:	5ccb      	ldrb	r3, [r1, r3]
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006268:	4618      	mov	r0, r3
 800626a:	bd80      	pop	{r7, pc}
 800626c:	40021000 	.word	0x40021000
 8006270:	0800d018 	.word	0x0800d018

08006274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006278:	f7ff ffda 	bl	8006230 <HAL_RCC_GetHCLKFreq>
 800627c:	4602      	mov	r2, r0
 800627e:	4b06      	ldr	r3, [pc, #24]	@ (8006298 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	0adb      	lsrs	r3, r3, #11
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	4904      	ldr	r1, [pc, #16]	@ (800629c <HAL_RCC_GetPCLK2Freq+0x28>)
 800628a:	5ccb      	ldrb	r3, [r1, r3]
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006294:	4618      	mov	r0, r3
 8006296:	bd80      	pop	{r7, pc}
 8006298:	40021000 	.word	0x40021000
 800629c:	0800d018 	.word	0x0800d018

080062a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	091b      	lsrs	r3, r3, #4
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	3301      	adds	r3, #1
 80062bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d10c      	bne.n	80062de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062c4:	4a17      	ldr	r2, [pc, #92]	@ (8006324 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062cc:	4a14      	ldr	r2, [pc, #80]	@ (8006320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062ce:	68d2      	ldr	r2, [r2, #12]
 80062d0:	0a12      	lsrs	r2, r2, #8
 80062d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062d6:	fb02 f303 	mul.w	r3, r2, r3
 80062da:	617b      	str	r3, [r7, #20]
    break;
 80062dc:	e00c      	b.n	80062f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062de:	4a12      	ldr	r2, [pc, #72]	@ (8006328 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e6:	4a0e      	ldr	r2, [pc, #56]	@ (8006320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062e8:	68d2      	ldr	r2, [r2, #12]
 80062ea:	0a12      	lsrs	r2, r2, #8
 80062ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062f0:	fb02 f303 	mul.w	r3, r2, r3
 80062f4:	617b      	str	r3, [r7, #20]
    break;
 80062f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062f8:	4b09      	ldr	r3, [pc, #36]	@ (8006320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	0e5b      	lsrs	r3, r3, #25
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	3301      	adds	r3, #1
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006310:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006312:	687b      	ldr	r3, [r7, #4]
}
 8006314:	4618      	mov	r0, r3
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	40021000 	.word	0x40021000
 8006324:	016e3600 	.word	0x016e3600
 8006328:	00f42400 	.word	0x00f42400

0800632c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006334:	2300      	movs	r3, #0
 8006336:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006338:	2300      	movs	r3, #0
 800633a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8098 	beq.w	800647a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800634a:	2300      	movs	r3, #0
 800634c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800634e:	4b43      	ldr	r3, [pc, #268]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10d      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800635a:	4b40      	ldr	r3, [pc, #256]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800635c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635e:	4a3f      	ldr	r2, [pc, #252]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006364:	6593      	str	r3, [r2, #88]	@ 0x58
 8006366:	4b3d      	ldr	r3, [pc, #244]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800636e:	60bb      	str	r3, [r7, #8]
 8006370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006372:	2301      	movs	r3, #1
 8006374:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006376:	4b3a      	ldr	r3, [pc, #232]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a39      	ldr	r2, [pc, #228]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800637c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006380:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006382:	f7fc fa49 	bl	8002818 <HAL_GetTick>
 8006386:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006388:	e009      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800638a:	f7fc fa45 	bl	8002818 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d902      	bls.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	74fb      	strb	r3, [r7, #19]
        break;
 800639c:	e005      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800639e:	4b30      	ldr	r3, [pc, #192]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0ef      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80063aa:	7cfb      	ldrb	r3, [r7, #19]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d159      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063b0:	4b2a      	ldr	r3, [pc, #168]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d01e      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d019      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063cc:	4b23      	ldr	r3, [pc, #140]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063d8:	4b20      	ldr	r3, [pc, #128]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063de:	4a1f      	ldr	r2, [pc, #124]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063e8:	4b1c      	ldr	r3, [pc, #112]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ee:	4a1b      	ldr	r2, [pc, #108]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063f8:	4a18      	ldr	r2, [pc, #96]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b00      	cmp	r3, #0
 8006408:	d016      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640a:	f7fc fa05 	bl	8002818 <HAL_GetTick>
 800640e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006410:	e00b      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006412:	f7fc fa01 	bl	8002818 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006420:	4293      	cmp	r3, r2
 8006422:	d902      	bls.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	74fb      	strb	r3, [r7, #19]
            break;
 8006428:	e006      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800642a:	4b0c      	ldr	r3, [pc, #48]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800642c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0ec      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006438:	7cfb      	ldrb	r3, [r7, #19]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10b      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800643e:	4b07      	ldr	r3, [pc, #28]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006444:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800644c:	4903      	ldr	r1, [pc, #12]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800644e:	4313      	orrs	r3, r2
 8006450:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006454:	e008      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006456:	7cfb      	ldrb	r3, [r7, #19]
 8006458:	74bb      	strb	r3, [r7, #18]
 800645a:	e005      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800645c:	40021000 	.word	0x40021000
 8006460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006464:	7cfb      	ldrb	r3, [r7, #19]
 8006466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006468:	7c7b      	ldrb	r3, [r7, #17]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d105      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800646e:	4ba7      	ldr	r3, [pc, #668]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006472:	4aa6      	ldr	r2, [pc, #664]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006478:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006486:	4ba1      	ldr	r3, [pc, #644]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648c:	f023 0203 	bic.w	r2, r3, #3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	499d      	ldr	r1, [pc, #628]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006496:	4313      	orrs	r3, r2
 8006498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064a8:	4b98      	ldr	r3, [pc, #608]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ae:	f023 020c 	bic.w	r2, r3, #12
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	4995      	ldr	r1, [pc, #596]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0304 	and.w	r3, r3, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064ca:	4b90      	ldr	r3, [pc, #576]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	498c      	ldr	r1, [pc, #560]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0308 	and.w	r3, r3, #8
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064ec:	4b87      	ldr	r3, [pc, #540]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	4984      	ldr	r1, [pc, #528]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0310 	and.w	r3, r3, #16
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800650e:	4b7f      	ldr	r3, [pc, #508]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006514:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	497b      	ldr	r1, [pc, #492]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0320 	and.w	r3, r3, #32
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006530:	4b76      	ldr	r3, [pc, #472]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006536:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	4973      	ldr	r1, [pc, #460]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006540:	4313      	orrs	r3, r2
 8006542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006552:	4b6e      	ldr	r3, [pc, #440]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006558:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	496a      	ldr	r1, [pc, #424]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00a      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006574:	4b65      	ldr	r3, [pc, #404]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	4962      	ldr	r1, [pc, #392]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006584:	4313      	orrs	r3, r2
 8006586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006596:	4b5d      	ldr	r3, [pc, #372]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800659c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a4:	4959      	ldr	r1, [pc, #356]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00a      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065b8:	4b54      	ldr	r3, [pc, #336]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065be:	f023 0203 	bic.w	r2, r3, #3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c6:	4951      	ldr	r1, [pc, #324]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065da:	4b4c      	ldr	r3, [pc, #304]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e8:	4948      	ldr	r1, [pc, #288]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d015      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065fc:	4b43      	ldr	r3, [pc, #268]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006602:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660a:	4940      	ldr	r1, [pc, #256]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800660c:	4313      	orrs	r3, r2
 800660e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006616:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800661a:	d105      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800661c:	4b3b      	ldr	r3, [pc, #236]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	4a3a      	ldr	r2, [pc, #232]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006622:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006626:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006630:	2b00      	cmp	r3, #0
 8006632:	d015      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006634:	4b35      	ldr	r3, [pc, #212]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800663a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006642:	4932      	ldr	r1, [pc, #200]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006644:	4313      	orrs	r3, r2
 8006646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800664e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006652:	d105      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006654:	4b2d      	ldr	r3, [pc, #180]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	4a2c      	ldr	r2, [pc, #176]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800665a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800665e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d015      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800666c:	4b27      	ldr	r3, [pc, #156]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006672:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667a:	4924      	ldr	r1, [pc, #144]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667c:	4313      	orrs	r3, r2
 800667e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006686:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800668a:	d105      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800668c:	4b1f      	ldr	r3, [pc, #124]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	4a1e      	ldr	r2, [pc, #120]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006696:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d015      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066a4:	4b19      	ldr	r3, [pc, #100]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b2:	4916      	ldr	r1, [pc, #88]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066c2:	d105      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066c4:	4b11      	ldr	r3, [pc, #68]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	4a10      	ldr	r2, [pc, #64]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d019      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066dc:	4b0b      	ldr	r3, [pc, #44]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ea:	4908      	ldr	r1, [pc, #32]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066fa:	d109      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066fc:	4b03      	ldr	r3, [pc, #12]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	4a02      	ldr	r2, [pc, #8]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006706:	60d3      	str	r3, [r2, #12]
 8006708:	e002      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800670a:	bf00      	nop
 800670c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d015      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800671c:	4b29      	ldr	r3, [pc, #164]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800671e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006722:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672a:	4926      	ldr	r1, [pc, #152]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800673a:	d105      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800673c:	4b21      	ldr	r3, [pc, #132]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	4a20      	ldr	r2, [pc, #128]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006746:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d015      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006754:	4b1b      	ldr	r3, [pc, #108]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800675a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006762:	4918      	ldr	r1, [pc, #96]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006764:	4313      	orrs	r3, r2
 8006766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800676e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006772:	d105      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006774:	4b13      	ldr	r3, [pc, #76]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	4a12      	ldr	r2, [pc, #72]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800677a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800677e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d015      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800678c:	4b0d      	ldr	r3, [pc, #52]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800678e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006792:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800679a:	490a      	ldr	r1, [pc, #40]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800679c:	4313      	orrs	r3, r2
 800679e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067aa:	d105      	bne.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067ac:	4b05      	ldr	r3, [pc, #20]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	4a04      	ldr	r2, [pc, #16]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	40021000 	.word	0x40021000

080067c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e049      	b.n	800686e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d106      	bne.n	80067f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7fb fea8 	bl	8002544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3304      	adds	r3, #4
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f000 fb6a 	bl	8006ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b01      	cmp	r3, #1
 800688a:	d001      	beq.n	8006890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e054      	b.n	800693a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0201 	orr.w	r2, r2, #1
 80068a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a26      	ldr	r2, [pc, #152]	@ (8006948 <HAL_TIM_Base_Start_IT+0xd0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d022      	beq.n	80068f8 <HAL_TIM_Base_Start_IT+0x80>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ba:	d01d      	beq.n	80068f8 <HAL_TIM_Base_Start_IT+0x80>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a22      	ldr	r2, [pc, #136]	@ (800694c <HAL_TIM_Base_Start_IT+0xd4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d018      	beq.n	80068f8 <HAL_TIM_Base_Start_IT+0x80>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a21      	ldr	r2, [pc, #132]	@ (8006950 <HAL_TIM_Base_Start_IT+0xd8>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d013      	beq.n	80068f8 <HAL_TIM_Base_Start_IT+0x80>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006954 <HAL_TIM_Base_Start_IT+0xdc>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00e      	beq.n	80068f8 <HAL_TIM_Base_Start_IT+0x80>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1e      	ldr	r2, [pc, #120]	@ (8006958 <HAL_TIM_Base_Start_IT+0xe0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d009      	beq.n	80068f8 <HAL_TIM_Base_Start_IT+0x80>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1c      	ldr	r2, [pc, #112]	@ (800695c <HAL_TIM_Base_Start_IT+0xe4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d004      	beq.n	80068f8 <HAL_TIM_Base_Start_IT+0x80>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006960 <HAL_TIM_Base_Start_IT+0xe8>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d115      	bne.n	8006924 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	4b19      	ldr	r3, [pc, #100]	@ (8006964 <HAL_TIM_Base_Start_IT+0xec>)
 8006900:	4013      	ands	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b06      	cmp	r3, #6
 8006908:	d015      	beq.n	8006936 <HAL_TIM_Base_Start_IT+0xbe>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006910:	d011      	beq.n	8006936 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0201 	orr.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006922:	e008      	b.n	8006936 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0201 	orr.w	r2, r2, #1
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	e000      	b.n	8006938 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006936:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	40012c00 	.word	0x40012c00
 800694c:	40000400 	.word	0x40000400
 8006950:	40000800 	.word	0x40000800
 8006954:	40000c00 	.word	0x40000c00
 8006958:	40013400 	.word	0x40013400
 800695c:	40014000 	.word	0x40014000
 8006960:	40015000 	.word	0x40015000
 8006964:	00010007 	.word	0x00010007

08006968 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0201 	bic.w	r2, r2, #1
 800697e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6a1a      	ldr	r2, [r3, #32]
 8006986:	f241 1311 	movw	r3, #4369	@ 0x1111
 800698a:	4013      	ands	r3, r2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10f      	bne.n	80069b0 <HAL_TIM_Base_Stop_IT+0x48>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6a1a      	ldr	r2, [r3, #32]
 8006996:	f244 4344 	movw	r3, #17476	@ 0x4444
 800699a:	4013      	ands	r3, r2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d107      	bne.n	80069b0 <HAL_TIM_Base_Stop_IT+0x48>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 0201 	bic.w	r2, r2, #1
 80069ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d020      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d01b      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f06f 0202 	mvn.w	r2, #2
 80069fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fa47 	bl	8006ea4 <HAL_TIM_IC_CaptureCallback>
 8006a16:	e005      	b.n	8006a24 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fa39 	bl	8006e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fa4a 	bl	8006eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d020      	beq.n	8006a76 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01b      	beq.n	8006a76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f06f 0204 	mvn.w	r2, #4
 8006a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fa21 	bl	8006ea4 <HAL_TIM_IC_CaptureCallback>
 8006a62:	e005      	b.n	8006a70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fa13 	bl	8006e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa24 	bl	8006eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d020      	beq.n	8006ac2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01b      	beq.n	8006ac2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f06f 0208 	mvn.w	r2, #8
 8006a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2204      	movs	r2, #4
 8006a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	f003 0303 	and.w	r3, r3, #3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f9fb 	bl	8006ea4 <HAL_TIM_IC_CaptureCallback>
 8006aae:	e005      	b.n	8006abc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f9ed 	bl	8006e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f9fe 	bl	8006eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f003 0310 	and.w	r3, r3, #16
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d020      	beq.n	8006b0e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f003 0310 	and.w	r3, r3, #16
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d01b      	beq.n	8006b0e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f06f 0210 	mvn.w	r2, #16
 8006ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2208      	movs	r2, #8
 8006ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f9d5 	bl	8006ea4 <HAL_TIM_IC_CaptureCallback>
 8006afa:	e005      	b.n	8006b08 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f9c7 	bl	8006e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f9d8 	bl	8006eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00c      	beq.n	8006b32 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d007      	beq.n	8006b32 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f06f 0201 	mvn.w	r2, #1
 8006b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7fa fe03 	bl	8001738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d104      	bne.n	8006b46 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00c      	beq.n	8006b60 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d007      	beq.n	8006b60 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fbb0 	bl	80072c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00c      	beq.n	8006b84 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d007      	beq.n	8006b84 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fba8 	bl	80072d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00c      	beq.n	8006ba8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d007      	beq.n	8006ba8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f992 	bl	8006ecc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00c      	beq.n	8006bcc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d007      	beq.n	8006bcc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f06f 0220 	mvn.w	r2, #32
 8006bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fb70 	bl	80072ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00c      	beq.n	8006bf0 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d007      	beq.n	8006bf0 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fb7c 	bl	80072e8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00c      	beq.n	8006c14 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fb74 	bl	80072fc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00c      	beq.n	8006c38 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d007      	beq.n	8006c38 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fb6c 	bl	8007310 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00c      	beq.n	8006c5c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d007      	beq.n	8006c5c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fb64 	bl	8007324 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c5c:	bf00      	nop
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <HAL_TIM_ConfigClockSource+0x1c>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e0f6      	b.n	8006e6e <HAL_TIM_ConfigClockSource+0x20a>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006c9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006caa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a6f      	ldr	r2, [pc, #444]	@ (8006e78 <HAL_TIM_ConfigClockSource+0x214>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	f000 80c1 	beq.w	8006e42 <HAL_TIM_ConfigClockSource+0x1de>
 8006cc0:	4a6d      	ldr	r2, [pc, #436]	@ (8006e78 <HAL_TIM_ConfigClockSource+0x214>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	f200 80c6 	bhi.w	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cc8:	4a6c      	ldr	r2, [pc, #432]	@ (8006e7c <HAL_TIM_ConfigClockSource+0x218>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	f000 80b9 	beq.w	8006e42 <HAL_TIM_ConfigClockSource+0x1de>
 8006cd0:	4a6a      	ldr	r2, [pc, #424]	@ (8006e7c <HAL_TIM_ConfigClockSource+0x218>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	f200 80be 	bhi.w	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cd8:	4a69      	ldr	r2, [pc, #420]	@ (8006e80 <HAL_TIM_ConfigClockSource+0x21c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	f000 80b1 	beq.w	8006e42 <HAL_TIM_ConfigClockSource+0x1de>
 8006ce0:	4a67      	ldr	r2, [pc, #412]	@ (8006e80 <HAL_TIM_ConfigClockSource+0x21c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	f200 80b6 	bhi.w	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ce8:	4a66      	ldr	r2, [pc, #408]	@ (8006e84 <HAL_TIM_ConfigClockSource+0x220>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	f000 80a9 	beq.w	8006e42 <HAL_TIM_ConfigClockSource+0x1de>
 8006cf0:	4a64      	ldr	r2, [pc, #400]	@ (8006e84 <HAL_TIM_ConfigClockSource+0x220>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	f200 80ae 	bhi.w	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cf8:	4a63      	ldr	r2, [pc, #396]	@ (8006e88 <HAL_TIM_ConfigClockSource+0x224>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	f000 80a1 	beq.w	8006e42 <HAL_TIM_ConfigClockSource+0x1de>
 8006d00:	4a61      	ldr	r2, [pc, #388]	@ (8006e88 <HAL_TIM_ConfigClockSource+0x224>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	f200 80a6 	bhi.w	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d08:	4a60      	ldr	r2, [pc, #384]	@ (8006e8c <HAL_TIM_ConfigClockSource+0x228>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	f000 8099 	beq.w	8006e42 <HAL_TIM_ConfigClockSource+0x1de>
 8006d10:	4a5e      	ldr	r2, [pc, #376]	@ (8006e8c <HAL_TIM_ConfigClockSource+0x228>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	f200 809e 	bhi.w	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d1c:	f000 8091 	beq.w	8006e42 <HAL_TIM_ConfigClockSource+0x1de>
 8006d20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d24:	f200 8096 	bhi.w	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d2c:	f000 8089 	beq.w	8006e42 <HAL_TIM_ConfigClockSource+0x1de>
 8006d30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d34:	f200 808e 	bhi.w	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d3c:	d03e      	beq.n	8006dbc <HAL_TIM_ConfigClockSource+0x158>
 8006d3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d42:	f200 8087 	bhi.w	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d4a:	f000 8086 	beq.w	8006e5a <HAL_TIM_ConfigClockSource+0x1f6>
 8006d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d52:	d87f      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d54:	2b70      	cmp	r3, #112	@ 0x70
 8006d56:	d01a      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x12a>
 8006d58:	2b70      	cmp	r3, #112	@ 0x70
 8006d5a:	d87b      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d5c:	2b60      	cmp	r3, #96	@ 0x60
 8006d5e:	d050      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x19e>
 8006d60:	2b60      	cmp	r3, #96	@ 0x60
 8006d62:	d877      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d64:	2b50      	cmp	r3, #80	@ 0x50
 8006d66:	d03c      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x17e>
 8006d68:	2b50      	cmp	r3, #80	@ 0x50
 8006d6a:	d873      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d6c:	2b40      	cmp	r3, #64	@ 0x40
 8006d6e:	d058      	beq.n	8006e22 <HAL_TIM_ConfigClockSource+0x1be>
 8006d70:	2b40      	cmp	r3, #64	@ 0x40
 8006d72:	d86f      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d74:	2b30      	cmp	r3, #48	@ 0x30
 8006d76:	d064      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x1de>
 8006d78:	2b30      	cmp	r3, #48	@ 0x30
 8006d7a:	d86b      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	d060      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x1de>
 8006d80:	2b20      	cmp	r3, #32
 8006d82:	d867      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d05c      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x1de>
 8006d88:	2b10      	cmp	r3, #16
 8006d8a:	d05a      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x1de>
 8006d8c:	e062      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d9e:	f000 f9cf 	bl	8007140 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006db0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	609a      	str	r2, [r3, #8]
      break;
 8006dba:	e04f      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dcc:	f000 f9b8 	bl	8007140 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dde:	609a      	str	r2, [r3, #8]
      break;
 8006de0:	e03c      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dee:	461a      	mov	r2, r3
 8006df0:	f000 f92a 	bl	8007048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2150      	movs	r1, #80	@ 0x50
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 f983 	bl	8007106 <TIM_ITRx_SetConfig>
      break;
 8006e00:	e02c      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f000 f949 	bl	80070a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2160      	movs	r1, #96	@ 0x60
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 f973 	bl	8007106 <TIM_ITRx_SetConfig>
      break;
 8006e20:	e01c      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f000 f90a 	bl	8007048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2140      	movs	r1, #64	@ 0x40
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 f963 	bl	8007106 <TIM_ITRx_SetConfig>
      break;
 8006e40:	e00c      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f000 f95a 	bl	8007106 <TIM_ITRx_SetConfig>
      break;
 8006e52:	e003      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	73fb      	strb	r3, [r7, #15]
      break;
 8006e58:	e000      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	00100070 	.word	0x00100070
 8006e7c:	00100060 	.word	0x00100060
 8006e80:	00100050 	.word	0x00100050
 8006e84:	00100040 	.word	0x00100040
 8006e88:	00100030 	.word	0x00100030
 8006e8c:	00100020 	.word	0x00100020

08006e90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a4c      	ldr	r2, [pc, #304]	@ (8007024 <TIM_Base_SetConfig+0x144>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d017      	beq.n	8006f28 <TIM_Base_SetConfig+0x48>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006efe:	d013      	beq.n	8006f28 <TIM_Base_SetConfig+0x48>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a49      	ldr	r2, [pc, #292]	@ (8007028 <TIM_Base_SetConfig+0x148>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00f      	beq.n	8006f28 <TIM_Base_SetConfig+0x48>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a48      	ldr	r2, [pc, #288]	@ (800702c <TIM_Base_SetConfig+0x14c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00b      	beq.n	8006f28 <TIM_Base_SetConfig+0x48>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a47      	ldr	r2, [pc, #284]	@ (8007030 <TIM_Base_SetConfig+0x150>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d007      	beq.n	8006f28 <TIM_Base_SetConfig+0x48>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a46      	ldr	r2, [pc, #280]	@ (8007034 <TIM_Base_SetConfig+0x154>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d003      	beq.n	8006f28 <TIM_Base_SetConfig+0x48>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a45      	ldr	r2, [pc, #276]	@ (8007038 <TIM_Base_SetConfig+0x158>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d108      	bne.n	8006f3a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a39      	ldr	r2, [pc, #228]	@ (8007024 <TIM_Base_SetConfig+0x144>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d023      	beq.n	8006f8a <TIM_Base_SetConfig+0xaa>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f48:	d01f      	beq.n	8006f8a <TIM_Base_SetConfig+0xaa>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a36      	ldr	r2, [pc, #216]	@ (8007028 <TIM_Base_SetConfig+0x148>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d01b      	beq.n	8006f8a <TIM_Base_SetConfig+0xaa>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a35      	ldr	r2, [pc, #212]	@ (800702c <TIM_Base_SetConfig+0x14c>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d017      	beq.n	8006f8a <TIM_Base_SetConfig+0xaa>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a34      	ldr	r2, [pc, #208]	@ (8007030 <TIM_Base_SetConfig+0x150>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d013      	beq.n	8006f8a <TIM_Base_SetConfig+0xaa>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a33      	ldr	r2, [pc, #204]	@ (8007034 <TIM_Base_SetConfig+0x154>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00f      	beq.n	8006f8a <TIM_Base_SetConfig+0xaa>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a33      	ldr	r2, [pc, #204]	@ (800703c <TIM_Base_SetConfig+0x15c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d00b      	beq.n	8006f8a <TIM_Base_SetConfig+0xaa>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a32      	ldr	r2, [pc, #200]	@ (8007040 <TIM_Base_SetConfig+0x160>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d007      	beq.n	8006f8a <TIM_Base_SetConfig+0xaa>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a31      	ldr	r2, [pc, #196]	@ (8007044 <TIM_Base_SetConfig+0x164>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d003      	beq.n	8006f8a <TIM_Base_SetConfig+0xaa>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a2c      	ldr	r2, [pc, #176]	@ (8007038 <TIM_Base_SetConfig+0x158>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d108      	bne.n	8006f9c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a18      	ldr	r2, [pc, #96]	@ (8007024 <TIM_Base_SetConfig+0x144>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d013      	beq.n	8006ff0 <TIM_Base_SetConfig+0x110>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a1a      	ldr	r2, [pc, #104]	@ (8007034 <TIM_Base_SetConfig+0x154>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00f      	beq.n	8006ff0 <TIM_Base_SetConfig+0x110>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800703c <TIM_Base_SetConfig+0x15c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d00b      	beq.n	8006ff0 <TIM_Base_SetConfig+0x110>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a19      	ldr	r2, [pc, #100]	@ (8007040 <TIM_Base_SetConfig+0x160>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d007      	beq.n	8006ff0 <TIM_Base_SetConfig+0x110>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a18      	ldr	r2, [pc, #96]	@ (8007044 <TIM_Base_SetConfig+0x164>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d003      	beq.n	8006ff0 <TIM_Base_SetConfig+0x110>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a13      	ldr	r2, [pc, #76]	@ (8007038 <TIM_Base_SetConfig+0x158>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d103      	bne.n	8006ff8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	691a      	ldr	r2, [r3, #16]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b01      	cmp	r3, #1
 8007008:	d105      	bne.n	8007016 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f023 0201 	bic.w	r2, r3, #1
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	611a      	str	r2, [r3, #16]
  }
}
 8007016:	bf00      	nop
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	40012c00 	.word	0x40012c00
 8007028:	40000400 	.word	0x40000400
 800702c:	40000800 	.word	0x40000800
 8007030:	40000c00 	.word	0x40000c00
 8007034:	40013400 	.word	0x40013400
 8007038:	40015000 	.word	0x40015000
 800703c:	40014000 	.word	0x40014000
 8007040:	40014400 	.word	0x40014400
 8007044:	40014800 	.word	0x40014800

08007048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f023 0201 	bic.w	r2, r3, #1
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f023 030a 	bic.w	r3, r3, #10
 8007084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	4313      	orrs	r3, r2
 800708c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	621a      	str	r2, [r3, #32]
}
 800709a:	bf00      	nop
 800709c:	371c      	adds	r7, #28
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b087      	sub	sp, #28
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	60b9      	str	r1, [r7, #8]
 80070b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	f023 0210 	bic.w	r2, r3, #16
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	031b      	lsls	r3, r3, #12
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	011b      	lsls	r3, r3, #4
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	621a      	str	r2, [r3, #32]
}
 80070fa:	bf00      	nop
 80070fc:	371c      	adds	r7, #28
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800711c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	f043 0307 	orr.w	r3, r3, #7
 800712c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	609a      	str	r2, [r3, #8]
}
 8007134:	bf00      	nop
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800715a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	021a      	lsls	r2, r3, #8
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	431a      	orrs	r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	4313      	orrs	r3, r2
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	609a      	str	r2, [r3, #8]
}
 8007174:	bf00      	nop
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007194:	2302      	movs	r3, #2
 8007196:	e074      	b.n	8007282 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a34      	ldr	r2, [pc, #208]	@ (8007290 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d009      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a33      	ldr	r2, [pc, #204]	@ (8007294 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d004      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a31      	ldr	r2, [pc, #196]	@ (8007298 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d108      	bne.n	80071e8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80071dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80071ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a21      	ldr	r2, [pc, #132]	@ (8007290 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d022      	beq.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007218:	d01d      	beq.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a1f      	ldr	r2, [pc, #124]	@ (800729c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d018      	beq.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a1d      	ldr	r2, [pc, #116]	@ (80072a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d013      	beq.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a1c      	ldr	r2, [pc, #112]	@ (80072a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00e      	beq.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a15      	ldr	r2, [pc, #84]	@ (8007294 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d009      	beq.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a18      	ldr	r2, [pc, #96]	@ (80072a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d004      	beq.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a11      	ldr	r2, [pc, #68]	@ (8007298 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d10c      	bne.n	8007270 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800725c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	4313      	orrs	r3, r2
 8007266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	40012c00 	.word	0x40012c00
 8007294:	40013400 	.word	0x40013400
 8007298:	40015000 	.word	0x40015000
 800729c:	40000400 	.word	0x40000400
 80072a0:	40000800 	.word	0x40000800
 80072a4:	40000c00 	.word	0x40000c00
 80072a8:	40014000 	.word	0x40014000

080072ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e042      	b.n	80073d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007350:	2b00      	cmp	r3, #0
 8007352:	d106      	bne.n	8007362 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7fb f975 	bl	800264c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2224      	movs	r2, #36	@ 0x24
 8007366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 0201 	bic.w	r2, r2, #1
 8007378:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fbb2 	bl	8007aec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f8b3 	bl	80074f4 <UART_SetConfig>
 800738e:	4603      	mov	r3, r0
 8007390:	2b01      	cmp	r3, #1
 8007392:	d101      	bne.n	8007398 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e01b      	b.n	80073d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0201 	orr.w	r2, r2, #1
 80073c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fc31 	bl	8007c30 <UART_CheckIdleState>
 80073ce:	4603      	mov	r3, r0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08a      	sub	sp, #40	@ 0x28
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	603b      	str	r3, [r7, #0]
 80073e4:	4613      	mov	r3, r2
 80073e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	d17b      	bne.n	80074ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <HAL_UART_Transmit+0x26>
 80073f8:	88fb      	ldrh	r3, [r7, #6]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e074      	b.n	80074ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2221      	movs	r2, #33	@ 0x21
 800740e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007412:	f7fb fa01 	bl	8002818 <HAL_GetTick>
 8007416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	88fa      	ldrh	r2, [r7, #6]
 800741c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	88fa      	ldrh	r2, [r7, #6]
 8007424:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007430:	d108      	bne.n	8007444 <HAL_UART_Transmit+0x6c>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d104      	bne.n	8007444 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800743a:	2300      	movs	r3, #0
 800743c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	61bb      	str	r3, [r7, #24]
 8007442:	e003      	b.n	800744c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007448:	2300      	movs	r3, #0
 800744a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800744c:	e030      	b.n	80074b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2200      	movs	r2, #0
 8007456:	2180      	movs	r1, #128	@ 0x80
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 fc93 	bl	8007d84 <UART_WaitOnFlagUntilTimeout>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d005      	beq.n	8007470 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2220      	movs	r2, #32
 8007468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e03d      	b.n	80074ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10b      	bne.n	800748e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007484:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	3302      	adds	r3, #2
 800748a:	61bb      	str	r3, [r7, #24]
 800748c:	e007      	b.n	800749e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	781a      	ldrb	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	3301      	adds	r3, #1
 800749c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	3b01      	subs	r3, #1
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1c8      	bne.n	800744e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	2200      	movs	r2, #0
 80074c4:	2140      	movs	r1, #64	@ 0x40
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 fc5c 	bl	8007d84 <UART_WaitOnFlagUntilTimeout>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e006      	b.n	80074ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	e000      	b.n	80074ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80074ea:	2302      	movs	r3, #2
  }
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3720      	adds	r7, #32
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074f8:	b08c      	sub	sp, #48	@ 0x30
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	431a      	orrs	r2, r3
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	431a      	orrs	r2, r3
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	4313      	orrs	r3, r2
 800751a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4baa      	ldr	r3, [pc, #680]	@ (80077cc <UART_SetConfig+0x2d8>)
 8007524:	4013      	ands	r3, r2
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	6812      	ldr	r2, [r2, #0]
 800752a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800752c:	430b      	orrs	r3, r1
 800752e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a9f      	ldr	r2, [pc, #636]	@ (80077d0 <UART_SetConfig+0x2dc>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d004      	beq.n	8007560 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800755c:	4313      	orrs	r3, r2
 800755e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800756a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	6812      	ldr	r2, [r2, #0]
 8007572:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007574:	430b      	orrs	r3, r1
 8007576:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757e:	f023 010f 	bic.w	r1, r3, #15
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a90      	ldr	r2, [pc, #576]	@ (80077d4 <UART_SetConfig+0x2e0>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d125      	bne.n	80075e4 <UART_SetConfig+0xf0>
 8007598:	4b8f      	ldr	r3, [pc, #572]	@ (80077d8 <UART_SetConfig+0x2e4>)
 800759a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d81a      	bhi.n	80075dc <UART_SetConfig+0xe8>
 80075a6:	a201      	add	r2, pc, #4	@ (adr r2, 80075ac <UART_SetConfig+0xb8>)
 80075a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ac:	080075bd 	.word	0x080075bd
 80075b0:	080075cd 	.word	0x080075cd
 80075b4:	080075c5 	.word	0x080075c5
 80075b8:	080075d5 	.word	0x080075d5
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075c2:	e116      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80075c4:	2302      	movs	r3, #2
 80075c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ca:	e112      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80075cc:	2304      	movs	r3, #4
 80075ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075d2:	e10e      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80075d4:	2308      	movs	r3, #8
 80075d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075da:	e10a      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80075dc:	2310      	movs	r3, #16
 80075de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e2:	e106      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a7c      	ldr	r2, [pc, #496]	@ (80077dc <UART_SetConfig+0x2e8>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d138      	bne.n	8007660 <UART_SetConfig+0x16c>
 80075ee:	4b7a      	ldr	r3, [pc, #488]	@ (80077d8 <UART_SetConfig+0x2e4>)
 80075f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f4:	f003 030c 	and.w	r3, r3, #12
 80075f8:	2b0c      	cmp	r3, #12
 80075fa:	d82d      	bhi.n	8007658 <UART_SetConfig+0x164>
 80075fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007604 <UART_SetConfig+0x110>)
 80075fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007602:	bf00      	nop
 8007604:	08007639 	.word	0x08007639
 8007608:	08007659 	.word	0x08007659
 800760c:	08007659 	.word	0x08007659
 8007610:	08007659 	.word	0x08007659
 8007614:	08007649 	.word	0x08007649
 8007618:	08007659 	.word	0x08007659
 800761c:	08007659 	.word	0x08007659
 8007620:	08007659 	.word	0x08007659
 8007624:	08007641 	.word	0x08007641
 8007628:	08007659 	.word	0x08007659
 800762c:	08007659 	.word	0x08007659
 8007630:	08007659 	.word	0x08007659
 8007634:	08007651 	.word	0x08007651
 8007638:	2300      	movs	r3, #0
 800763a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800763e:	e0d8      	b.n	80077f2 <UART_SetConfig+0x2fe>
 8007640:	2302      	movs	r3, #2
 8007642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007646:	e0d4      	b.n	80077f2 <UART_SetConfig+0x2fe>
 8007648:	2304      	movs	r3, #4
 800764a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800764e:	e0d0      	b.n	80077f2 <UART_SetConfig+0x2fe>
 8007650:	2308      	movs	r3, #8
 8007652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007656:	e0cc      	b.n	80077f2 <UART_SetConfig+0x2fe>
 8007658:	2310      	movs	r3, #16
 800765a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800765e:	e0c8      	b.n	80077f2 <UART_SetConfig+0x2fe>
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a5e      	ldr	r2, [pc, #376]	@ (80077e0 <UART_SetConfig+0x2ec>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d125      	bne.n	80076b6 <UART_SetConfig+0x1c2>
 800766a:	4b5b      	ldr	r3, [pc, #364]	@ (80077d8 <UART_SetConfig+0x2e4>)
 800766c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007670:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007674:	2b30      	cmp	r3, #48	@ 0x30
 8007676:	d016      	beq.n	80076a6 <UART_SetConfig+0x1b2>
 8007678:	2b30      	cmp	r3, #48	@ 0x30
 800767a:	d818      	bhi.n	80076ae <UART_SetConfig+0x1ba>
 800767c:	2b20      	cmp	r3, #32
 800767e:	d00a      	beq.n	8007696 <UART_SetConfig+0x1a2>
 8007680:	2b20      	cmp	r3, #32
 8007682:	d814      	bhi.n	80076ae <UART_SetConfig+0x1ba>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <UART_SetConfig+0x19a>
 8007688:	2b10      	cmp	r3, #16
 800768a:	d008      	beq.n	800769e <UART_SetConfig+0x1aa>
 800768c:	e00f      	b.n	80076ae <UART_SetConfig+0x1ba>
 800768e:	2300      	movs	r3, #0
 8007690:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007694:	e0ad      	b.n	80077f2 <UART_SetConfig+0x2fe>
 8007696:	2302      	movs	r3, #2
 8007698:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800769c:	e0a9      	b.n	80077f2 <UART_SetConfig+0x2fe>
 800769e:	2304      	movs	r3, #4
 80076a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076a4:	e0a5      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80076a6:	2308      	movs	r3, #8
 80076a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ac:	e0a1      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80076ae:	2310      	movs	r3, #16
 80076b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076b4:	e09d      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a4a      	ldr	r2, [pc, #296]	@ (80077e4 <UART_SetConfig+0x2f0>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d125      	bne.n	800770c <UART_SetConfig+0x218>
 80076c0:	4b45      	ldr	r3, [pc, #276]	@ (80077d8 <UART_SetConfig+0x2e4>)
 80076c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80076ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80076cc:	d016      	beq.n	80076fc <UART_SetConfig+0x208>
 80076ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80076d0:	d818      	bhi.n	8007704 <UART_SetConfig+0x210>
 80076d2:	2b80      	cmp	r3, #128	@ 0x80
 80076d4:	d00a      	beq.n	80076ec <UART_SetConfig+0x1f8>
 80076d6:	2b80      	cmp	r3, #128	@ 0x80
 80076d8:	d814      	bhi.n	8007704 <UART_SetConfig+0x210>
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <UART_SetConfig+0x1f0>
 80076de:	2b40      	cmp	r3, #64	@ 0x40
 80076e0:	d008      	beq.n	80076f4 <UART_SetConfig+0x200>
 80076e2:	e00f      	b.n	8007704 <UART_SetConfig+0x210>
 80076e4:	2300      	movs	r3, #0
 80076e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ea:	e082      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80076ec:	2302      	movs	r3, #2
 80076ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076f2:	e07e      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80076f4:	2304      	movs	r3, #4
 80076f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076fa:	e07a      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80076fc:	2308      	movs	r3, #8
 80076fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007702:	e076      	b.n	80077f2 <UART_SetConfig+0x2fe>
 8007704:	2310      	movs	r3, #16
 8007706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800770a:	e072      	b.n	80077f2 <UART_SetConfig+0x2fe>
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a35      	ldr	r2, [pc, #212]	@ (80077e8 <UART_SetConfig+0x2f4>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d12a      	bne.n	800776c <UART_SetConfig+0x278>
 8007716:	4b30      	ldr	r3, [pc, #192]	@ (80077d8 <UART_SetConfig+0x2e4>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800771c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007720:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007724:	d01a      	beq.n	800775c <UART_SetConfig+0x268>
 8007726:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800772a:	d81b      	bhi.n	8007764 <UART_SetConfig+0x270>
 800772c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007730:	d00c      	beq.n	800774c <UART_SetConfig+0x258>
 8007732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007736:	d815      	bhi.n	8007764 <UART_SetConfig+0x270>
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <UART_SetConfig+0x250>
 800773c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007740:	d008      	beq.n	8007754 <UART_SetConfig+0x260>
 8007742:	e00f      	b.n	8007764 <UART_SetConfig+0x270>
 8007744:	2300      	movs	r3, #0
 8007746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800774a:	e052      	b.n	80077f2 <UART_SetConfig+0x2fe>
 800774c:	2302      	movs	r3, #2
 800774e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007752:	e04e      	b.n	80077f2 <UART_SetConfig+0x2fe>
 8007754:	2304      	movs	r3, #4
 8007756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800775a:	e04a      	b.n	80077f2 <UART_SetConfig+0x2fe>
 800775c:	2308      	movs	r3, #8
 800775e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007762:	e046      	b.n	80077f2 <UART_SetConfig+0x2fe>
 8007764:	2310      	movs	r3, #16
 8007766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800776a:	e042      	b.n	80077f2 <UART_SetConfig+0x2fe>
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a17      	ldr	r2, [pc, #92]	@ (80077d0 <UART_SetConfig+0x2dc>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d13a      	bne.n	80077ec <UART_SetConfig+0x2f8>
 8007776:	4b18      	ldr	r3, [pc, #96]	@ (80077d8 <UART_SetConfig+0x2e4>)
 8007778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800777c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007780:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007784:	d01a      	beq.n	80077bc <UART_SetConfig+0x2c8>
 8007786:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800778a:	d81b      	bhi.n	80077c4 <UART_SetConfig+0x2d0>
 800778c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007790:	d00c      	beq.n	80077ac <UART_SetConfig+0x2b8>
 8007792:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007796:	d815      	bhi.n	80077c4 <UART_SetConfig+0x2d0>
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <UART_SetConfig+0x2b0>
 800779c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077a0:	d008      	beq.n	80077b4 <UART_SetConfig+0x2c0>
 80077a2:	e00f      	b.n	80077c4 <UART_SetConfig+0x2d0>
 80077a4:	2300      	movs	r3, #0
 80077a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077aa:	e022      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80077ac:	2302      	movs	r3, #2
 80077ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077b2:	e01e      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80077b4:	2304      	movs	r3, #4
 80077b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ba:	e01a      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80077bc:	2308      	movs	r3, #8
 80077be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077c2:	e016      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80077c4:	2310      	movs	r3, #16
 80077c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ca:	e012      	b.n	80077f2 <UART_SetConfig+0x2fe>
 80077cc:	cfff69f3 	.word	0xcfff69f3
 80077d0:	40008000 	.word	0x40008000
 80077d4:	40013800 	.word	0x40013800
 80077d8:	40021000 	.word	0x40021000
 80077dc:	40004400 	.word	0x40004400
 80077e0:	40004800 	.word	0x40004800
 80077e4:	40004c00 	.word	0x40004c00
 80077e8:	40005000 	.word	0x40005000
 80077ec:	2310      	movs	r3, #16
 80077ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4aae      	ldr	r2, [pc, #696]	@ (8007ab0 <UART_SetConfig+0x5bc>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	f040 8097 	bne.w	800792c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007802:	2b08      	cmp	r3, #8
 8007804:	d823      	bhi.n	800784e <UART_SetConfig+0x35a>
 8007806:	a201      	add	r2, pc, #4	@ (adr r2, 800780c <UART_SetConfig+0x318>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	08007831 	.word	0x08007831
 8007810:	0800784f 	.word	0x0800784f
 8007814:	08007839 	.word	0x08007839
 8007818:	0800784f 	.word	0x0800784f
 800781c:	0800783f 	.word	0x0800783f
 8007820:	0800784f 	.word	0x0800784f
 8007824:	0800784f 	.word	0x0800784f
 8007828:	0800784f 	.word	0x0800784f
 800782c:	08007847 	.word	0x08007847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007830:	f7fe fd0a 	bl	8006248 <HAL_RCC_GetPCLK1Freq>
 8007834:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007836:	e010      	b.n	800785a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007838:	4b9e      	ldr	r3, [pc, #632]	@ (8007ab4 <UART_SetConfig+0x5c0>)
 800783a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800783c:	e00d      	b.n	800785a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800783e:	f7fe fc95 	bl	800616c <HAL_RCC_GetSysClockFreq>
 8007842:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007844:	e009      	b.n	800785a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800784a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800784c:	e005      	b.n	800785a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007858:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 8130 	beq.w	8007ac2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007866:	4a94      	ldr	r2, [pc, #592]	@ (8007ab8 <UART_SetConfig+0x5c4>)
 8007868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800786c:	461a      	mov	r2, r3
 800786e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007870:	fbb3 f3f2 	udiv	r3, r3, r2
 8007874:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	685a      	ldr	r2, [r3, #4]
 800787a:	4613      	mov	r3, r2
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	4413      	add	r3, r2
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	429a      	cmp	r2, r3
 8007884:	d305      	bcc.n	8007892 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	429a      	cmp	r2, r3
 8007890:	d903      	bls.n	800789a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007898:	e113      	b.n	8007ac2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789c:	2200      	movs	r2, #0
 800789e:	60bb      	str	r3, [r7, #8]
 80078a0:	60fa      	str	r2, [r7, #12]
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a6:	4a84      	ldr	r2, [pc, #528]	@ (8007ab8 <UART_SetConfig+0x5c4>)
 80078a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	2200      	movs	r2, #0
 80078b0:	603b      	str	r3, [r7, #0]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078bc:	f7f9 fa0c 	bl	8000cd8 <__aeabi_uldivmod>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	4610      	mov	r0, r2
 80078c6:	4619      	mov	r1, r3
 80078c8:	f04f 0200 	mov.w	r2, #0
 80078cc:	f04f 0300 	mov.w	r3, #0
 80078d0:	020b      	lsls	r3, r1, #8
 80078d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078d6:	0202      	lsls	r2, r0, #8
 80078d8:	6979      	ldr	r1, [r7, #20]
 80078da:	6849      	ldr	r1, [r1, #4]
 80078dc:	0849      	lsrs	r1, r1, #1
 80078de:	2000      	movs	r0, #0
 80078e0:	460c      	mov	r4, r1
 80078e2:	4605      	mov	r5, r0
 80078e4:	eb12 0804 	adds.w	r8, r2, r4
 80078e8:	eb43 0905 	adc.w	r9, r3, r5
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	469a      	mov	sl, r3
 80078f4:	4693      	mov	fp, r2
 80078f6:	4652      	mov	r2, sl
 80078f8:	465b      	mov	r3, fp
 80078fa:	4640      	mov	r0, r8
 80078fc:	4649      	mov	r1, r9
 80078fe:	f7f9 f9eb 	bl	8000cd8 <__aeabi_uldivmod>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4613      	mov	r3, r2
 8007908:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007910:	d308      	bcc.n	8007924 <UART_SetConfig+0x430>
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007918:	d204      	bcs.n	8007924 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6a3a      	ldr	r2, [r7, #32]
 8007920:	60da      	str	r2, [r3, #12]
 8007922:	e0ce      	b.n	8007ac2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800792a:	e0ca      	b.n	8007ac2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007934:	d166      	bne.n	8007a04 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007936:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800793a:	2b08      	cmp	r3, #8
 800793c:	d827      	bhi.n	800798e <UART_SetConfig+0x49a>
 800793e:	a201      	add	r2, pc, #4	@ (adr r2, 8007944 <UART_SetConfig+0x450>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	08007969 	.word	0x08007969
 8007948:	08007971 	.word	0x08007971
 800794c:	08007979 	.word	0x08007979
 8007950:	0800798f 	.word	0x0800798f
 8007954:	0800797f 	.word	0x0800797f
 8007958:	0800798f 	.word	0x0800798f
 800795c:	0800798f 	.word	0x0800798f
 8007960:	0800798f 	.word	0x0800798f
 8007964:	08007987 	.word	0x08007987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007968:	f7fe fc6e 	bl	8006248 <HAL_RCC_GetPCLK1Freq>
 800796c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800796e:	e014      	b.n	800799a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007970:	f7fe fc80 	bl	8006274 <HAL_RCC_GetPCLK2Freq>
 8007974:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007976:	e010      	b.n	800799a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007978:	4b4e      	ldr	r3, [pc, #312]	@ (8007ab4 <UART_SetConfig+0x5c0>)
 800797a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800797c:	e00d      	b.n	800799a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800797e:	f7fe fbf5 	bl	800616c <HAL_RCC_GetSysClockFreq>
 8007982:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007984:	e009      	b.n	800799a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800798a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800798c:	e005      	b.n	800799a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800798e:	2300      	movs	r3, #0
 8007990:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007998:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800799a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 8090 	beq.w	8007ac2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a6:	4a44      	ldr	r2, [pc, #272]	@ (8007ab8 <UART_SetConfig+0x5c4>)
 80079a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079ac:	461a      	mov	r2, r3
 80079ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079b4:	005a      	lsls	r2, r3, #1
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	085b      	lsrs	r3, r3, #1
 80079bc:	441a      	add	r2, r3
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	2b0f      	cmp	r3, #15
 80079cc:	d916      	bls.n	80079fc <UART_SetConfig+0x508>
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079d4:	d212      	bcs.n	80079fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	f023 030f 	bic.w	r3, r3, #15
 80079de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	085b      	lsrs	r3, r3, #1
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	8bfb      	ldrh	r3, [r7, #30]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	8bfa      	ldrh	r2, [r7, #30]
 80079f8:	60da      	str	r2, [r3, #12]
 80079fa:	e062      	b.n	8007ac2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a02:	e05e      	b.n	8007ac2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a08:	2b08      	cmp	r3, #8
 8007a0a:	d828      	bhi.n	8007a5e <UART_SetConfig+0x56a>
 8007a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a14 <UART_SetConfig+0x520>)
 8007a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a12:	bf00      	nop
 8007a14:	08007a39 	.word	0x08007a39
 8007a18:	08007a41 	.word	0x08007a41
 8007a1c:	08007a49 	.word	0x08007a49
 8007a20:	08007a5f 	.word	0x08007a5f
 8007a24:	08007a4f 	.word	0x08007a4f
 8007a28:	08007a5f 	.word	0x08007a5f
 8007a2c:	08007a5f 	.word	0x08007a5f
 8007a30:	08007a5f 	.word	0x08007a5f
 8007a34:	08007a57 	.word	0x08007a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a38:	f7fe fc06 	bl	8006248 <HAL_RCC_GetPCLK1Freq>
 8007a3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a3e:	e014      	b.n	8007a6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a40:	f7fe fc18 	bl	8006274 <HAL_RCC_GetPCLK2Freq>
 8007a44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a46:	e010      	b.n	8007a6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a48:	4b1a      	ldr	r3, [pc, #104]	@ (8007ab4 <UART_SetConfig+0x5c0>)
 8007a4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a4c:	e00d      	b.n	8007a6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a4e:	f7fe fb8d 	bl	800616c <HAL_RCC_GetSysClockFreq>
 8007a52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a54:	e009      	b.n	8007a6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a5c:	e005      	b.n	8007a6a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a68:	bf00      	nop
    }

    if (pclk != 0U)
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d028      	beq.n	8007ac2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a74:	4a10      	ldr	r2, [pc, #64]	@ (8007ab8 <UART_SetConfig+0x5c4>)
 8007a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	085b      	lsrs	r3, r3, #1
 8007a88:	441a      	add	r2, r3
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	2b0f      	cmp	r3, #15
 8007a98:	d910      	bls.n	8007abc <UART_SetConfig+0x5c8>
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aa0:	d20c      	bcs.n	8007abc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60da      	str	r2, [r3, #12]
 8007aac:	e009      	b.n	8007ac2 <UART_SetConfig+0x5ce>
 8007aae:	bf00      	nop
 8007ab0:	40008000 	.word	0x40008000
 8007ab4:	00f42400 	.word	0x00f42400
 8007ab8:	0800d020 	.word	0x0800d020
      }
      else
      {
        ret = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2200      	movs	r2, #0
 8007adc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ade:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3730      	adds	r7, #48	@ 0x30
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007aec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af8:	f003 0308 	and.w	r3, r3, #8
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00a      	beq.n	8007b16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00a      	beq.n	8007b38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00a      	beq.n	8007b5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b5e:	f003 0304 	and.w	r3, r3, #4
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00a      	beq.n	8007b7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b80:	f003 0310 	and.w	r3, r3, #16
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d01a      	beq.n	8007c02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007be6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bea:	d10a      	bne.n	8007c02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	605a      	str	r2, [r3, #4]
  }
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b098      	sub	sp, #96	@ 0x60
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c40:	f7fa fdea 	bl	8002818 <HAL_GetTick>
 8007c44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0308 	and.w	r3, r3, #8
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	d12f      	bne.n	8007cb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f88e 	bl	8007d84 <UART_WaitOnFlagUntilTimeout>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d022      	beq.n	8007cb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c76:	e853 3f00 	ldrex	r3, [r3]
 8007c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c82:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c8e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e6      	bne.n	8007c6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e063      	b.n	8007d7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0304 	and.w	r3, r3, #4
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	d149      	bne.n	8007d56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f857 	bl	8007d84 <UART_WaitOnFlagUntilTimeout>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d03c      	beq.n	8007d56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e6      	bne.n	8007cdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3308      	adds	r3, #8
 8007d14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f023 0301 	bic.w	r3, r3, #1
 8007d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d2e:	61fa      	str	r2, [r7, #28]
 8007d30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	69b9      	ldr	r1, [r7, #24]
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e5      	bne.n	8007d0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e012      	b.n	8007d7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2220      	movs	r2, #32
 8007d62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3758      	adds	r7, #88	@ 0x58
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	4613      	mov	r3, r2
 8007d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d94:	e04f      	b.n	8007e36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9c:	d04b      	beq.n	8007e36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d9e:	f7fa fd3b 	bl	8002818 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d302      	bcc.n	8007db4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e04e      	b.n	8007e56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0304 	and.w	r3, r3, #4
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d037      	beq.n	8007e36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b80      	cmp	r3, #128	@ 0x80
 8007dca:	d034      	beq.n	8007e36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2b40      	cmp	r3, #64	@ 0x40
 8007dd0:	d031      	beq.n	8007e36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	f003 0308 	and.w	r3, r3, #8
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d110      	bne.n	8007e02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2208      	movs	r2, #8
 8007de6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 f838 	bl	8007e5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2208      	movs	r2, #8
 8007df2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e029      	b.n	8007e56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e10:	d111      	bne.n	8007e36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 f81e 	bl	8007e5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e00f      	b.n	8007e56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69da      	ldr	r2, [r3, #28]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	bf0c      	ite	eq
 8007e46:	2301      	moveq	r3, #1
 8007e48:	2300      	movne	r3, #0
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d0a0      	beq.n	8007d96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b095      	sub	sp, #84	@ 0x54
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e6e:	e853 3f00 	ldrex	r3, [r3]
 8007e72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	461a      	mov	r2, r3
 8007e82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e84:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e8c:	e841 2300 	strex	r3, r2, [r1]
 8007e90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1e6      	bne.n	8007e66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3308      	adds	r3, #8
 8007e9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	e853 3f00 	ldrex	r3, [r3]
 8007ea6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eae:	f023 0301 	bic.w	r3, r3, #1
 8007eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3308      	adds	r3, #8
 8007eba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ebc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ec4:	e841 2300 	strex	r3, r2, [r1]
 8007ec8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e3      	bne.n	8007e98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d118      	bne.n	8007f0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	e853 3f00 	ldrex	r3, [r3]
 8007ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f023 0310 	bic.w	r3, r3, #16
 8007eec:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ef6:	61bb      	str	r3, [r7, #24]
 8007ef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	6979      	ldr	r1, [r7, #20]
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	613b      	str	r3, [r7, #16]
   return(result);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e6      	bne.n	8007ed8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f1e:	bf00      	nop
 8007f20:	3754      	adds	r7, #84	@ 0x54
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b085      	sub	sp, #20
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d101      	bne.n	8007f40 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	e027      	b.n	8007f90 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2224      	movs	r2, #36	@ 0x24
 8007f4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0201 	bic.w	r2, r2, #1
 8007f66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2220      	movs	r2, #32
 8007f82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e02d      	b.n	8008010 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2224      	movs	r2, #36	@ 0x24
 8007fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 0201 	bic.w	r2, r2, #1
 8007fda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	430a      	orrs	r2, r1
 8007fee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f84f 	bl	8008094 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008028:	2b01      	cmp	r3, #1
 800802a:	d101      	bne.n	8008030 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800802c:	2302      	movs	r3, #2
 800802e:	e02d      	b.n	800808c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2224      	movs	r2, #36	@ 0x24
 800803c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0201 	bic.w	r2, r2, #1
 8008056:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	430a      	orrs	r2, r1
 800806a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f811 	bl	8008094 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2220      	movs	r2, #32
 800807e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d108      	bne.n	80080b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080b4:	e031      	b.n	800811a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080b6:	2308      	movs	r3, #8
 80080b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080ba:	2308      	movs	r3, #8
 80080bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	0e5b      	lsrs	r3, r3, #25
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f003 0307 	and.w	r3, r3, #7
 80080cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	0f5b      	lsrs	r3, r3, #29
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	f003 0307 	and.w	r3, r3, #7
 80080dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080de:	7bbb      	ldrb	r3, [r7, #14]
 80080e0:	7b3a      	ldrb	r2, [r7, #12]
 80080e2:	4911      	ldr	r1, [pc, #68]	@ (8008128 <UARTEx_SetNbDataToProcess+0x94>)
 80080e4:	5c8a      	ldrb	r2, [r1, r2]
 80080e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080ea:	7b3a      	ldrb	r2, [r7, #12]
 80080ec:	490f      	ldr	r1, [pc, #60]	@ (800812c <UARTEx_SetNbDataToProcess+0x98>)
 80080ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
 80080fe:	7b7a      	ldrb	r2, [r7, #13]
 8008100:	4909      	ldr	r1, [pc, #36]	@ (8008128 <UARTEx_SetNbDataToProcess+0x94>)
 8008102:	5c8a      	ldrb	r2, [r1, r2]
 8008104:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008108:	7b7a      	ldrb	r2, [r7, #13]
 800810a:	4908      	ldr	r1, [pc, #32]	@ (800812c <UARTEx_SetNbDataToProcess+0x98>)
 800810c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800810e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008112:	b29a      	uxth	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800811a:	bf00      	nop
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	0800d038 	.word	0x0800d038
 800812c:	0800d040 	.word	0x0800d040

08008130 <__cvt>:
 8008130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008134:	ec57 6b10 	vmov	r6, r7, d0
 8008138:	2f00      	cmp	r7, #0
 800813a:	460c      	mov	r4, r1
 800813c:	4619      	mov	r1, r3
 800813e:	463b      	mov	r3, r7
 8008140:	bfbb      	ittet	lt
 8008142:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008146:	461f      	movlt	r7, r3
 8008148:	2300      	movge	r3, #0
 800814a:	232d      	movlt	r3, #45	@ 0x2d
 800814c:	700b      	strb	r3, [r1, #0]
 800814e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008150:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008154:	4691      	mov	r9, r2
 8008156:	f023 0820 	bic.w	r8, r3, #32
 800815a:	bfbc      	itt	lt
 800815c:	4632      	movlt	r2, r6
 800815e:	4616      	movlt	r6, r2
 8008160:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008164:	d005      	beq.n	8008172 <__cvt+0x42>
 8008166:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800816a:	d100      	bne.n	800816e <__cvt+0x3e>
 800816c:	3401      	adds	r4, #1
 800816e:	2102      	movs	r1, #2
 8008170:	e000      	b.n	8008174 <__cvt+0x44>
 8008172:	2103      	movs	r1, #3
 8008174:	ab03      	add	r3, sp, #12
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	ab02      	add	r3, sp, #8
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	ec47 6b10 	vmov	d0, r6, r7
 8008180:	4653      	mov	r3, sl
 8008182:	4622      	mov	r2, r4
 8008184:	f001 f874 	bl	8009270 <_dtoa_r>
 8008188:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800818c:	4605      	mov	r5, r0
 800818e:	d119      	bne.n	80081c4 <__cvt+0x94>
 8008190:	f019 0f01 	tst.w	r9, #1
 8008194:	d00e      	beq.n	80081b4 <__cvt+0x84>
 8008196:	eb00 0904 	add.w	r9, r0, r4
 800819a:	2200      	movs	r2, #0
 800819c:	2300      	movs	r3, #0
 800819e:	4630      	mov	r0, r6
 80081a0:	4639      	mov	r1, r7
 80081a2:	f7f8 fcb9 	bl	8000b18 <__aeabi_dcmpeq>
 80081a6:	b108      	cbz	r0, 80081ac <__cvt+0x7c>
 80081a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80081ac:	2230      	movs	r2, #48	@ 0x30
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	454b      	cmp	r3, r9
 80081b2:	d31e      	bcc.n	80081f2 <__cvt+0xc2>
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081b8:	1b5b      	subs	r3, r3, r5
 80081ba:	4628      	mov	r0, r5
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	b004      	add	sp, #16
 80081c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081c8:	eb00 0904 	add.w	r9, r0, r4
 80081cc:	d1e5      	bne.n	800819a <__cvt+0x6a>
 80081ce:	7803      	ldrb	r3, [r0, #0]
 80081d0:	2b30      	cmp	r3, #48	@ 0x30
 80081d2:	d10a      	bne.n	80081ea <__cvt+0xba>
 80081d4:	2200      	movs	r2, #0
 80081d6:	2300      	movs	r3, #0
 80081d8:	4630      	mov	r0, r6
 80081da:	4639      	mov	r1, r7
 80081dc:	f7f8 fc9c 	bl	8000b18 <__aeabi_dcmpeq>
 80081e0:	b918      	cbnz	r0, 80081ea <__cvt+0xba>
 80081e2:	f1c4 0401 	rsb	r4, r4, #1
 80081e6:	f8ca 4000 	str.w	r4, [sl]
 80081ea:	f8da 3000 	ldr.w	r3, [sl]
 80081ee:	4499      	add	r9, r3
 80081f0:	e7d3      	b.n	800819a <__cvt+0x6a>
 80081f2:	1c59      	adds	r1, r3, #1
 80081f4:	9103      	str	r1, [sp, #12]
 80081f6:	701a      	strb	r2, [r3, #0]
 80081f8:	e7d9      	b.n	80081ae <__cvt+0x7e>

080081fa <__exponent>:
 80081fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081fc:	2900      	cmp	r1, #0
 80081fe:	bfba      	itte	lt
 8008200:	4249      	neglt	r1, r1
 8008202:	232d      	movlt	r3, #45	@ 0x2d
 8008204:	232b      	movge	r3, #43	@ 0x2b
 8008206:	2909      	cmp	r1, #9
 8008208:	7002      	strb	r2, [r0, #0]
 800820a:	7043      	strb	r3, [r0, #1]
 800820c:	dd29      	ble.n	8008262 <__exponent+0x68>
 800820e:	f10d 0307 	add.w	r3, sp, #7
 8008212:	461d      	mov	r5, r3
 8008214:	270a      	movs	r7, #10
 8008216:	461a      	mov	r2, r3
 8008218:	fbb1 f6f7 	udiv	r6, r1, r7
 800821c:	fb07 1416 	mls	r4, r7, r6, r1
 8008220:	3430      	adds	r4, #48	@ 0x30
 8008222:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008226:	460c      	mov	r4, r1
 8008228:	2c63      	cmp	r4, #99	@ 0x63
 800822a:	f103 33ff 	add.w	r3, r3, #4294967295
 800822e:	4631      	mov	r1, r6
 8008230:	dcf1      	bgt.n	8008216 <__exponent+0x1c>
 8008232:	3130      	adds	r1, #48	@ 0x30
 8008234:	1e94      	subs	r4, r2, #2
 8008236:	f803 1c01 	strb.w	r1, [r3, #-1]
 800823a:	1c41      	adds	r1, r0, #1
 800823c:	4623      	mov	r3, r4
 800823e:	42ab      	cmp	r3, r5
 8008240:	d30a      	bcc.n	8008258 <__exponent+0x5e>
 8008242:	f10d 0309 	add.w	r3, sp, #9
 8008246:	1a9b      	subs	r3, r3, r2
 8008248:	42ac      	cmp	r4, r5
 800824a:	bf88      	it	hi
 800824c:	2300      	movhi	r3, #0
 800824e:	3302      	adds	r3, #2
 8008250:	4403      	add	r3, r0
 8008252:	1a18      	subs	r0, r3, r0
 8008254:	b003      	add	sp, #12
 8008256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008258:	f813 6b01 	ldrb.w	r6, [r3], #1
 800825c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008260:	e7ed      	b.n	800823e <__exponent+0x44>
 8008262:	2330      	movs	r3, #48	@ 0x30
 8008264:	3130      	adds	r1, #48	@ 0x30
 8008266:	7083      	strb	r3, [r0, #2]
 8008268:	70c1      	strb	r1, [r0, #3]
 800826a:	1d03      	adds	r3, r0, #4
 800826c:	e7f1      	b.n	8008252 <__exponent+0x58>
	...

08008270 <_printf_float>:
 8008270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008274:	b08d      	sub	sp, #52	@ 0x34
 8008276:	460c      	mov	r4, r1
 8008278:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800827c:	4616      	mov	r6, r2
 800827e:	461f      	mov	r7, r3
 8008280:	4605      	mov	r5, r0
 8008282:	f000 feef 	bl	8009064 <_localeconv_r>
 8008286:	6803      	ldr	r3, [r0, #0]
 8008288:	9304      	str	r3, [sp, #16]
 800828a:	4618      	mov	r0, r3
 800828c:	f7f8 f818 	bl	80002c0 <strlen>
 8008290:	2300      	movs	r3, #0
 8008292:	930a      	str	r3, [sp, #40]	@ 0x28
 8008294:	f8d8 3000 	ldr.w	r3, [r8]
 8008298:	9005      	str	r0, [sp, #20]
 800829a:	3307      	adds	r3, #7
 800829c:	f023 0307 	bic.w	r3, r3, #7
 80082a0:	f103 0208 	add.w	r2, r3, #8
 80082a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80082a8:	f8d4 b000 	ldr.w	fp, [r4]
 80082ac:	f8c8 2000 	str.w	r2, [r8]
 80082b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80082b8:	9307      	str	r3, [sp, #28]
 80082ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80082be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80082c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082c6:	4b9c      	ldr	r3, [pc, #624]	@ (8008538 <_printf_float+0x2c8>)
 80082c8:	f04f 32ff 	mov.w	r2, #4294967295
 80082cc:	f7f8 fc56 	bl	8000b7c <__aeabi_dcmpun>
 80082d0:	bb70      	cbnz	r0, 8008330 <_printf_float+0xc0>
 80082d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082d6:	4b98      	ldr	r3, [pc, #608]	@ (8008538 <_printf_float+0x2c8>)
 80082d8:	f04f 32ff 	mov.w	r2, #4294967295
 80082dc:	f7f8 fc30 	bl	8000b40 <__aeabi_dcmple>
 80082e0:	bb30      	cbnz	r0, 8008330 <_printf_float+0xc0>
 80082e2:	2200      	movs	r2, #0
 80082e4:	2300      	movs	r3, #0
 80082e6:	4640      	mov	r0, r8
 80082e8:	4649      	mov	r1, r9
 80082ea:	f7f8 fc1f 	bl	8000b2c <__aeabi_dcmplt>
 80082ee:	b110      	cbz	r0, 80082f6 <_printf_float+0x86>
 80082f0:	232d      	movs	r3, #45	@ 0x2d
 80082f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082f6:	4a91      	ldr	r2, [pc, #580]	@ (800853c <_printf_float+0x2cc>)
 80082f8:	4b91      	ldr	r3, [pc, #580]	@ (8008540 <_printf_float+0x2d0>)
 80082fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80082fe:	bf94      	ite	ls
 8008300:	4690      	movls	r8, r2
 8008302:	4698      	movhi	r8, r3
 8008304:	2303      	movs	r3, #3
 8008306:	6123      	str	r3, [r4, #16]
 8008308:	f02b 0304 	bic.w	r3, fp, #4
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	f04f 0900 	mov.w	r9, #0
 8008312:	9700      	str	r7, [sp, #0]
 8008314:	4633      	mov	r3, r6
 8008316:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008318:	4621      	mov	r1, r4
 800831a:	4628      	mov	r0, r5
 800831c:	f000 f9d2 	bl	80086c4 <_printf_common>
 8008320:	3001      	adds	r0, #1
 8008322:	f040 808d 	bne.w	8008440 <_printf_float+0x1d0>
 8008326:	f04f 30ff 	mov.w	r0, #4294967295
 800832a:	b00d      	add	sp, #52	@ 0x34
 800832c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008330:	4642      	mov	r2, r8
 8008332:	464b      	mov	r3, r9
 8008334:	4640      	mov	r0, r8
 8008336:	4649      	mov	r1, r9
 8008338:	f7f8 fc20 	bl	8000b7c <__aeabi_dcmpun>
 800833c:	b140      	cbz	r0, 8008350 <_printf_float+0xe0>
 800833e:	464b      	mov	r3, r9
 8008340:	2b00      	cmp	r3, #0
 8008342:	bfbc      	itt	lt
 8008344:	232d      	movlt	r3, #45	@ 0x2d
 8008346:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800834a:	4a7e      	ldr	r2, [pc, #504]	@ (8008544 <_printf_float+0x2d4>)
 800834c:	4b7e      	ldr	r3, [pc, #504]	@ (8008548 <_printf_float+0x2d8>)
 800834e:	e7d4      	b.n	80082fa <_printf_float+0x8a>
 8008350:	6863      	ldr	r3, [r4, #4]
 8008352:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008356:	9206      	str	r2, [sp, #24]
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	d13b      	bne.n	80083d4 <_printf_float+0x164>
 800835c:	2306      	movs	r3, #6
 800835e:	6063      	str	r3, [r4, #4]
 8008360:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008364:	2300      	movs	r3, #0
 8008366:	6022      	str	r2, [r4, #0]
 8008368:	9303      	str	r3, [sp, #12]
 800836a:	ab0a      	add	r3, sp, #40	@ 0x28
 800836c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008370:	ab09      	add	r3, sp, #36	@ 0x24
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	6861      	ldr	r1, [r4, #4]
 8008376:	ec49 8b10 	vmov	d0, r8, r9
 800837a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800837e:	4628      	mov	r0, r5
 8008380:	f7ff fed6 	bl	8008130 <__cvt>
 8008384:	9b06      	ldr	r3, [sp, #24]
 8008386:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008388:	2b47      	cmp	r3, #71	@ 0x47
 800838a:	4680      	mov	r8, r0
 800838c:	d129      	bne.n	80083e2 <_printf_float+0x172>
 800838e:	1cc8      	adds	r0, r1, #3
 8008390:	db02      	blt.n	8008398 <_printf_float+0x128>
 8008392:	6863      	ldr	r3, [r4, #4]
 8008394:	4299      	cmp	r1, r3
 8008396:	dd41      	ble.n	800841c <_printf_float+0x1ac>
 8008398:	f1aa 0a02 	sub.w	sl, sl, #2
 800839c:	fa5f fa8a 	uxtb.w	sl, sl
 80083a0:	3901      	subs	r1, #1
 80083a2:	4652      	mov	r2, sl
 80083a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80083a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80083aa:	f7ff ff26 	bl	80081fa <__exponent>
 80083ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083b0:	1813      	adds	r3, r2, r0
 80083b2:	2a01      	cmp	r2, #1
 80083b4:	4681      	mov	r9, r0
 80083b6:	6123      	str	r3, [r4, #16]
 80083b8:	dc02      	bgt.n	80083c0 <_printf_float+0x150>
 80083ba:	6822      	ldr	r2, [r4, #0]
 80083bc:	07d2      	lsls	r2, r2, #31
 80083be:	d501      	bpl.n	80083c4 <_printf_float+0x154>
 80083c0:	3301      	adds	r3, #1
 80083c2:	6123      	str	r3, [r4, #16]
 80083c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0a2      	beq.n	8008312 <_printf_float+0xa2>
 80083cc:	232d      	movs	r3, #45	@ 0x2d
 80083ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083d2:	e79e      	b.n	8008312 <_printf_float+0xa2>
 80083d4:	9a06      	ldr	r2, [sp, #24]
 80083d6:	2a47      	cmp	r2, #71	@ 0x47
 80083d8:	d1c2      	bne.n	8008360 <_printf_float+0xf0>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1c0      	bne.n	8008360 <_printf_float+0xf0>
 80083de:	2301      	movs	r3, #1
 80083e0:	e7bd      	b.n	800835e <_printf_float+0xee>
 80083e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80083e6:	d9db      	bls.n	80083a0 <_printf_float+0x130>
 80083e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80083ec:	d118      	bne.n	8008420 <_printf_float+0x1b0>
 80083ee:	2900      	cmp	r1, #0
 80083f0:	6863      	ldr	r3, [r4, #4]
 80083f2:	dd0b      	ble.n	800840c <_printf_float+0x19c>
 80083f4:	6121      	str	r1, [r4, #16]
 80083f6:	b913      	cbnz	r3, 80083fe <_printf_float+0x18e>
 80083f8:	6822      	ldr	r2, [r4, #0]
 80083fa:	07d0      	lsls	r0, r2, #31
 80083fc:	d502      	bpl.n	8008404 <_printf_float+0x194>
 80083fe:	3301      	adds	r3, #1
 8008400:	440b      	add	r3, r1
 8008402:	6123      	str	r3, [r4, #16]
 8008404:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008406:	f04f 0900 	mov.w	r9, #0
 800840a:	e7db      	b.n	80083c4 <_printf_float+0x154>
 800840c:	b913      	cbnz	r3, 8008414 <_printf_float+0x1a4>
 800840e:	6822      	ldr	r2, [r4, #0]
 8008410:	07d2      	lsls	r2, r2, #31
 8008412:	d501      	bpl.n	8008418 <_printf_float+0x1a8>
 8008414:	3302      	adds	r3, #2
 8008416:	e7f4      	b.n	8008402 <_printf_float+0x192>
 8008418:	2301      	movs	r3, #1
 800841a:	e7f2      	b.n	8008402 <_printf_float+0x192>
 800841c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008422:	4299      	cmp	r1, r3
 8008424:	db05      	blt.n	8008432 <_printf_float+0x1c2>
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	6121      	str	r1, [r4, #16]
 800842a:	07d8      	lsls	r0, r3, #31
 800842c:	d5ea      	bpl.n	8008404 <_printf_float+0x194>
 800842e:	1c4b      	adds	r3, r1, #1
 8008430:	e7e7      	b.n	8008402 <_printf_float+0x192>
 8008432:	2900      	cmp	r1, #0
 8008434:	bfd4      	ite	le
 8008436:	f1c1 0202 	rsble	r2, r1, #2
 800843a:	2201      	movgt	r2, #1
 800843c:	4413      	add	r3, r2
 800843e:	e7e0      	b.n	8008402 <_printf_float+0x192>
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	055a      	lsls	r2, r3, #21
 8008444:	d407      	bmi.n	8008456 <_printf_float+0x1e6>
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	4642      	mov	r2, r8
 800844a:	4631      	mov	r1, r6
 800844c:	4628      	mov	r0, r5
 800844e:	47b8      	blx	r7
 8008450:	3001      	adds	r0, #1
 8008452:	d12b      	bne.n	80084ac <_printf_float+0x23c>
 8008454:	e767      	b.n	8008326 <_printf_float+0xb6>
 8008456:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800845a:	f240 80dd 	bls.w	8008618 <_printf_float+0x3a8>
 800845e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008462:	2200      	movs	r2, #0
 8008464:	2300      	movs	r3, #0
 8008466:	f7f8 fb57 	bl	8000b18 <__aeabi_dcmpeq>
 800846a:	2800      	cmp	r0, #0
 800846c:	d033      	beq.n	80084d6 <_printf_float+0x266>
 800846e:	4a37      	ldr	r2, [pc, #220]	@ (800854c <_printf_float+0x2dc>)
 8008470:	2301      	movs	r3, #1
 8008472:	4631      	mov	r1, r6
 8008474:	4628      	mov	r0, r5
 8008476:	47b8      	blx	r7
 8008478:	3001      	adds	r0, #1
 800847a:	f43f af54 	beq.w	8008326 <_printf_float+0xb6>
 800847e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008482:	4543      	cmp	r3, r8
 8008484:	db02      	blt.n	800848c <_printf_float+0x21c>
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	07d8      	lsls	r0, r3, #31
 800848a:	d50f      	bpl.n	80084ac <_printf_float+0x23c>
 800848c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008490:	4631      	mov	r1, r6
 8008492:	4628      	mov	r0, r5
 8008494:	47b8      	blx	r7
 8008496:	3001      	adds	r0, #1
 8008498:	f43f af45 	beq.w	8008326 <_printf_float+0xb6>
 800849c:	f04f 0900 	mov.w	r9, #0
 80084a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80084a4:	f104 0a1a 	add.w	sl, r4, #26
 80084a8:	45c8      	cmp	r8, r9
 80084aa:	dc09      	bgt.n	80084c0 <_printf_float+0x250>
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	079b      	lsls	r3, r3, #30
 80084b0:	f100 8103 	bmi.w	80086ba <_printf_float+0x44a>
 80084b4:	68e0      	ldr	r0, [r4, #12]
 80084b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084b8:	4298      	cmp	r0, r3
 80084ba:	bfb8      	it	lt
 80084bc:	4618      	movlt	r0, r3
 80084be:	e734      	b.n	800832a <_printf_float+0xba>
 80084c0:	2301      	movs	r3, #1
 80084c2:	4652      	mov	r2, sl
 80084c4:	4631      	mov	r1, r6
 80084c6:	4628      	mov	r0, r5
 80084c8:	47b8      	blx	r7
 80084ca:	3001      	adds	r0, #1
 80084cc:	f43f af2b 	beq.w	8008326 <_printf_float+0xb6>
 80084d0:	f109 0901 	add.w	r9, r9, #1
 80084d4:	e7e8      	b.n	80084a8 <_printf_float+0x238>
 80084d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084d8:	2b00      	cmp	r3, #0
 80084da:	dc39      	bgt.n	8008550 <_printf_float+0x2e0>
 80084dc:	4a1b      	ldr	r2, [pc, #108]	@ (800854c <_printf_float+0x2dc>)
 80084de:	2301      	movs	r3, #1
 80084e0:	4631      	mov	r1, r6
 80084e2:	4628      	mov	r0, r5
 80084e4:	47b8      	blx	r7
 80084e6:	3001      	adds	r0, #1
 80084e8:	f43f af1d 	beq.w	8008326 <_printf_float+0xb6>
 80084ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80084f0:	ea59 0303 	orrs.w	r3, r9, r3
 80084f4:	d102      	bne.n	80084fc <_printf_float+0x28c>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	07d9      	lsls	r1, r3, #31
 80084fa:	d5d7      	bpl.n	80084ac <_printf_float+0x23c>
 80084fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008500:	4631      	mov	r1, r6
 8008502:	4628      	mov	r0, r5
 8008504:	47b8      	blx	r7
 8008506:	3001      	adds	r0, #1
 8008508:	f43f af0d 	beq.w	8008326 <_printf_float+0xb6>
 800850c:	f04f 0a00 	mov.w	sl, #0
 8008510:	f104 0b1a 	add.w	fp, r4, #26
 8008514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008516:	425b      	negs	r3, r3
 8008518:	4553      	cmp	r3, sl
 800851a:	dc01      	bgt.n	8008520 <_printf_float+0x2b0>
 800851c:	464b      	mov	r3, r9
 800851e:	e793      	b.n	8008448 <_printf_float+0x1d8>
 8008520:	2301      	movs	r3, #1
 8008522:	465a      	mov	r2, fp
 8008524:	4631      	mov	r1, r6
 8008526:	4628      	mov	r0, r5
 8008528:	47b8      	blx	r7
 800852a:	3001      	adds	r0, #1
 800852c:	f43f aefb 	beq.w	8008326 <_printf_float+0xb6>
 8008530:	f10a 0a01 	add.w	sl, sl, #1
 8008534:	e7ee      	b.n	8008514 <_printf_float+0x2a4>
 8008536:	bf00      	nop
 8008538:	7fefffff 	.word	0x7fefffff
 800853c:	0800d048 	.word	0x0800d048
 8008540:	0800d04c 	.word	0x0800d04c
 8008544:	0800d050 	.word	0x0800d050
 8008548:	0800d054 	.word	0x0800d054
 800854c:	0800d058 	.word	0x0800d058
 8008550:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008552:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008556:	4553      	cmp	r3, sl
 8008558:	bfa8      	it	ge
 800855a:	4653      	movge	r3, sl
 800855c:	2b00      	cmp	r3, #0
 800855e:	4699      	mov	r9, r3
 8008560:	dc36      	bgt.n	80085d0 <_printf_float+0x360>
 8008562:	f04f 0b00 	mov.w	fp, #0
 8008566:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800856a:	f104 021a 	add.w	r2, r4, #26
 800856e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008570:	9306      	str	r3, [sp, #24]
 8008572:	eba3 0309 	sub.w	r3, r3, r9
 8008576:	455b      	cmp	r3, fp
 8008578:	dc31      	bgt.n	80085de <_printf_float+0x36e>
 800857a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800857c:	459a      	cmp	sl, r3
 800857e:	dc3a      	bgt.n	80085f6 <_printf_float+0x386>
 8008580:	6823      	ldr	r3, [r4, #0]
 8008582:	07da      	lsls	r2, r3, #31
 8008584:	d437      	bmi.n	80085f6 <_printf_float+0x386>
 8008586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008588:	ebaa 0903 	sub.w	r9, sl, r3
 800858c:	9b06      	ldr	r3, [sp, #24]
 800858e:	ebaa 0303 	sub.w	r3, sl, r3
 8008592:	4599      	cmp	r9, r3
 8008594:	bfa8      	it	ge
 8008596:	4699      	movge	r9, r3
 8008598:	f1b9 0f00 	cmp.w	r9, #0
 800859c:	dc33      	bgt.n	8008606 <_printf_float+0x396>
 800859e:	f04f 0800 	mov.w	r8, #0
 80085a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085a6:	f104 0b1a 	add.w	fp, r4, #26
 80085aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ac:	ebaa 0303 	sub.w	r3, sl, r3
 80085b0:	eba3 0309 	sub.w	r3, r3, r9
 80085b4:	4543      	cmp	r3, r8
 80085b6:	f77f af79 	ble.w	80084ac <_printf_float+0x23c>
 80085ba:	2301      	movs	r3, #1
 80085bc:	465a      	mov	r2, fp
 80085be:	4631      	mov	r1, r6
 80085c0:	4628      	mov	r0, r5
 80085c2:	47b8      	blx	r7
 80085c4:	3001      	adds	r0, #1
 80085c6:	f43f aeae 	beq.w	8008326 <_printf_float+0xb6>
 80085ca:	f108 0801 	add.w	r8, r8, #1
 80085ce:	e7ec      	b.n	80085aa <_printf_float+0x33a>
 80085d0:	4642      	mov	r2, r8
 80085d2:	4631      	mov	r1, r6
 80085d4:	4628      	mov	r0, r5
 80085d6:	47b8      	blx	r7
 80085d8:	3001      	adds	r0, #1
 80085da:	d1c2      	bne.n	8008562 <_printf_float+0x2f2>
 80085dc:	e6a3      	b.n	8008326 <_printf_float+0xb6>
 80085de:	2301      	movs	r3, #1
 80085e0:	4631      	mov	r1, r6
 80085e2:	4628      	mov	r0, r5
 80085e4:	9206      	str	r2, [sp, #24]
 80085e6:	47b8      	blx	r7
 80085e8:	3001      	adds	r0, #1
 80085ea:	f43f ae9c 	beq.w	8008326 <_printf_float+0xb6>
 80085ee:	9a06      	ldr	r2, [sp, #24]
 80085f0:	f10b 0b01 	add.w	fp, fp, #1
 80085f4:	e7bb      	b.n	800856e <_printf_float+0x2fe>
 80085f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085fa:	4631      	mov	r1, r6
 80085fc:	4628      	mov	r0, r5
 80085fe:	47b8      	blx	r7
 8008600:	3001      	adds	r0, #1
 8008602:	d1c0      	bne.n	8008586 <_printf_float+0x316>
 8008604:	e68f      	b.n	8008326 <_printf_float+0xb6>
 8008606:	9a06      	ldr	r2, [sp, #24]
 8008608:	464b      	mov	r3, r9
 800860a:	4442      	add	r2, r8
 800860c:	4631      	mov	r1, r6
 800860e:	4628      	mov	r0, r5
 8008610:	47b8      	blx	r7
 8008612:	3001      	adds	r0, #1
 8008614:	d1c3      	bne.n	800859e <_printf_float+0x32e>
 8008616:	e686      	b.n	8008326 <_printf_float+0xb6>
 8008618:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800861c:	f1ba 0f01 	cmp.w	sl, #1
 8008620:	dc01      	bgt.n	8008626 <_printf_float+0x3b6>
 8008622:	07db      	lsls	r3, r3, #31
 8008624:	d536      	bpl.n	8008694 <_printf_float+0x424>
 8008626:	2301      	movs	r3, #1
 8008628:	4642      	mov	r2, r8
 800862a:	4631      	mov	r1, r6
 800862c:	4628      	mov	r0, r5
 800862e:	47b8      	blx	r7
 8008630:	3001      	adds	r0, #1
 8008632:	f43f ae78 	beq.w	8008326 <_printf_float+0xb6>
 8008636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800863a:	4631      	mov	r1, r6
 800863c:	4628      	mov	r0, r5
 800863e:	47b8      	blx	r7
 8008640:	3001      	adds	r0, #1
 8008642:	f43f ae70 	beq.w	8008326 <_printf_float+0xb6>
 8008646:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800864a:	2200      	movs	r2, #0
 800864c:	2300      	movs	r3, #0
 800864e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008652:	f7f8 fa61 	bl	8000b18 <__aeabi_dcmpeq>
 8008656:	b9c0      	cbnz	r0, 800868a <_printf_float+0x41a>
 8008658:	4653      	mov	r3, sl
 800865a:	f108 0201 	add.w	r2, r8, #1
 800865e:	4631      	mov	r1, r6
 8008660:	4628      	mov	r0, r5
 8008662:	47b8      	blx	r7
 8008664:	3001      	adds	r0, #1
 8008666:	d10c      	bne.n	8008682 <_printf_float+0x412>
 8008668:	e65d      	b.n	8008326 <_printf_float+0xb6>
 800866a:	2301      	movs	r3, #1
 800866c:	465a      	mov	r2, fp
 800866e:	4631      	mov	r1, r6
 8008670:	4628      	mov	r0, r5
 8008672:	47b8      	blx	r7
 8008674:	3001      	adds	r0, #1
 8008676:	f43f ae56 	beq.w	8008326 <_printf_float+0xb6>
 800867a:	f108 0801 	add.w	r8, r8, #1
 800867e:	45d0      	cmp	r8, sl
 8008680:	dbf3      	blt.n	800866a <_printf_float+0x3fa>
 8008682:	464b      	mov	r3, r9
 8008684:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008688:	e6df      	b.n	800844a <_printf_float+0x1da>
 800868a:	f04f 0800 	mov.w	r8, #0
 800868e:	f104 0b1a 	add.w	fp, r4, #26
 8008692:	e7f4      	b.n	800867e <_printf_float+0x40e>
 8008694:	2301      	movs	r3, #1
 8008696:	4642      	mov	r2, r8
 8008698:	e7e1      	b.n	800865e <_printf_float+0x3ee>
 800869a:	2301      	movs	r3, #1
 800869c:	464a      	mov	r2, r9
 800869e:	4631      	mov	r1, r6
 80086a0:	4628      	mov	r0, r5
 80086a2:	47b8      	blx	r7
 80086a4:	3001      	adds	r0, #1
 80086a6:	f43f ae3e 	beq.w	8008326 <_printf_float+0xb6>
 80086aa:	f108 0801 	add.w	r8, r8, #1
 80086ae:	68e3      	ldr	r3, [r4, #12]
 80086b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086b2:	1a5b      	subs	r3, r3, r1
 80086b4:	4543      	cmp	r3, r8
 80086b6:	dcf0      	bgt.n	800869a <_printf_float+0x42a>
 80086b8:	e6fc      	b.n	80084b4 <_printf_float+0x244>
 80086ba:	f04f 0800 	mov.w	r8, #0
 80086be:	f104 0919 	add.w	r9, r4, #25
 80086c2:	e7f4      	b.n	80086ae <_printf_float+0x43e>

080086c4 <_printf_common>:
 80086c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c8:	4616      	mov	r6, r2
 80086ca:	4698      	mov	r8, r3
 80086cc:	688a      	ldr	r2, [r1, #8]
 80086ce:	690b      	ldr	r3, [r1, #16]
 80086d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086d4:	4293      	cmp	r3, r2
 80086d6:	bfb8      	it	lt
 80086d8:	4613      	movlt	r3, r2
 80086da:	6033      	str	r3, [r6, #0]
 80086dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086e0:	4607      	mov	r7, r0
 80086e2:	460c      	mov	r4, r1
 80086e4:	b10a      	cbz	r2, 80086ea <_printf_common+0x26>
 80086e6:	3301      	adds	r3, #1
 80086e8:	6033      	str	r3, [r6, #0]
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	0699      	lsls	r1, r3, #26
 80086ee:	bf42      	ittt	mi
 80086f0:	6833      	ldrmi	r3, [r6, #0]
 80086f2:	3302      	addmi	r3, #2
 80086f4:	6033      	strmi	r3, [r6, #0]
 80086f6:	6825      	ldr	r5, [r4, #0]
 80086f8:	f015 0506 	ands.w	r5, r5, #6
 80086fc:	d106      	bne.n	800870c <_printf_common+0x48>
 80086fe:	f104 0a19 	add.w	sl, r4, #25
 8008702:	68e3      	ldr	r3, [r4, #12]
 8008704:	6832      	ldr	r2, [r6, #0]
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	42ab      	cmp	r3, r5
 800870a:	dc26      	bgt.n	800875a <_printf_common+0x96>
 800870c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008710:	6822      	ldr	r2, [r4, #0]
 8008712:	3b00      	subs	r3, #0
 8008714:	bf18      	it	ne
 8008716:	2301      	movne	r3, #1
 8008718:	0692      	lsls	r2, r2, #26
 800871a:	d42b      	bmi.n	8008774 <_printf_common+0xb0>
 800871c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008720:	4641      	mov	r1, r8
 8008722:	4638      	mov	r0, r7
 8008724:	47c8      	blx	r9
 8008726:	3001      	adds	r0, #1
 8008728:	d01e      	beq.n	8008768 <_printf_common+0xa4>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	6922      	ldr	r2, [r4, #16]
 800872e:	f003 0306 	and.w	r3, r3, #6
 8008732:	2b04      	cmp	r3, #4
 8008734:	bf02      	ittt	eq
 8008736:	68e5      	ldreq	r5, [r4, #12]
 8008738:	6833      	ldreq	r3, [r6, #0]
 800873a:	1aed      	subeq	r5, r5, r3
 800873c:	68a3      	ldr	r3, [r4, #8]
 800873e:	bf0c      	ite	eq
 8008740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008744:	2500      	movne	r5, #0
 8008746:	4293      	cmp	r3, r2
 8008748:	bfc4      	itt	gt
 800874a:	1a9b      	subgt	r3, r3, r2
 800874c:	18ed      	addgt	r5, r5, r3
 800874e:	2600      	movs	r6, #0
 8008750:	341a      	adds	r4, #26
 8008752:	42b5      	cmp	r5, r6
 8008754:	d11a      	bne.n	800878c <_printf_common+0xc8>
 8008756:	2000      	movs	r0, #0
 8008758:	e008      	b.n	800876c <_printf_common+0xa8>
 800875a:	2301      	movs	r3, #1
 800875c:	4652      	mov	r2, sl
 800875e:	4641      	mov	r1, r8
 8008760:	4638      	mov	r0, r7
 8008762:	47c8      	blx	r9
 8008764:	3001      	adds	r0, #1
 8008766:	d103      	bne.n	8008770 <_printf_common+0xac>
 8008768:	f04f 30ff 	mov.w	r0, #4294967295
 800876c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008770:	3501      	adds	r5, #1
 8008772:	e7c6      	b.n	8008702 <_printf_common+0x3e>
 8008774:	18e1      	adds	r1, r4, r3
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	2030      	movs	r0, #48	@ 0x30
 800877a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800877e:	4422      	add	r2, r4
 8008780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008788:	3302      	adds	r3, #2
 800878a:	e7c7      	b.n	800871c <_printf_common+0x58>
 800878c:	2301      	movs	r3, #1
 800878e:	4622      	mov	r2, r4
 8008790:	4641      	mov	r1, r8
 8008792:	4638      	mov	r0, r7
 8008794:	47c8      	blx	r9
 8008796:	3001      	adds	r0, #1
 8008798:	d0e6      	beq.n	8008768 <_printf_common+0xa4>
 800879a:	3601      	adds	r6, #1
 800879c:	e7d9      	b.n	8008752 <_printf_common+0x8e>
	...

080087a0 <_printf_i>:
 80087a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087a4:	7e0f      	ldrb	r7, [r1, #24]
 80087a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087a8:	2f78      	cmp	r7, #120	@ 0x78
 80087aa:	4691      	mov	r9, r2
 80087ac:	4680      	mov	r8, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	469a      	mov	sl, r3
 80087b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087b6:	d807      	bhi.n	80087c8 <_printf_i+0x28>
 80087b8:	2f62      	cmp	r7, #98	@ 0x62
 80087ba:	d80a      	bhi.n	80087d2 <_printf_i+0x32>
 80087bc:	2f00      	cmp	r7, #0
 80087be:	f000 80d2 	beq.w	8008966 <_printf_i+0x1c6>
 80087c2:	2f58      	cmp	r7, #88	@ 0x58
 80087c4:	f000 80b9 	beq.w	800893a <_printf_i+0x19a>
 80087c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087d0:	e03a      	b.n	8008848 <_printf_i+0xa8>
 80087d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087d6:	2b15      	cmp	r3, #21
 80087d8:	d8f6      	bhi.n	80087c8 <_printf_i+0x28>
 80087da:	a101      	add	r1, pc, #4	@ (adr r1, 80087e0 <_printf_i+0x40>)
 80087dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087e0:	08008839 	.word	0x08008839
 80087e4:	0800884d 	.word	0x0800884d
 80087e8:	080087c9 	.word	0x080087c9
 80087ec:	080087c9 	.word	0x080087c9
 80087f0:	080087c9 	.word	0x080087c9
 80087f4:	080087c9 	.word	0x080087c9
 80087f8:	0800884d 	.word	0x0800884d
 80087fc:	080087c9 	.word	0x080087c9
 8008800:	080087c9 	.word	0x080087c9
 8008804:	080087c9 	.word	0x080087c9
 8008808:	080087c9 	.word	0x080087c9
 800880c:	0800894d 	.word	0x0800894d
 8008810:	08008877 	.word	0x08008877
 8008814:	08008907 	.word	0x08008907
 8008818:	080087c9 	.word	0x080087c9
 800881c:	080087c9 	.word	0x080087c9
 8008820:	0800896f 	.word	0x0800896f
 8008824:	080087c9 	.word	0x080087c9
 8008828:	08008877 	.word	0x08008877
 800882c:	080087c9 	.word	0x080087c9
 8008830:	080087c9 	.word	0x080087c9
 8008834:	0800890f 	.word	0x0800890f
 8008838:	6833      	ldr	r3, [r6, #0]
 800883a:	1d1a      	adds	r2, r3, #4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6032      	str	r2, [r6, #0]
 8008840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008848:	2301      	movs	r3, #1
 800884a:	e09d      	b.n	8008988 <_printf_i+0x1e8>
 800884c:	6833      	ldr	r3, [r6, #0]
 800884e:	6820      	ldr	r0, [r4, #0]
 8008850:	1d19      	adds	r1, r3, #4
 8008852:	6031      	str	r1, [r6, #0]
 8008854:	0606      	lsls	r6, r0, #24
 8008856:	d501      	bpl.n	800885c <_printf_i+0xbc>
 8008858:	681d      	ldr	r5, [r3, #0]
 800885a:	e003      	b.n	8008864 <_printf_i+0xc4>
 800885c:	0645      	lsls	r5, r0, #25
 800885e:	d5fb      	bpl.n	8008858 <_printf_i+0xb8>
 8008860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008864:	2d00      	cmp	r5, #0
 8008866:	da03      	bge.n	8008870 <_printf_i+0xd0>
 8008868:	232d      	movs	r3, #45	@ 0x2d
 800886a:	426d      	negs	r5, r5
 800886c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008870:	4859      	ldr	r0, [pc, #356]	@ (80089d8 <_printf_i+0x238>)
 8008872:	230a      	movs	r3, #10
 8008874:	e011      	b.n	800889a <_printf_i+0xfa>
 8008876:	6821      	ldr	r1, [r4, #0]
 8008878:	6833      	ldr	r3, [r6, #0]
 800887a:	0608      	lsls	r0, r1, #24
 800887c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008880:	d402      	bmi.n	8008888 <_printf_i+0xe8>
 8008882:	0649      	lsls	r1, r1, #25
 8008884:	bf48      	it	mi
 8008886:	b2ad      	uxthmi	r5, r5
 8008888:	2f6f      	cmp	r7, #111	@ 0x6f
 800888a:	4853      	ldr	r0, [pc, #332]	@ (80089d8 <_printf_i+0x238>)
 800888c:	6033      	str	r3, [r6, #0]
 800888e:	bf14      	ite	ne
 8008890:	230a      	movne	r3, #10
 8008892:	2308      	moveq	r3, #8
 8008894:	2100      	movs	r1, #0
 8008896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800889a:	6866      	ldr	r6, [r4, #4]
 800889c:	60a6      	str	r6, [r4, #8]
 800889e:	2e00      	cmp	r6, #0
 80088a0:	bfa2      	ittt	ge
 80088a2:	6821      	ldrge	r1, [r4, #0]
 80088a4:	f021 0104 	bicge.w	r1, r1, #4
 80088a8:	6021      	strge	r1, [r4, #0]
 80088aa:	b90d      	cbnz	r5, 80088b0 <_printf_i+0x110>
 80088ac:	2e00      	cmp	r6, #0
 80088ae:	d04b      	beq.n	8008948 <_printf_i+0x1a8>
 80088b0:	4616      	mov	r6, r2
 80088b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80088b6:	fb03 5711 	mls	r7, r3, r1, r5
 80088ba:	5dc7      	ldrb	r7, [r0, r7]
 80088bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088c0:	462f      	mov	r7, r5
 80088c2:	42bb      	cmp	r3, r7
 80088c4:	460d      	mov	r5, r1
 80088c6:	d9f4      	bls.n	80088b2 <_printf_i+0x112>
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	d10b      	bne.n	80088e4 <_printf_i+0x144>
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	07df      	lsls	r7, r3, #31
 80088d0:	d508      	bpl.n	80088e4 <_printf_i+0x144>
 80088d2:	6923      	ldr	r3, [r4, #16]
 80088d4:	6861      	ldr	r1, [r4, #4]
 80088d6:	4299      	cmp	r1, r3
 80088d8:	bfde      	ittt	le
 80088da:	2330      	movle	r3, #48	@ 0x30
 80088dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088e4:	1b92      	subs	r2, r2, r6
 80088e6:	6122      	str	r2, [r4, #16]
 80088e8:	f8cd a000 	str.w	sl, [sp]
 80088ec:	464b      	mov	r3, r9
 80088ee:	aa03      	add	r2, sp, #12
 80088f0:	4621      	mov	r1, r4
 80088f2:	4640      	mov	r0, r8
 80088f4:	f7ff fee6 	bl	80086c4 <_printf_common>
 80088f8:	3001      	adds	r0, #1
 80088fa:	d14a      	bne.n	8008992 <_printf_i+0x1f2>
 80088fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008900:	b004      	add	sp, #16
 8008902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	f043 0320 	orr.w	r3, r3, #32
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	4833      	ldr	r0, [pc, #204]	@ (80089dc <_printf_i+0x23c>)
 8008910:	2778      	movs	r7, #120	@ 0x78
 8008912:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	6831      	ldr	r1, [r6, #0]
 800891a:	061f      	lsls	r7, r3, #24
 800891c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008920:	d402      	bmi.n	8008928 <_printf_i+0x188>
 8008922:	065f      	lsls	r7, r3, #25
 8008924:	bf48      	it	mi
 8008926:	b2ad      	uxthmi	r5, r5
 8008928:	6031      	str	r1, [r6, #0]
 800892a:	07d9      	lsls	r1, r3, #31
 800892c:	bf44      	itt	mi
 800892e:	f043 0320 	orrmi.w	r3, r3, #32
 8008932:	6023      	strmi	r3, [r4, #0]
 8008934:	b11d      	cbz	r5, 800893e <_printf_i+0x19e>
 8008936:	2310      	movs	r3, #16
 8008938:	e7ac      	b.n	8008894 <_printf_i+0xf4>
 800893a:	4827      	ldr	r0, [pc, #156]	@ (80089d8 <_printf_i+0x238>)
 800893c:	e7e9      	b.n	8008912 <_printf_i+0x172>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	f023 0320 	bic.w	r3, r3, #32
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	e7f6      	b.n	8008936 <_printf_i+0x196>
 8008948:	4616      	mov	r6, r2
 800894a:	e7bd      	b.n	80088c8 <_printf_i+0x128>
 800894c:	6833      	ldr	r3, [r6, #0]
 800894e:	6825      	ldr	r5, [r4, #0]
 8008950:	6961      	ldr	r1, [r4, #20]
 8008952:	1d18      	adds	r0, r3, #4
 8008954:	6030      	str	r0, [r6, #0]
 8008956:	062e      	lsls	r6, r5, #24
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	d501      	bpl.n	8008960 <_printf_i+0x1c0>
 800895c:	6019      	str	r1, [r3, #0]
 800895e:	e002      	b.n	8008966 <_printf_i+0x1c6>
 8008960:	0668      	lsls	r0, r5, #25
 8008962:	d5fb      	bpl.n	800895c <_printf_i+0x1bc>
 8008964:	8019      	strh	r1, [r3, #0]
 8008966:	2300      	movs	r3, #0
 8008968:	6123      	str	r3, [r4, #16]
 800896a:	4616      	mov	r6, r2
 800896c:	e7bc      	b.n	80088e8 <_printf_i+0x148>
 800896e:	6833      	ldr	r3, [r6, #0]
 8008970:	1d1a      	adds	r2, r3, #4
 8008972:	6032      	str	r2, [r6, #0]
 8008974:	681e      	ldr	r6, [r3, #0]
 8008976:	6862      	ldr	r2, [r4, #4]
 8008978:	2100      	movs	r1, #0
 800897a:	4630      	mov	r0, r6
 800897c:	f7f7 fc50 	bl	8000220 <memchr>
 8008980:	b108      	cbz	r0, 8008986 <_printf_i+0x1e6>
 8008982:	1b80      	subs	r0, r0, r6
 8008984:	6060      	str	r0, [r4, #4]
 8008986:	6863      	ldr	r3, [r4, #4]
 8008988:	6123      	str	r3, [r4, #16]
 800898a:	2300      	movs	r3, #0
 800898c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008990:	e7aa      	b.n	80088e8 <_printf_i+0x148>
 8008992:	6923      	ldr	r3, [r4, #16]
 8008994:	4632      	mov	r2, r6
 8008996:	4649      	mov	r1, r9
 8008998:	4640      	mov	r0, r8
 800899a:	47d0      	blx	sl
 800899c:	3001      	adds	r0, #1
 800899e:	d0ad      	beq.n	80088fc <_printf_i+0x15c>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	079b      	lsls	r3, r3, #30
 80089a4:	d413      	bmi.n	80089ce <_printf_i+0x22e>
 80089a6:	68e0      	ldr	r0, [r4, #12]
 80089a8:	9b03      	ldr	r3, [sp, #12]
 80089aa:	4298      	cmp	r0, r3
 80089ac:	bfb8      	it	lt
 80089ae:	4618      	movlt	r0, r3
 80089b0:	e7a6      	b.n	8008900 <_printf_i+0x160>
 80089b2:	2301      	movs	r3, #1
 80089b4:	4632      	mov	r2, r6
 80089b6:	4649      	mov	r1, r9
 80089b8:	4640      	mov	r0, r8
 80089ba:	47d0      	blx	sl
 80089bc:	3001      	adds	r0, #1
 80089be:	d09d      	beq.n	80088fc <_printf_i+0x15c>
 80089c0:	3501      	adds	r5, #1
 80089c2:	68e3      	ldr	r3, [r4, #12]
 80089c4:	9903      	ldr	r1, [sp, #12]
 80089c6:	1a5b      	subs	r3, r3, r1
 80089c8:	42ab      	cmp	r3, r5
 80089ca:	dcf2      	bgt.n	80089b2 <_printf_i+0x212>
 80089cc:	e7eb      	b.n	80089a6 <_printf_i+0x206>
 80089ce:	2500      	movs	r5, #0
 80089d0:	f104 0619 	add.w	r6, r4, #25
 80089d4:	e7f5      	b.n	80089c2 <_printf_i+0x222>
 80089d6:	bf00      	nop
 80089d8:	0800d05a 	.word	0x0800d05a
 80089dc:	0800d06b 	.word	0x0800d06b

080089e0 <_scanf_float>:
 80089e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e4:	b087      	sub	sp, #28
 80089e6:	4617      	mov	r7, r2
 80089e8:	9303      	str	r3, [sp, #12]
 80089ea:	688b      	ldr	r3, [r1, #8]
 80089ec:	1e5a      	subs	r2, r3, #1
 80089ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80089f2:	bf81      	itttt	hi
 80089f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80089f8:	eb03 0b05 	addhi.w	fp, r3, r5
 80089fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008a00:	608b      	strhi	r3, [r1, #8]
 8008a02:	680b      	ldr	r3, [r1, #0]
 8008a04:	460a      	mov	r2, r1
 8008a06:	f04f 0500 	mov.w	r5, #0
 8008a0a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008a0e:	f842 3b1c 	str.w	r3, [r2], #28
 8008a12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008a16:	4680      	mov	r8, r0
 8008a18:	460c      	mov	r4, r1
 8008a1a:	bf98      	it	ls
 8008a1c:	f04f 0b00 	movls.w	fp, #0
 8008a20:	9201      	str	r2, [sp, #4]
 8008a22:	4616      	mov	r6, r2
 8008a24:	46aa      	mov	sl, r5
 8008a26:	46a9      	mov	r9, r5
 8008a28:	9502      	str	r5, [sp, #8]
 8008a2a:	68a2      	ldr	r2, [r4, #8]
 8008a2c:	b152      	cbz	r2, 8008a44 <_scanf_float+0x64>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b4e      	cmp	r3, #78	@ 0x4e
 8008a34:	d864      	bhi.n	8008b00 <_scanf_float+0x120>
 8008a36:	2b40      	cmp	r3, #64	@ 0x40
 8008a38:	d83c      	bhi.n	8008ab4 <_scanf_float+0xd4>
 8008a3a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008a3e:	b2c8      	uxtb	r0, r1
 8008a40:	280e      	cmp	r0, #14
 8008a42:	d93a      	bls.n	8008aba <_scanf_float+0xda>
 8008a44:	f1b9 0f00 	cmp.w	r9, #0
 8008a48:	d003      	beq.n	8008a52 <_scanf_float+0x72>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a56:	f1ba 0f01 	cmp.w	sl, #1
 8008a5a:	f200 8117 	bhi.w	8008c8c <_scanf_float+0x2ac>
 8008a5e:	9b01      	ldr	r3, [sp, #4]
 8008a60:	429e      	cmp	r6, r3
 8008a62:	f200 8108 	bhi.w	8008c76 <_scanf_float+0x296>
 8008a66:	2001      	movs	r0, #1
 8008a68:	b007      	add	sp, #28
 8008a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008a72:	2a0d      	cmp	r2, #13
 8008a74:	d8e6      	bhi.n	8008a44 <_scanf_float+0x64>
 8008a76:	a101      	add	r1, pc, #4	@ (adr r1, 8008a7c <_scanf_float+0x9c>)
 8008a78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a7c:	08008bc3 	.word	0x08008bc3
 8008a80:	08008a45 	.word	0x08008a45
 8008a84:	08008a45 	.word	0x08008a45
 8008a88:	08008a45 	.word	0x08008a45
 8008a8c:	08008c23 	.word	0x08008c23
 8008a90:	08008bfb 	.word	0x08008bfb
 8008a94:	08008a45 	.word	0x08008a45
 8008a98:	08008a45 	.word	0x08008a45
 8008a9c:	08008bd1 	.word	0x08008bd1
 8008aa0:	08008a45 	.word	0x08008a45
 8008aa4:	08008a45 	.word	0x08008a45
 8008aa8:	08008a45 	.word	0x08008a45
 8008aac:	08008a45 	.word	0x08008a45
 8008ab0:	08008b89 	.word	0x08008b89
 8008ab4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008ab8:	e7db      	b.n	8008a72 <_scanf_float+0x92>
 8008aba:	290e      	cmp	r1, #14
 8008abc:	d8c2      	bhi.n	8008a44 <_scanf_float+0x64>
 8008abe:	a001      	add	r0, pc, #4	@ (adr r0, 8008ac4 <_scanf_float+0xe4>)
 8008ac0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ac4:	08008b79 	.word	0x08008b79
 8008ac8:	08008a45 	.word	0x08008a45
 8008acc:	08008b79 	.word	0x08008b79
 8008ad0:	08008c0f 	.word	0x08008c0f
 8008ad4:	08008a45 	.word	0x08008a45
 8008ad8:	08008b21 	.word	0x08008b21
 8008adc:	08008b5f 	.word	0x08008b5f
 8008ae0:	08008b5f 	.word	0x08008b5f
 8008ae4:	08008b5f 	.word	0x08008b5f
 8008ae8:	08008b5f 	.word	0x08008b5f
 8008aec:	08008b5f 	.word	0x08008b5f
 8008af0:	08008b5f 	.word	0x08008b5f
 8008af4:	08008b5f 	.word	0x08008b5f
 8008af8:	08008b5f 	.word	0x08008b5f
 8008afc:	08008b5f 	.word	0x08008b5f
 8008b00:	2b6e      	cmp	r3, #110	@ 0x6e
 8008b02:	d809      	bhi.n	8008b18 <_scanf_float+0x138>
 8008b04:	2b60      	cmp	r3, #96	@ 0x60
 8008b06:	d8b2      	bhi.n	8008a6e <_scanf_float+0x8e>
 8008b08:	2b54      	cmp	r3, #84	@ 0x54
 8008b0a:	d07b      	beq.n	8008c04 <_scanf_float+0x224>
 8008b0c:	2b59      	cmp	r3, #89	@ 0x59
 8008b0e:	d199      	bne.n	8008a44 <_scanf_float+0x64>
 8008b10:	2d07      	cmp	r5, #7
 8008b12:	d197      	bne.n	8008a44 <_scanf_float+0x64>
 8008b14:	2508      	movs	r5, #8
 8008b16:	e02c      	b.n	8008b72 <_scanf_float+0x192>
 8008b18:	2b74      	cmp	r3, #116	@ 0x74
 8008b1a:	d073      	beq.n	8008c04 <_scanf_float+0x224>
 8008b1c:	2b79      	cmp	r3, #121	@ 0x79
 8008b1e:	e7f6      	b.n	8008b0e <_scanf_float+0x12e>
 8008b20:	6821      	ldr	r1, [r4, #0]
 8008b22:	05c8      	lsls	r0, r1, #23
 8008b24:	d51b      	bpl.n	8008b5e <_scanf_float+0x17e>
 8008b26:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008b2a:	6021      	str	r1, [r4, #0]
 8008b2c:	f109 0901 	add.w	r9, r9, #1
 8008b30:	f1bb 0f00 	cmp.w	fp, #0
 8008b34:	d003      	beq.n	8008b3e <_scanf_float+0x15e>
 8008b36:	3201      	adds	r2, #1
 8008b38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b3c:	60a2      	str	r2, [r4, #8]
 8008b3e:	68a3      	ldr	r3, [r4, #8]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	60a3      	str	r3, [r4, #8]
 8008b44:	6923      	ldr	r3, [r4, #16]
 8008b46:	3301      	adds	r3, #1
 8008b48:	6123      	str	r3, [r4, #16]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	607b      	str	r3, [r7, #4]
 8008b52:	f340 8087 	ble.w	8008c64 <_scanf_float+0x284>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	603b      	str	r3, [r7, #0]
 8008b5c:	e765      	b.n	8008a2a <_scanf_float+0x4a>
 8008b5e:	eb1a 0105 	adds.w	r1, sl, r5
 8008b62:	f47f af6f 	bne.w	8008a44 <_scanf_float+0x64>
 8008b66:	6822      	ldr	r2, [r4, #0]
 8008b68:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008b6c:	6022      	str	r2, [r4, #0]
 8008b6e:	460d      	mov	r5, r1
 8008b70:	468a      	mov	sl, r1
 8008b72:	f806 3b01 	strb.w	r3, [r6], #1
 8008b76:	e7e2      	b.n	8008b3e <_scanf_float+0x15e>
 8008b78:	6822      	ldr	r2, [r4, #0]
 8008b7a:	0610      	lsls	r0, r2, #24
 8008b7c:	f57f af62 	bpl.w	8008a44 <_scanf_float+0x64>
 8008b80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b84:	6022      	str	r2, [r4, #0]
 8008b86:	e7f4      	b.n	8008b72 <_scanf_float+0x192>
 8008b88:	f1ba 0f00 	cmp.w	sl, #0
 8008b8c:	d10e      	bne.n	8008bac <_scanf_float+0x1cc>
 8008b8e:	f1b9 0f00 	cmp.w	r9, #0
 8008b92:	d10e      	bne.n	8008bb2 <_scanf_float+0x1d2>
 8008b94:	6822      	ldr	r2, [r4, #0]
 8008b96:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008b9a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008b9e:	d108      	bne.n	8008bb2 <_scanf_float+0x1d2>
 8008ba0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008ba4:	6022      	str	r2, [r4, #0]
 8008ba6:	f04f 0a01 	mov.w	sl, #1
 8008baa:	e7e2      	b.n	8008b72 <_scanf_float+0x192>
 8008bac:	f1ba 0f02 	cmp.w	sl, #2
 8008bb0:	d055      	beq.n	8008c5e <_scanf_float+0x27e>
 8008bb2:	2d01      	cmp	r5, #1
 8008bb4:	d002      	beq.n	8008bbc <_scanf_float+0x1dc>
 8008bb6:	2d04      	cmp	r5, #4
 8008bb8:	f47f af44 	bne.w	8008a44 <_scanf_float+0x64>
 8008bbc:	3501      	adds	r5, #1
 8008bbe:	b2ed      	uxtb	r5, r5
 8008bc0:	e7d7      	b.n	8008b72 <_scanf_float+0x192>
 8008bc2:	f1ba 0f01 	cmp.w	sl, #1
 8008bc6:	f47f af3d 	bne.w	8008a44 <_scanf_float+0x64>
 8008bca:	f04f 0a02 	mov.w	sl, #2
 8008bce:	e7d0      	b.n	8008b72 <_scanf_float+0x192>
 8008bd0:	b97d      	cbnz	r5, 8008bf2 <_scanf_float+0x212>
 8008bd2:	f1b9 0f00 	cmp.w	r9, #0
 8008bd6:	f47f af38 	bne.w	8008a4a <_scanf_float+0x6a>
 8008bda:	6822      	ldr	r2, [r4, #0]
 8008bdc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008be0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008be4:	f040 8108 	bne.w	8008df8 <_scanf_float+0x418>
 8008be8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008bec:	6022      	str	r2, [r4, #0]
 8008bee:	2501      	movs	r5, #1
 8008bf0:	e7bf      	b.n	8008b72 <_scanf_float+0x192>
 8008bf2:	2d03      	cmp	r5, #3
 8008bf4:	d0e2      	beq.n	8008bbc <_scanf_float+0x1dc>
 8008bf6:	2d05      	cmp	r5, #5
 8008bf8:	e7de      	b.n	8008bb8 <_scanf_float+0x1d8>
 8008bfa:	2d02      	cmp	r5, #2
 8008bfc:	f47f af22 	bne.w	8008a44 <_scanf_float+0x64>
 8008c00:	2503      	movs	r5, #3
 8008c02:	e7b6      	b.n	8008b72 <_scanf_float+0x192>
 8008c04:	2d06      	cmp	r5, #6
 8008c06:	f47f af1d 	bne.w	8008a44 <_scanf_float+0x64>
 8008c0a:	2507      	movs	r5, #7
 8008c0c:	e7b1      	b.n	8008b72 <_scanf_float+0x192>
 8008c0e:	6822      	ldr	r2, [r4, #0]
 8008c10:	0591      	lsls	r1, r2, #22
 8008c12:	f57f af17 	bpl.w	8008a44 <_scanf_float+0x64>
 8008c16:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008c1a:	6022      	str	r2, [r4, #0]
 8008c1c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c20:	e7a7      	b.n	8008b72 <_scanf_float+0x192>
 8008c22:	6822      	ldr	r2, [r4, #0]
 8008c24:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008c28:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008c2c:	d006      	beq.n	8008c3c <_scanf_float+0x25c>
 8008c2e:	0550      	lsls	r0, r2, #21
 8008c30:	f57f af08 	bpl.w	8008a44 <_scanf_float+0x64>
 8008c34:	f1b9 0f00 	cmp.w	r9, #0
 8008c38:	f000 80de 	beq.w	8008df8 <_scanf_float+0x418>
 8008c3c:	0591      	lsls	r1, r2, #22
 8008c3e:	bf58      	it	pl
 8008c40:	9902      	ldrpl	r1, [sp, #8]
 8008c42:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c46:	bf58      	it	pl
 8008c48:	eba9 0101 	subpl.w	r1, r9, r1
 8008c4c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008c50:	bf58      	it	pl
 8008c52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008c56:	6022      	str	r2, [r4, #0]
 8008c58:	f04f 0900 	mov.w	r9, #0
 8008c5c:	e789      	b.n	8008b72 <_scanf_float+0x192>
 8008c5e:	f04f 0a03 	mov.w	sl, #3
 8008c62:	e786      	b.n	8008b72 <_scanf_float+0x192>
 8008c64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008c68:	4639      	mov	r1, r7
 8008c6a:	4640      	mov	r0, r8
 8008c6c:	4798      	blx	r3
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	f43f aedb 	beq.w	8008a2a <_scanf_float+0x4a>
 8008c74:	e6e6      	b.n	8008a44 <_scanf_float+0x64>
 8008c76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c7e:	463a      	mov	r2, r7
 8008c80:	4640      	mov	r0, r8
 8008c82:	4798      	blx	r3
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	6123      	str	r3, [r4, #16]
 8008c8a:	e6e8      	b.n	8008a5e <_scanf_float+0x7e>
 8008c8c:	1e6b      	subs	r3, r5, #1
 8008c8e:	2b06      	cmp	r3, #6
 8008c90:	d824      	bhi.n	8008cdc <_scanf_float+0x2fc>
 8008c92:	2d02      	cmp	r5, #2
 8008c94:	d836      	bhi.n	8008d04 <_scanf_float+0x324>
 8008c96:	9b01      	ldr	r3, [sp, #4]
 8008c98:	429e      	cmp	r6, r3
 8008c9a:	f67f aee4 	bls.w	8008a66 <_scanf_float+0x86>
 8008c9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ca2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ca6:	463a      	mov	r2, r7
 8008ca8:	4640      	mov	r0, r8
 8008caa:	4798      	blx	r3
 8008cac:	6923      	ldr	r3, [r4, #16]
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	6123      	str	r3, [r4, #16]
 8008cb2:	e7f0      	b.n	8008c96 <_scanf_float+0x2b6>
 8008cb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cb8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008cbc:	463a      	mov	r2, r7
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	4798      	blx	r3
 8008cc2:	6923      	ldr	r3, [r4, #16]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	6123      	str	r3, [r4, #16]
 8008cc8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ccc:	fa5f fa8a 	uxtb.w	sl, sl
 8008cd0:	f1ba 0f02 	cmp.w	sl, #2
 8008cd4:	d1ee      	bne.n	8008cb4 <_scanf_float+0x2d4>
 8008cd6:	3d03      	subs	r5, #3
 8008cd8:	b2ed      	uxtb	r5, r5
 8008cda:	1b76      	subs	r6, r6, r5
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	05da      	lsls	r2, r3, #23
 8008ce0:	d530      	bpl.n	8008d44 <_scanf_float+0x364>
 8008ce2:	055b      	lsls	r3, r3, #21
 8008ce4:	d511      	bpl.n	8008d0a <_scanf_float+0x32a>
 8008ce6:	9b01      	ldr	r3, [sp, #4]
 8008ce8:	429e      	cmp	r6, r3
 8008cea:	f67f aebc 	bls.w	8008a66 <_scanf_float+0x86>
 8008cee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cf6:	463a      	mov	r2, r7
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	4798      	blx	r3
 8008cfc:	6923      	ldr	r3, [r4, #16]
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	6123      	str	r3, [r4, #16]
 8008d02:	e7f0      	b.n	8008ce6 <_scanf_float+0x306>
 8008d04:	46aa      	mov	sl, r5
 8008d06:	46b3      	mov	fp, r6
 8008d08:	e7de      	b.n	8008cc8 <_scanf_float+0x2e8>
 8008d0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008d0e:	6923      	ldr	r3, [r4, #16]
 8008d10:	2965      	cmp	r1, #101	@ 0x65
 8008d12:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d16:	f106 35ff 	add.w	r5, r6, #4294967295
 8008d1a:	6123      	str	r3, [r4, #16]
 8008d1c:	d00c      	beq.n	8008d38 <_scanf_float+0x358>
 8008d1e:	2945      	cmp	r1, #69	@ 0x45
 8008d20:	d00a      	beq.n	8008d38 <_scanf_float+0x358>
 8008d22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d26:	463a      	mov	r2, r7
 8008d28:	4640      	mov	r0, r8
 8008d2a:	4798      	blx	r3
 8008d2c:	6923      	ldr	r3, [r4, #16]
 8008d2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008d32:	3b01      	subs	r3, #1
 8008d34:	1eb5      	subs	r5, r6, #2
 8008d36:	6123      	str	r3, [r4, #16]
 8008d38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d3c:	463a      	mov	r2, r7
 8008d3e:	4640      	mov	r0, r8
 8008d40:	4798      	blx	r3
 8008d42:	462e      	mov	r6, r5
 8008d44:	6822      	ldr	r2, [r4, #0]
 8008d46:	f012 0210 	ands.w	r2, r2, #16
 8008d4a:	d001      	beq.n	8008d50 <_scanf_float+0x370>
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	e68b      	b.n	8008a68 <_scanf_float+0x88>
 8008d50:	7032      	strb	r2, [r6, #0]
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d5c:	d11c      	bne.n	8008d98 <_scanf_float+0x3b8>
 8008d5e:	9b02      	ldr	r3, [sp, #8]
 8008d60:	454b      	cmp	r3, r9
 8008d62:	eba3 0209 	sub.w	r2, r3, r9
 8008d66:	d123      	bne.n	8008db0 <_scanf_float+0x3d0>
 8008d68:	9901      	ldr	r1, [sp, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	4640      	mov	r0, r8
 8008d6e:	f002 fbf7 	bl	800b560 <_strtod_r>
 8008d72:	9b03      	ldr	r3, [sp, #12]
 8008d74:	6821      	ldr	r1, [r4, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f011 0f02 	tst.w	r1, #2
 8008d7c:	ec57 6b10 	vmov	r6, r7, d0
 8008d80:	f103 0204 	add.w	r2, r3, #4
 8008d84:	d01f      	beq.n	8008dc6 <_scanf_float+0x3e6>
 8008d86:	9903      	ldr	r1, [sp, #12]
 8008d88:	600a      	str	r2, [r1, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	e9c3 6700 	strd	r6, r7, [r3]
 8008d90:	68e3      	ldr	r3, [r4, #12]
 8008d92:	3301      	adds	r3, #1
 8008d94:	60e3      	str	r3, [r4, #12]
 8008d96:	e7d9      	b.n	8008d4c <_scanf_float+0x36c>
 8008d98:	9b04      	ldr	r3, [sp, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d0e4      	beq.n	8008d68 <_scanf_float+0x388>
 8008d9e:	9905      	ldr	r1, [sp, #20]
 8008da0:	230a      	movs	r3, #10
 8008da2:	3101      	adds	r1, #1
 8008da4:	4640      	mov	r0, r8
 8008da6:	f002 fc5b 	bl	800b660 <_strtol_r>
 8008daa:	9b04      	ldr	r3, [sp, #16]
 8008dac:	9e05      	ldr	r6, [sp, #20]
 8008dae:	1ac2      	subs	r2, r0, r3
 8008db0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008db4:	429e      	cmp	r6, r3
 8008db6:	bf28      	it	cs
 8008db8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008dbc:	4910      	ldr	r1, [pc, #64]	@ (8008e00 <_scanf_float+0x420>)
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f000 f8e4 	bl	8008f8c <siprintf>
 8008dc4:	e7d0      	b.n	8008d68 <_scanf_float+0x388>
 8008dc6:	f011 0f04 	tst.w	r1, #4
 8008dca:	9903      	ldr	r1, [sp, #12]
 8008dcc:	600a      	str	r2, [r1, #0]
 8008dce:	d1dc      	bne.n	8008d8a <_scanf_float+0x3aa>
 8008dd0:	681d      	ldr	r5, [r3, #0]
 8008dd2:	4632      	mov	r2, r6
 8008dd4:	463b      	mov	r3, r7
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	4639      	mov	r1, r7
 8008dda:	f7f7 fecf 	bl	8000b7c <__aeabi_dcmpun>
 8008dde:	b128      	cbz	r0, 8008dec <_scanf_float+0x40c>
 8008de0:	4808      	ldr	r0, [pc, #32]	@ (8008e04 <_scanf_float+0x424>)
 8008de2:	f000 f9b7 	bl	8009154 <nanf>
 8008de6:	ed85 0a00 	vstr	s0, [r5]
 8008dea:	e7d1      	b.n	8008d90 <_scanf_float+0x3b0>
 8008dec:	4630      	mov	r0, r6
 8008dee:	4639      	mov	r1, r7
 8008df0:	f7f7 ff22 	bl	8000c38 <__aeabi_d2f>
 8008df4:	6028      	str	r0, [r5, #0]
 8008df6:	e7cb      	b.n	8008d90 <_scanf_float+0x3b0>
 8008df8:	f04f 0900 	mov.w	r9, #0
 8008dfc:	e629      	b.n	8008a52 <_scanf_float+0x72>
 8008dfe:	bf00      	nop
 8008e00:	0800d07c 	.word	0x0800d07c
 8008e04:	0800d415 	.word	0x0800d415

08008e08 <std>:
 8008e08:	2300      	movs	r3, #0
 8008e0a:	b510      	push	{r4, lr}
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e16:	6083      	str	r3, [r0, #8]
 8008e18:	8181      	strh	r1, [r0, #12]
 8008e1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e1c:	81c2      	strh	r2, [r0, #14]
 8008e1e:	6183      	str	r3, [r0, #24]
 8008e20:	4619      	mov	r1, r3
 8008e22:	2208      	movs	r2, #8
 8008e24:	305c      	adds	r0, #92	@ 0x5c
 8008e26:	f000 f914 	bl	8009052 <memset>
 8008e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e60 <std+0x58>)
 8008e2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e64 <std+0x5c>)
 8008e30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e32:	4b0d      	ldr	r3, [pc, #52]	@ (8008e68 <std+0x60>)
 8008e34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e36:	4b0d      	ldr	r3, [pc, #52]	@ (8008e6c <std+0x64>)
 8008e38:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e70 <std+0x68>)
 8008e3c:	6224      	str	r4, [r4, #32]
 8008e3e:	429c      	cmp	r4, r3
 8008e40:	d006      	beq.n	8008e50 <std+0x48>
 8008e42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e46:	4294      	cmp	r4, r2
 8008e48:	d002      	beq.n	8008e50 <std+0x48>
 8008e4a:	33d0      	adds	r3, #208	@ 0xd0
 8008e4c:	429c      	cmp	r4, r3
 8008e4e:	d105      	bne.n	8008e5c <std+0x54>
 8008e50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e58:	f000 b978 	b.w	800914c <__retarget_lock_init_recursive>
 8008e5c:	bd10      	pop	{r4, pc}
 8008e5e:	bf00      	nop
 8008e60:	08008fcd 	.word	0x08008fcd
 8008e64:	08008fef 	.word	0x08008fef
 8008e68:	08009027 	.word	0x08009027
 8008e6c:	0800904b 	.word	0x0800904b
 8008e70:	200085a4 	.word	0x200085a4

08008e74 <stdio_exit_handler>:
 8008e74:	4a02      	ldr	r2, [pc, #8]	@ (8008e80 <stdio_exit_handler+0xc>)
 8008e76:	4903      	ldr	r1, [pc, #12]	@ (8008e84 <stdio_exit_handler+0x10>)
 8008e78:	4803      	ldr	r0, [pc, #12]	@ (8008e88 <stdio_exit_handler+0x14>)
 8008e7a:	f000 b869 	b.w	8008f50 <_fwalk_sglue>
 8008e7e:	bf00      	nop
 8008e80:	20000030 	.word	0x20000030
 8008e84:	0800ba1d 	.word	0x0800ba1d
 8008e88:	20000040 	.word	0x20000040

08008e8c <cleanup_stdio>:
 8008e8c:	6841      	ldr	r1, [r0, #4]
 8008e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ec0 <cleanup_stdio+0x34>)
 8008e90:	4299      	cmp	r1, r3
 8008e92:	b510      	push	{r4, lr}
 8008e94:	4604      	mov	r4, r0
 8008e96:	d001      	beq.n	8008e9c <cleanup_stdio+0x10>
 8008e98:	f002 fdc0 	bl	800ba1c <_fflush_r>
 8008e9c:	68a1      	ldr	r1, [r4, #8]
 8008e9e:	4b09      	ldr	r3, [pc, #36]	@ (8008ec4 <cleanup_stdio+0x38>)
 8008ea0:	4299      	cmp	r1, r3
 8008ea2:	d002      	beq.n	8008eaa <cleanup_stdio+0x1e>
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f002 fdb9 	bl	800ba1c <_fflush_r>
 8008eaa:	68e1      	ldr	r1, [r4, #12]
 8008eac:	4b06      	ldr	r3, [pc, #24]	@ (8008ec8 <cleanup_stdio+0x3c>)
 8008eae:	4299      	cmp	r1, r3
 8008eb0:	d004      	beq.n	8008ebc <cleanup_stdio+0x30>
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eb8:	f002 bdb0 	b.w	800ba1c <_fflush_r>
 8008ebc:	bd10      	pop	{r4, pc}
 8008ebe:	bf00      	nop
 8008ec0:	200085a4 	.word	0x200085a4
 8008ec4:	2000860c 	.word	0x2000860c
 8008ec8:	20008674 	.word	0x20008674

08008ecc <global_stdio_init.part.0>:
 8008ecc:	b510      	push	{r4, lr}
 8008ece:	4b0b      	ldr	r3, [pc, #44]	@ (8008efc <global_stdio_init.part.0+0x30>)
 8008ed0:	4c0b      	ldr	r4, [pc, #44]	@ (8008f00 <global_stdio_init.part.0+0x34>)
 8008ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8008f04 <global_stdio_init.part.0+0x38>)
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2104      	movs	r1, #4
 8008edc:	f7ff ff94 	bl	8008e08 <std>
 8008ee0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	2109      	movs	r1, #9
 8008ee8:	f7ff ff8e 	bl	8008e08 <std>
 8008eec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ef0:	2202      	movs	r2, #2
 8008ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ef6:	2112      	movs	r1, #18
 8008ef8:	f7ff bf86 	b.w	8008e08 <std>
 8008efc:	200086dc 	.word	0x200086dc
 8008f00:	200085a4 	.word	0x200085a4
 8008f04:	08008e75 	.word	0x08008e75

08008f08 <__sfp_lock_acquire>:
 8008f08:	4801      	ldr	r0, [pc, #4]	@ (8008f10 <__sfp_lock_acquire+0x8>)
 8008f0a:	f000 b920 	b.w	800914e <__retarget_lock_acquire_recursive>
 8008f0e:	bf00      	nop
 8008f10:	200086e5 	.word	0x200086e5

08008f14 <__sfp_lock_release>:
 8008f14:	4801      	ldr	r0, [pc, #4]	@ (8008f1c <__sfp_lock_release+0x8>)
 8008f16:	f000 b91b 	b.w	8009150 <__retarget_lock_release_recursive>
 8008f1a:	bf00      	nop
 8008f1c:	200086e5 	.word	0x200086e5

08008f20 <__sinit>:
 8008f20:	b510      	push	{r4, lr}
 8008f22:	4604      	mov	r4, r0
 8008f24:	f7ff fff0 	bl	8008f08 <__sfp_lock_acquire>
 8008f28:	6a23      	ldr	r3, [r4, #32]
 8008f2a:	b11b      	cbz	r3, 8008f34 <__sinit+0x14>
 8008f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f30:	f7ff bff0 	b.w	8008f14 <__sfp_lock_release>
 8008f34:	4b04      	ldr	r3, [pc, #16]	@ (8008f48 <__sinit+0x28>)
 8008f36:	6223      	str	r3, [r4, #32]
 8008f38:	4b04      	ldr	r3, [pc, #16]	@ (8008f4c <__sinit+0x2c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1f5      	bne.n	8008f2c <__sinit+0xc>
 8008f40:	f7ff ffc4 	bl	8008ecc <global_stdio_init.part.0>
 8008f44:	e7f2      	b.n	8008f2c <__sinit+0xc>
 8008f46:	bf00      	nop
 8008f48:	08008e8d 	.word	0x08008e8d
 8008f4c:	200086dc 	.word	0x200086dc

08008f50 <_fwalk_sglue>:
 8008f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f54:	4607      	mov	r7, r0
 8008f56:	4688      	mov	r8, r1
 8008f58:	4614      	mov	r4, r2
 8008f5a:	2600      	movs	r6, #0
 8008f5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f60:	f1b9 0901 	subs.w	r9, r9, #1
 8008f64:	d505      	bpl.n	8008f72 <_fwalk_sglue+0x22>
 8008f66:	6824      	ldr	r4, [r4, #0]
 8008f68:	2c00      	cmp	r4, #0
 8008f6a:	d1f7      	bne.n	8008f5c <_fwalk_sglue+0xc>
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f72:	89ab      	ldrh	r3, [r5, #12]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d907      	bls.n	8008f88 <_fwalk_sglue+0x38>
 8008f78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	d003      	beq.n	8008f88 <_fwalk_sglue+0x38>
 8008f80:	4629      	mov	r1, r5
 8008f82:	4638      	mov	r0, r7
 8008f84:	47c0      	blx	r8
 8008f86:	4306      	orrs	r6, r0
 8008f88:	3568      	adds	r5, #104	@ 0x68
 8008f8a:	e7e9      	b.n	8008f60 <_fwalk_sglue+0x10>

08008f8c <siprintf>:
 8008f8c:	b40e      	push	{r1, r2, r3}
 8008f8e:	b500      	push	{lr}
 8008f90:	b09c      	sub	sp, #112	@ 0x70
 8008f92:	ab1d      	add	r3, sp, #116	@ 0x74
 8008f94:	9002      	str	r0, [sp, #8]
 8008f96:	9006      	str	r0, [sp, #24]
 8008f98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008f9c:	4809      	ldr	r0, [pc, #36]	@ (8008fc4 <siprintf+0x38>)
 8008f9e:	9107      	str	r1, [sp, #28]
 8008fa0:	9104      	str	r1, [sp, #16]
 8008fa2:	4909      	ldr	r1, [pc, #36]	@ (8008fc8 <siprintf+0x3c>)
 8008fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fa8:	9105      	str	r1, [sp, #20]
 8008faa:	6800      	ldr	r0, [r0, #0]
 8008fac:	9301      	str	r3, [sp, #4]
 8008fae:	a902      	add	r1, sp, #8
 8008fb0:	f002 fbb4 	bl	800b71c <_svfiprintf_r>
 8008fb4:	9b02      	ldr	r3, [sp, #8]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	701a      	strb	r2, [r3, #0]
 8008fba:	b01c      	add	sp, #112	@ 0x70
 8008fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fc0:	b003      	add	sp, #12
 8008fc2:	4770      	bx	lr
 8008fc4:	2000003c 	.word	0x2000003c
 8008fc8:	ffff0208 	.word	0xffff0208

08008fcc <__sread>:
 8008fcc:	b510      	push	{r4, lr}
 8008fce:	460c      	mov	r4, r1
 8008fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd4:	f000 f86c 	bl	80090b0 <_read_r>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	bfab      	itete	ge
 8008fdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008fde:	89a3      	ldrhlt	r3, [r4, #12]
 8008fe0:	181b      	addge	r3, r3, r0
 8008fe2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008fe6:	bfac      	ite	ge
 8008fe8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008fea:	81a3      	strhlt	r3, [r4, #12]
 8008fec:	bd10      	pop	{r4, pc}

08008fee <__swrite>:
 8008fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff2:	461f      	mov	r7, r3
 8008ff4:	898b      	ldrh	r3, [r1, #12]
 8008ff6:	05db      	lsls	r3, r3, #23
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	4616      	mov	r6, r2
 8008ffe:	d505      	bpl.n	800900c <__swrite+0x1e>
 8009000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009004:	2302      	movs	r3, #2
 8009006:	2200      	movs	r2, #0
 8009008:	f000 f840 	bl	800908c <_lseek_r>
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009012:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009016:	81a3      	strh	r3, [r4, #12]
 8009018:	4632      	mov	r2, r6
 800901a:	463b      	mov	r3, r7
 800901c:	4628      	mov	r0, r5
 800901e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009022:	f000 b857 	b.w	80090d4 <_write_r>

08009026 <__sseek>:
 8009026:	b510      	push	{r4, lr}
 8009028:	460c      	mov	r4, r1
 800902a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800902e:	f000 f82d 	bl	800908c <_lseek_r>
 8009032:	1c43      	adds	r3, r0, #1
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	bf15      	itete	ne
 8009038:	6560      	strne	r0, [r4, #84]	@ 0x54
 800903a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800903e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009042:	81a3      	strheq	r3, [r4, #12]
 8009044:	bf18      	it	ne
 8009046:	81a3      	strhne	r3, [r4, #12]
 8009048:	bd10      	pop	{r4, pc}

0800904a <__sclose>:
 800904a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800904e:	f000 b80d 	b.w	800906c <_close_r>

08009052 <memset>:
 8009052:	4402      	add	r2, r0
 8009054:	4603      	mov	r3, r0
 8009056:	4293      	cmp	r3, r2
 8009058:	d100      	bne.n	800905c <memset+0xa>
 800905a:	4770      	bx	lr
 800905c:	f803 1b01 	strb.w	r1, [r3], #1
 8009060:	e7f9      	b.n	8009056 <memset+0x4>
	...

08009064 <_localeconv_r>:
 8009064:	4800      	ldr	r0, [pc, #0]	@ (8009068 <_localeconv_r+0x4>)
 8009066:	4770      	bx	lr
 8009068:	2000017c 	.word	0x2000017c

0800906c <_close_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d06      	ldr	r5, [pc, #24]	@ (8009088 <_close_r+0x1c>)
 8009070:	2300      	movs	r3, #0
 8009072:	4604      	mov	r4, r0
 8009074:	4608      	mov	r0, r1
 8009076:	602b      	str	r3, [r5, #0]
 8009078:	f7f9 f948 	bl	800230c <_close>
 800907c:	1c43      	adds	r3, r0, #1
 800907e:	d102      	bne.n	8009086 <_close_r+0x1a>
 8009080:	682b      	ldr	r3, [r5, #0]
 8009082:	b103      	cbz	r3, 8009086 <_close_r+0x1a>
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	bd38      	pop	{r3, r4, r5, pc}
 8009088:	200086e0 	.word	0x200086e0

0800908c <_lseek_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d07      	ldr	r5, [pc, #28]	@ (80090ac <_lseek_r+0x20>)
 8009090:	4604      	mov	r4, r0
 8009092:	4608      	mov	r0, r1
 8009094:	4611      	mov	r1, r2
 8009096:	2200      	movs	r2, #0
 8009098:	602a      	str	r2, [r5, #0]
 800909a:	461a      	mov	r2, r3
 800909c:	f7f9 f95d 	bl	800235a <_lseek>
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	d102      	bne.n	80090aa <_lseek_r+0x1e>
 80090a4:	682b      	ldr	r3, [r5, #0]
 80090a6:	b103      	cbz	r3, 80090aa <_lseek_r+0x1e>
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	bd38      	pop	{r3, r4, r5, pc}
 80090ac:	200086e0 	.word	0x200086e0

080090b0 <_read_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4d07      	ldr	r5, [pc, #28]	@ (80090d0 <_read_r+0x20>)
 80090b4:	4604      	mov	r4, r0
 80090b6:	4608      	mov	r0, r1
 80090b8:	4611      	mov	r1, r2
 80090ba:	2200      	movs	r2, #0
 80090bc:	602a      	str	r2, [r5, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	f7f9 f8eb 	bl	800229a <_read>
 80090c4:	1c43      	adds	r3, r0, #1
 80090c6:	d102      	bne.n	80090ce <_read_r+0x1e>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	b103      	cbz	r3, 80090ce <_read_r+0x1e>
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	bd38      	pop	{r3, r4, r5, pc}
 80090d0:	200086e0 	.word	0x200086e0

080090d4 <_write_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	4d07      	ldr	r5, [pc, #28]	@ (80090f4 <_write_r+0x20>)
 80090d8:	4604      	mov	r4, r0
 80090da:	4608      	mov	r0, r1
 80090dc:	4611      	mov	r1, r2
 80090de:	2200      	movs	r2, #0
 80090e0:	602a      	str	r2, [r5, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	f7f9 f8f6 	bl	80022d4 <_write>
 80090e8:	1c43      	adds	r3, r0, #1
 80090ea:	d102      	bne.n	80090f2 <_write_r+0x1e>
 80090ec:	682b      	ldr	r3, [r5, #0]
 80090ee:	b103      	cbz	r3, 80090f2 <_write_r+0x1e>
 80090f0:	6023      	str	r3, [r4, #0]
 80090f2:	bd38      	pop	{r3, r4, r5, pc}
 80090f4:	200086e0 	.word	0x200086e0

080090f8 <__errno>:
 80090f8:	4b01      	ldr	r3, [pc, #4]	@ (8009100 <__errno+0x8>)
 80090fa:	6818      	ldr	r0, [r3, #0]
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	2000003c 	.word	0x2000003c

08009104 <__libc_init_array>:
 8009104:	b570      	push	{r4, r5, r6, lr}
 8009106:	4d0d      	ldr	r5, [pc, #52]	@ (800913c <__libc_init_array+0x38>)
 8009108:	4c0d      	ldr	r4, [pc, #52]	@ (8009140 <__libc_init_array+0x3c>)
 800910a:	1b64      	subs	r4, r4, r5
 800910c:	10a4      	asrs	r4, r4, #2
 800910e:	2600      	movs	r6, #0
 8009110:	42a6      	cmp	r6, r4
 8009112:	d109      	bne.n	8009128 <__libc_init_array+0x24>
 8009114:	4d0b      	ldr	r5, [pc, #44]	@ (8009144 <__libc_init_array+0x40>)
 8009116:	4c0c      	ldr	r4, [pc, #48]	@ (8009148 <__libc_init_array+0x44>)
 8009118:	f003 fb70 	bl	800c7fc <_init>
 800911c:	1b64      	subs	r4, r4, r5
 800911e:	10a4      	asrs	r4, r4, #2
 8009120:	2600      	movs	r6, #0
 8009122:	42a6      	cmp	r6, r4
 8009124:	d105      	bne.n	8009132 <__libc_init_array+0x2e>
 8009126:	bd70      	pop	{r4, r5, r6, pc}
 8009128:	f855 3b04 	ldr.w	r3, [r5], #4
 800912c:	4798      	blx	r3
 800912e:	3601      	adds	r6, #1
 8009130:	e7ee      	b.n	8009110 <__libc_init_array+0xc>
 8009132:	f855 3b04 	ldr.w	r3, [r5], #4
 8009136:	4798      	blx	r3
 8009138:	3601      	adds	r6, #1
 800913a:	e7f2      	b.n	8009122 <__libc_init_array+0x1e>
 800913c:	0800d480 	.word	0x0800d480
 8009140:	0800d480 	.word	0x0800d480
 8009144:	0800d480 	.word	0x0800d480
 8009148:	0800d484 	.word	0x0800d484

0800914c <__retarget_lock_init_recursive>:
 800914c:	4770      	bx	lr

0800914e <__retarget_lock_acquire_recursive>:
 800914e:	4770      	bx	lr

08009150 <__retarget_lock_release_recursive>:
 8009150:	4770      	bx	lr
	...

08009154 <nanf>:
 8009154:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800915c <nanf+0x8>
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	7fc00000 	.word	0x7fc00000

08009160 <quorem>:
 8009160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	6903      	ldr	r3, [r0, #16]
 8009166:	690c      	ldr	r4, [r1, #16]
 8009168:	42a3      	cmp	r3, r4
 800916a:	4607      	mov	r7, r0
 800916c:	db7e      	blt.n	800926c <quorem+0x10c>
 800916e:	3c01      	subs	r4, #1
 8009170:	f101 0814 	add.w	r8, r1, #20
 8009174:	00a3      	lsls	r3, r4, #2
 8009176:	f100 0514 	add.w	r5, r0, #20
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009186:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800918a:	3301      	adds	r3, #1
 800918c:	429a      	cmp	r2, r3
 800918e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009192:	fbb2 f6f3 	udiv	r6, r2, r3
 8009196:	d32e      	bcc.n	80091f6 <quorem+0x96>
 8009198:	f04f 0a00 	mov.w	sl, #0
 800919c:	46c4      	mov	ip, r8
 800919e:	46ae      	mov	lr, r5
 80091a0:	46d3      	mov	fp, sl
 80091a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80091a6:	b298      	uxth	r0, r3
 80091a8:	fb06 a000 	mla	r0, r6, r0, sl
 80091ac:	0c02      	lsrs	r2, r0, #16
 80091ae:	0c1b      	lsrs	r3, r3, #16
 80091b0:	fb06 2303 	mla	r3, r6, r3, r2
 80091b4:	f8de 2000 	ldr.w	r2, [lr]
 80091b8:	b280      	uxth	r0, r0
 80091ba:	b292      	uxth	r2, r2
 80091bc:	1a12      	subs	r2, r2, r0
 80091be:	445a      	add	r2, fp
 80091c0:	f8de 0000 	ldr.w	r0, [lr]
 80091c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80091ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80091d2:	b292      	uxth	r2, r2
 80091d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80091d8:	45e1      	cmp	r9, ip
 80091da:	f84e 2b04 	str.w	r2, [lr], #4
 80091de:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80091e2:	d2de      	bcs.n	80091a2 <quorem+0x42>
 80091e4:	9b00      	ldr	r3, [sp, #0]
 80091e6:	58eb      	ldr	r3, [r5, r3]
 80091e8:	b92b      	cbnz	r3, 80091f6 <quorem+0x96>
 80091ea:	9b01      	ldr	r3, [sp, #4]
 80091ec:	3b04      	subs	r3, #4
 80091ee:	429d      	cmp	r5, r3
 80091f0:	461a      	mov	r2, r3
 80091f2:	d32f      	bcc.n	8009254 <quorem+0xf4>
 80091f4:	613c      	str	r4, [r7, #16]
 80091f6:	4638      	mov	r0, r7
 80091f8:	f001 f9c2 	bl	800a580 <__mcmp>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	db25      	blt.n	800924c <quorem+0xec>
 8009200:	4629      	mov	r1, r5
 8009202:	2000      	movs	r0, #0
 8009204:	f858 2b04 	ldr.w	r2, [r8], #4
 8009208:	f8d1 c000 	ldr.w	ip, [r1]
 800920c:	fa1f fe82 	uxth.w	lr, r2
 8009210:	fa1f f38c 	uxth.w	r3, ip
 8009214:	eba3 030e 	sub.w	r3, r3, lr
 8009218:	4403      	add	r3, r0
 800921a:	0c12      	lsrs	r2, r2, #16
 800921c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009220:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009224:	b29b      	uxth	r3, r3
 8009226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800922a:	45c1      	cmp	r9, r8
 800922c:	f841 3b04 	str.w	r3, [r1], #4
 8009230:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009234:	d2e6      	bcs.n	8009204 <quorem+0xa4>
 8009236:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800923a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800923e:	b922      	cbnz	r2, 800924a <quorem+0xea>
 8009240:	3b04      	subs	r3, #4
 8009242:	429d      	cmp	r5, r3
 8009244:	461a      	mov	r2, r3
 8009246:	d30b      	bcc.n	8009260 <quorem+0x100>
 8009248:	613c      	str	r4, [r7, #16]
 800924a:	3601      	adds	r6, #1
 800924c:	4630      	mov	r0, r6
 800924e:	b003      	add	sp, #12
 8009250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009254:	6812      	ldr	r2, [r2, #0]
 8009256:	3b04      	subs	r3, #4
 8009258:	2a00      	cmp	r2, #0
 800925a:	d1cb      	bne.n	80091f4 <quorem+0x94>
 800925c:	3c01      	subs	r4, #1
 800925e:	e7c6      	b.n	80091ee <quorem+0x8e>
 8009260:	6812      	ldr	r2, [r2, #0]
 8009262:	3b04      	subs	r3, #4
 8009264:	2a00      	cmp	r2, #0
 8009266:	d1ef      	bne.n	8009248 <quorem+0xe8>
 8009268:	3c01      	subs	r4, #1
 800926a:	e7ea      	b.n	8009242 <quorem+0xe2>
 800926c:	2000      	movs	r0, #0
 800926e:	e7ee      	b.n	800924e <quorem+0xee>

08009270 <_dtoa_r>:
 8009270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009274:	69c7      	ldr	r7, [r0, #28]
 8009276:	b099      	sub	sp, #100	@ 0x64
 8009278:	ed8d 0b02 	vstr	d0, [sp, #8]
 800927c:	ec55 4b10 	vmov	r4, r5, d0
 8009280:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009282:	9109      	str	r1, [sp, #36]	@ 0x24
 8009284:	4683      	mov	fp, r0
 8009286:	920e      	str	r2, [sp, #56]	@ 0x38
 8009288:	9313      	str	r3, [sp, #76]	@ 0x4c
 800928a:	b97f      	cbnz	r7, 80092ac <_dtoa_r+0x3c>
 800928c:	2010      	movs	r0, #16
 800928e:	f000 fdfd 	bl	8009e8c <malloc>
 8009292:	4602      	mov	r2, r0
 8009294:	f8cb 001c 	str.w	r0, [fp, #28]
 8009298:	b920      	cbnz	r0, 80092a4 <_dtoa_r+0x34>
 800929a:	4ba7      	ldr	r3, [pc, #668]	@ (8009538 <_dtoa_r+0x2c8>)
 800929c:	21ef      	movs	r1, #239	@ 0xef
 800929e:	48a7      	ldr	r0, [pc, #668]	@ (800953c <_dtoa_r+0x2cc>)
 80092a0:	f002 fc36 	bl	800bb10 <__assert_func>
 80092a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80092a8:	6007      	str	r7, [r0, #0]
 80092aa:	60c7      	str	r7, [r0, #12]
 80092ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80092b0:	6819      	ldr	r1, [r3, #0]
 80092b2:	b159      	cbz	r1, 80092cc <_dtoa_r+0x5c>
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	604a      	str	r2, [r1, #4]
 80092b8:	2301      	movs	r3, #1
 80092ba:	4093      	lsls	r3, r2
 80092bc:	608b      	str	r3, [r1, #8]
 80092be:	4658      	mov	r0, fp
 80092c0:	f000 feda 	bl	800a078 <_Bfree>
 80092c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80092c8:	2200      	movs	r2, #0
 80092ca:	601a      	str	r2, [r3, #0]
 80092cc:	1e2b      	subs	r3, r5, #0
 80092ce:	bfb9      	ittee	lt
 80092d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80092d4:	9303      	strlt	r3, [sp, #12]
 80092d6:	2300      	movge	r3, #0
 80092d8:	6033      	strge	r3, [r6, #0]
 80092da:	9f03      	ldr	r7, [sp, #12]
 80092dc:	4b98      	ldr	r3, [pc, #608]	@ (8009540 <_dtoa_r+0x2d0>)
 80092de:	bfbc      	itt	lt
 80092e0:	2201      	movlt	r2, #1
 80092e2:	6032      	strlt	r2, [r6, #0]
 80092e4:	43bb      	bics	r3, r7
 80092e6:	d112      	bne.n	800930e <_dtoa_r+0x9e>
 80092e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80092ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80092ee:	6013      	str	r3, [r2, #0]
 80092f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092f4:	4323      	orrs	r3, r4
 80092f6:	f000 854d 	beq.w	8009d94 <_dtoa_r+0xb24>
 80092fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009554 <_dtoa_r+0x2e4>
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 854f 	beq.w	8009da4 <_dtoa_r+0xb34>
 8009306:	f10a 0303 	add.w	r3, sl, #3
 800930a:	f000 bd49 	b.w	8009da0 <_dtoa_r+0xb30>
 800930e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009312:	2200      	movs	r2, #0
 8009314:	ec51 0b17 	vmov	r0, r1, d7
 8009318:	2300      	movs	r3, #0
 800931a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800931e:	f7f7 fbfb 	bl	8000b18 <__aeabi_dcmpeq>
 8009322:	4680      	mov	r8, r0
 8009324:	b158      	cbz	r0, 800933e <_dtoa_r+0xce>
 8009326:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009328:	2301      	movs	r3, #1
 800932a:	6013      	str	r3, [r2, #0]
 800932c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800932e:	b113      	cbz	r3, 8009336 <_dtoa_r+0xc6>
 8009330:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009332:	4b84      	ldr	r3, [pc, #528]	@ (8009544 <_dtoa_r+0x2d4>)
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009558 <_dtoa_r+0x2e8>
 800933a:	f000 bd33 	b.w	8009da4 <_dtoa_r+0xb34>
 800933e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009342:	aa16      	add	r2, sp, #88	@ 0x58
 8009344:	a917      	add	r1, sp, #92	@ 0x5c
 8009346:	4658      	mov	r0, fp
 8009348:	f001 fa3a 	bl	800a7c0 <__d2b>
 800934c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009350:	4681      	mov	r9, r0
 8009352:	2e00      	cmp	r6, #0
 8009354:	d077      	beq.n	8009446 <_dtoa_r+0x1d6>
 8009356:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009358:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800935c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009364:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009368:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800936c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009370:	4619      	mov	r1, r3
 8009372:	2200      	movs	r2, #0
 8009374:	4b74      	ldr	r3, [pc, #464]	@ (8009548 <_dtoa_r+0x2d8>)
 8009376:	f7f6 ffaf 	bl	80002d8 <__aeabi_dsub>
 800937a:	a369      	add	r3, pc, #420	@ (adr r3, 8009520 <_dtoa_r+0x2b0>)
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	f7f7 f962 	bl	8000648 <__aeabi_dmul>
 8009384:	a368      	add	r3, pc, #416	@ (adr r3, 8009528 <_dtoa_r+0x2b8>)
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	f7f6 ffa7 	bl	80002dc <__adddf3>
 800938e:	4604      	mov	r4, r0
 8009390:	4630      	mov	r0, r6
 8009392:	460d      	mov	r5, r1
 8009394:	f7f7 f8ee 	bl	8000574 <__aeabi_i2d>
 8009398:	a365      	add	r3, pc, #404	@ (adr r3, 8009530 <_dtoa_r+0x2c0>)
 800939a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939e:	f7f7 f953 	bl	8000648 <__aeabi_dmul>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	4620      	mov	r0, r4
 80093a8:	4629      	mov	r1, r5
 80093aa:	f7f6 ff97 	bl	80002dc <__adddf3>
 80093ae:	4604      	mov	r4, r0
 80093b0:	460d      	mov	r5, r1
 80093b2:	f7f7 fbf9 	bl	8000ba8 <__aeabi_d2iz>
 80093b6:	2200      	movs	r2, #0
 80093b8:	4607      	mov	r7, r0
 80093ba:	2300      	movs	r3, #0
 80093bc:	4620      	mov	r0, r4
 80093be:	4629      	mov	r1, r5
 80093c0:	f7f7 fbb4 	bl	8000b2c <__aeabi_dcmplt>
 80093c4:	b140      	cbz	r0, 80093d8 <_dtoa_r+0x168>
 80093c6:	4638      	mov	r0, r7
 80093c8:	f7f7 f8d4 	bl	8000574 <__aeabi_i2d>
 80093cc:	4622      	mov	r2, r4
 80093ce:	462b      	mov	r3, r5
 80093d0:	f7f7 fba2 	bl	8000b18 <__aeabi_dcmpeq>
 80093d4:	b900      	cbnz	r0, 80093d8 <_dtoa_r+0x168>
 80093d6:	3f01      	subs	r7, #1
 80093d8:	2f16      	cmp	r7, #22
 80093da:	d851      	bhi.n	8009480 <_dtoa_r+0x210>
 80093dc:	4b5b      	ldr	r3, [pc, #364]	@ (800954c <_dtoa_r+0x2dc>)
 80093de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093ea:	f7f7 fb9f 	bl	8000b2c <__aeabi_dcmplt>
 80093ee:	2800      	cmp	r0, #0
 80093f0:	d048      	beq.n	8009484 <_dtoa_r+0x214>
 80093f2:	3f01      	subs	r7, #1
 80093f4:	2300      	movs	r3, #0
 80093f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80093f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093fa:	1b9b      	subs	r3, r3, r6
 80093fc:	1e5a      	subs	r2, r3, #1
 80093fe:	bf44      	itt	mi
 8009400:	f1c3 0801 	rsbmi	r8, r3, #1
 8009404:	2300      	movmi	r3, #0
 8009406:	9208      	str	r2, [sp, #32]
 8009408:	bf54      	ite	pl
 800940a:	f04f 0800 	movpl.w	r8, #0
 800940e:	9308      	strmi	r3, [sp, #32]
 8009410:	2f00      	cmp	r7, #0
 8009412:	db39      	blt.n	8009488 <_dtoa_r+0x218>
 8009414:	9b08      	ldr	r3, [sp, #32]
 8009416:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009418:	443b      	add	r3, r7
 800941a:	9308      	str	r3, [sp, #32]
 800941c:	2300      	movs	r3, #0
 800941e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009422:	2b09      	cmp	r3, #9
 8009424:	d864      	bhi.n	80094f0 <_dtoa_r+0x280>
 8009426:	2b05      	cmp	r3, #5
 8009428:	bfc4      	itt	gt
 800942a:	3b04      	subgt	r3, #4
 800942c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800942e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009430:	f1a3 0302 	sub.w	r3, r3, #2
 8009434:	bfcc      	ite	gt
 8009436:	2400      	movgt	r4, #0
 8009438:	2401      	movle	r4, #1
 800943a:	2b03      	cmp	r3, #3
 800943c:	d863      	bhi.n	8009506 <_dtoa_r+0x296>
 800943e:	e8df f003 	tbb	[pc, r3]
 8009442:	372a      	.short	0x372a
 8009444:	5535      	.short	0x5535
 8009446:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800944a:	441e      	add	r6, r3
 800944c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009450:	2b20      	cmp	r3, #32
 8009452:	bfc1      	itttt	gt
 8009454:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009458:	409f      	lslgt	r7, r3
 800945a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800945e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009462:	bfd6      	itet	le
 8009464:	f1c3 0320 	rsble	r3, r3, #32
 8009468:	ea47 0003 	orrgt.w	r0, r7, r3
 800946c:	fa04 f003 	lslle.w	r0, r4, r3
 8009470:	f7f7 f870 	bl	8000554 <__aeabi_ui2d>
 8009474:	2201      	movs	r2, #1
 8009476:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800947a:	3e01      	subs	r6, #1
 800947c:	9214      	str	r2, [sp, #80]	@ 0x50
 800947e:	e777      	b.n	8009370 <_dtoa_r+0x100>
 8009480:	2301      	movs	r3, #1
 8009482:	e7b8      	b.n	80093f6 <_dtoa_r+0x186>
 8009484:	9012      	str	r0, [sp, #72]	@ 0x48
 8009486:	e7b7      	b.n	80093f8 <_dtoa_r+0x188>
 8009488:	427b      	negs	r3, r7
 800948a:	930a      	str	r3, [sp, #40]	@ 0x28
 800948c:	2300      	movs	r3, #0
 800948e:	eba8 0807 	sub.w	r8, r8, r7
 8009492:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009494:	e7c4      	b.n	8009420 <_dtoa_r+0x1b0>
 8009496:	2300      	movs	r3, #0
 8009498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800949a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800949c:	2b00      	cmp	r3, #0
 800949e:	dc35      	bgt.n	800950c <_dtoa_r+0x29c>
 80094a0:	2301      	movs	r3, #1
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	9307      	str	r3, [sp, #28]
 80094a6:	461a      	mov	r2, r3
 80094a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80094aa:	e00b      	b.n	80094c4 <_dtoa_r+0x254>
 80094ac:	2301      	movs	r3, #1
 80094ae:	e7f3      	b.n	8009498 <_dtoa_r+0x228>
 80094b0:	2300      	movs	r3, #0
 80094b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094b6:	18fb      	adds	r3, r7, r3
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	3301      	adds	r3, #1
 80094bc:	2b01      	cmp	r3, #1
 80094be:	9307      	str	r3, [sp, #28]
 80094c0:	bfb8      	it	lt
 80094c2:	2301      	movlt	r3, #1
 80094c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80094c8:	2100      	movs	r1, #0
 80094ca:	2204      	movs	r2, #4
 80094cc:	f102 0514 	add.w	r5, r2, #20
 80094d0:	429d      	cmp	r5, r3
 80094d2:	d91f      	bls.n	8009514 <_dtoa_r+0x2a4>
 80094d4:	6041      	str	r1, [r0, #4]
 80094d6:	4658      	mov	r0, fp
 80094d8:	f000 fd8e 	bl	8009ff8 <_Balloc>
 80094dc:	4682      	mov	sl, r0
 80094de:	2800      	cmp	r0, #0
 80094e0:	d13c      	bne.n	800955c <_dtoa_r+0x2ec>
 80094e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009550 <_dtoa_r+0x2e0>)
 80094e4:	4602      	mov	r2, r0
 80094e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80094ea:	e6d8      	b.n	800929e <_dtoa_r+0x2e>
 80094ec:	2301      	movs	r3, #1
 80094ee:	e7e0      	b.n	80094b2 <_dtoa_r+0x242>
 80094f0:	2401      	movs	r4, #1
 80094f2:	2300      	movs	r3, #0
 80094f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80094f8:	f04f 33ff 	mov.w	r3, #4294967295
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	9307      	str	r3, [sp, #28]
 8009500:	2200      	movs	r2, #0
 8009502:	2312      	movs	r3, #18
 8009504:	e7d0      	b.n	80094a8 <_dtoa_r+0x238>
 8009506:	2301      	movs	r3, #1
 8009508:	930b      	str	r3, [sp, #44]	@ 0x2c
 800950a:	e7f5      	b.n	80094f8 <_dtoa_r+0x288>
 800950c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	9307      	str	r3, [sp, #28]
 8009512:	e7d7      	b.n	80094c4 <_dtoa_r+0x254>
 8009514:	3101      	adds	r1, #1
 8009516:	0052      	lsls	r2, r2, #1
 8009518:	e7d8      	b.n	80094cc <_dtoa_r+0x25c>
 800951a:	bf00      	nop
 800951c:	f3af 8000 	nop.w
 8009520:	636f4361 	.word	0x636f4361
 8009524:	3fd287a7 	.word	0x3fd287a7
 8009528:	8b60c8b3 	.word	0x8b60c8b3
 800952c:	3fc68a28 	.word	0x3fc68a28
 8009530:	509f79fb 	.word	0x509f79fb
 8009534:	3fd34413 	.word	0x3fd34413
 8009538:	0800d08e 	.word	0x0800d08e
 800953c:	0800d0a5 	.word	0x0800d0a5
 8009540:	7ff00000 	.word	0x7ff00000
 8009544:	0800d059 	.word	0x0800d059
 8009548:	3ff80000 	.word	0x3ff80000
 800954c:	0800d1a0 	.word	0x0800d1a0
 8009550:	0800d0fd 	.word	0x0800d0fd
 8009554:	0800d08a 	.word	0x0800d08a
 8009558:	0800d058 	.word	0x0800d058
 800955c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009560:	6018      	str	r0, [r3, #0]
 8009562:	9b07      	ldr	r3, [sp, #28]
 8009564:	2b0e      	cmp	r3, #14
 8009566:	f200 80a4 	bhi.w	80096b2 <_dtoa_r+0x442>
 800956a:	2c00      	cmp	r4, #0
 800956c:	f000 80a1 	beq.w	80096b2 <_dtoa_r+0x442>
 8009570:	2f00      	cmp	r7, #0
 8009572:	dd33      	ble.n	80095dc <_dtoa_r+0x36c>
 8009574:	4bad      	ldr	r3, [pc, #692]	@ (800982c <_dtoa_r+0x5bc>)
 8009576:	f007 020f 	and.w	r2, r7, #15
 800957a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800957e:	ed93 7b00 	vldr	d7, [r3]
 8009582:	05f8      	lsls	r0, r7, #23
 8009584:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009588:	ea4f 1427 	mov.w	r4, r7, asr #4
 800958c:	d516      	bpl.n	80095bc <_dtoa_r+0x34c>
 800958e:	4ba8      	ldr	r3, [pc, #672]	@ (8009830 <_dtoa_r+0x5c0>)
 8009590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009594:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009598:	f7f7 f980 	bl	800089c <__aeabi_ddiv>
 800959c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095a0:	f004 040f 	and.w	r4, r4, #15
 80095a4:	2603      	movs	r6, #3
 80095a6:	4da2      	ldr	r5, [pc, #648]	@ (8009830 <_dtoa_r+0x5c0>)
 80095a8:	b954      	cbnz	r4, 80095c0 <_dtoa_r+0x350>
 80095aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095b2:	f7f7 f973 	bl	800089c <__aeabi_ddiv>
 80095b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095ba:	e028      	b.n	800960e <_dtoa_r+0x39e>
 80095bc:	2602      	movs	r6, #2
 80095be:	e7f2      	b.n	80095a6 <_dtoa_r+0x336>
 80095c0:	07e1      	lsls	r1, r4, #31
 80095c2:	d508      	bpl.n	80095d6 <_dtoa_r+0x366>
 80095c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095cc:	f7f7 f83c 	bl	8000648 <__aeabi_dmul>
 80095d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095d4:	3601      	adds	r6, #1
 80095d6:	1064      	asrs	r4, r4, #1
 80095d8:	3508      	adds	r5, #8
 80095da:	e7e5      	b.n	80095a8 <_dtoa_r+0x338>
 80095dc:	f000 80d2 	beq.w	8009784 <_dtoa_r+0x514>
 80095e0:	427c      	negs	r4, r7
 80095e2:	4b92      	ldr	r3, [pc, #584]	@ (800982c <_dtoa_r+0x5bc>)
 80095e4:	4d92      	ldr	r5, [pc, #584]	@ (8009830 <_dtoa_r+0x5c0>)
 80095e6:	f004 020f 	and.w	r2, r4, #15
 80095ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095f6:	f7f7 f827 	bl	8000648 <__aeabi_dmul>
 80095fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095fe:	1124      	asrs	r4, r4, #4
 8009600:	2300      	movs	r3, #0
 8009602:	2602      	movs	r6, #2
 8009604:	2c00      	cmp	r4, #0
 8009606:	f040 80b2 	bne.w	800976e <_dtoa_r+0x4fe>
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1d3      	bne.n	80095b6 <_dtoa_r+0x346>
 800960e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009610:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 80b7 	beq.w	8009788 <_dtoa_r+0x518>
 800961a:	4b86      	ldr	r3, [pc, #536]	@ (8009834 <_dtoa_r+0x5c4>)
 800961c:	2200      	movs	r2, #0
 800961e:	4620      	mov	r0, r4
 8009620:	4629      	mov	r1, r5
 8009622:	f7f7 fa83 	bl	8000b2c <__aeabi_dcmplt>
 8009626:	2800      	cmp	r0, #0
 8009628:	f000 80ae 	beq.w	8009788 <_dtoa_r+0x518>
 800962c:	9b07      	ldr	r3, [sp, #28]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 80aa 	beq.w	8009788 <_dtoa_r+0x518>
 8009634:	9b00      	ldr	r3, [sp, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	dd37      	ble.n	80096aa <_dtoa_r+0x43a>
 800963a:	1e7b      	subs	r3, r7, #1
 800963c:	9304      	str	r3, [sp, #16]
 800963e:	4620      	mov	r0, r4
 8009640:	4b7d      	ldr	r3, [pc, #500]	@ (8009838 <_dtoa_r+0x5c8>)
 8009642:	2200      	movs	r2, #0
 8009644:	4629      	mov	r1, r5
 8009646:	f7f6 ffff 	bl	8000648 <__aeabi_dmul>
 800964a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800964e:	9c00      	ldr	r4, [sp, #0]
 8009650:	3601      	adds	r6, #1
 8009652:	4630      	mov	r0, r6
 8009654:	f7f6 ff8e 	bl	8000574 <__aeabi_i2d>
 8009658:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800965c:	f7f6 fff4 	bl	8000648 <__aeabi_dmul>
 8009660:	4b76      	ldr	r3, [pc, #472]	@ (800983c <_dtoa_r+0x5cc>)
 8009662:	2200      	movs	r2, #0
 8009664:	f7f6 fe3a 	bl	80002dc <__adddf3>
 8009668:	4605      	mov	r5, r0
 800966a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800966e:	2c00      	cmp	r4, #0
 8009670:	f040 808d 	bne.w	800978e <_dtoa_r+0x51e>
 8009674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009678:	4b71      	ldr	r3, [pc, #452]	@ (8009840 <_dtoa_r+0x5d0>)
 800967a:	2200      	movs	r2, #0
 800967c:	f7f6 fe2c 	bl	80002d8 <__aeabi_dsub>
 8009680:	4602      	mov	r2, r0
 8009682:	460b      	mov	r3, r1
 8009684:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009688:	462a      	mov	r2, r5
 800968a:	4633      	mov	r3, r6
 800968c:	f7f7 fa6c 	bl	8000b68 <__aeabi_dcmpgt>
 8009690:	2800      	cmp	r0, #0
 8009692:	f040 828b 	bne.w	8009bac <_dtoa_r+0x93c>
 8009696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800969a:	462a      	mov	r2, r5
 800969c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80096a0:	f7f7 fa44 	bl	8000b2c <__aeabi_dcmplt>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	f040 8128 	bne.w	80098fa <_dtoa_r+0x68a>
 80096aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80096ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80096b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f2c0 815a 	blt.w	800996e <_dtoa_r+0x6fe>
 80096ba:	2f0e      	cmp	r7, #14
 80096bc:	f300 8157 	bgt.w	800996e <_dtoa_r+0x6fe>
 80096c0:	4b5a      	ldr	r3, [pc, #360]	@ (800982c <_dtoa_r+0x5bc>)
 80096c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096c6:	ed93 7b00 	vldr	d7, [r3]
 80096ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	ed8d 7b00 	vstr	d7, [sp]
 80096d2:	da03      	bge.n	80096dc <_dtoa_r+0x46c>
 80096d4:	9b07      	ldr	r3, [sp, #28]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f340 8101 	ble.w	80098de <_dtoa_r+0x66e>
 80096dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096e0:	4656      	mov	r6, sl
 80096e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096e6:	4620      	mov	r0, r4
 80096e8:	4629      	mov	r1, r5
 80096ea:	f7f7 f8d7 	bl	800089c <__aeabi_ddiv>
 80096ee:	f7f7 fa5b 	bl	8000ba8 <__aeabi_d2iz>
 80096f2:	4680      	mov	r8, r0
 80096f4:	f7f6 ff3e 	bl	8000574 <__aeabi_i2d>
 80096f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096fc:	f7f6 ffa4 	bl	8000648 <__aeabi_dmul>
 8009700:	4602      	mov	r2, r0
 8009702:	460b      	mov	r3, r1
 8009704:	4620      	mov	r0, r4
 8009706:	4629      	mov	r1, r5
 8009708:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800970c:	f7f6 fde4 	bl	80002d8 <__aeabi_dsub>
 8009710:	f806 4b01 	strb.w	r4, [r6], #1
 8009714:	9d07      	ldr	r5, [sp, #28]
 8009716:	eba6 040a 	sub.w	r4, r6, sl
 800971a:	42a5      	cmp	r5, r4
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	f040 8117 	bne.w	8009952 <_dtoa_r+0x6e2>
 8009724:	f7f6 fdda 	bl	80002dc <__adddf3>
 8009728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800972c:	4604      	mov	r4, r0
 800972e:	460d      	mov	r5, r1
 8009730:	f7f7 fa1a 	bl	8000b68 <__aeabi_dcmpgt>
 8009734:	2800      	cmp	r0, #0
 8009736:	f040 80f9 	bne.w	800992c <_dtoa_r+0x6bc>
 800973a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800973e:	4620      	mov	r0, r4
 8009740:	4629      	mov	r1, r5
 8009742:	f7f7 f9e9 	bl	8000b18 <__aeabi_dcmpeq>
 8009746:	b118      	cbz	r0, 8009750 <_dtoa_r+0x4e0>
 8009748:	f018 0f01 	tst.w	r8, #1
 800974c:	f040 80ee 	bne.w	800992c <_dtoa_r+0x6bc>
 8009750:	4649      	mov	r1, r9
 8009752:	4658      	mov	r0, fp
 8009754:	f000 fc90 	bl	800a078 <_Bfree>
 8009758:	2300      	movs	r3, #0
 800975a:	7033      	strb	r3, [r6, #0]
 800975c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800975e:	3701      	adds	r7, #1
 8009760:	601f      	str	r7, [r3, #0]
 8009762:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 831d 	beq.w	8009da4 <_dtoa_r+0xb34>
 800976a:	601e      	str	r6, [r3, #0]
 800976c:	e31a      	b.n	8009da4 <_dtoa_r+0xb34>
 800976e:	07e2      	lsls	r2, r4, #31
 8009770:	d505      	bpl.n	800977e <_dtoa_r+0x50e>
 8009772:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009776:	f7f6 ff67 	bl	8000648 <__aeabi_dmul>
 800977a:	3601      	adds	r6, #1
 800977c:	2301      	movs	r3, #1
 800977e:	1064      	asrs	r4, r4, #1
 8009780:	3508      	adds	r5, #8
 8009782:	e73f      	b.n	8009604 <_dtoa_r+0x394>
 8009784:	2602      	movs	r6, #2
 8009786:	e742      	b.n	800960e <_dtoa_r+0x39e>
 8009788:	9c07      	ldr	r4, [sp, #28]
 800978a:	9704      	str	r7, [sp, #16]
 800978c:	e761      	b.n	8009652 <_dtoa_r+0x3e2>
 800978e:	4b27      	ldr	r3, [pc, #156]	@ (800982c <_dtoa_r+0x5bc>)
 8009790:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009792:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009796:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800979a:	4454      	add	r4, sl
 800979c:	2900      	cmp	r1, #0
 800979e:	d053      	beq.n	8009848 <_dtoa_r+0x5d8>
 80097a0:	4928      	ldr	r1, [pc, #160]	@ (8009844 <_dtoa_r+0x5d4>)
 80097a2:	2000      	movs	r0, #0
 80097a4:	f7f7 f87a 	bl	800089c <__aeabi_ddiv>
 80097a8:	4633      	mov	r3, r6
 80097aa:	462a      	mov	r2, r5
 80097ac:	f7f6 fd94 	bl	80002d8 <__aeabi_dsub>
 80097b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097b4:	4656      	mov	r6, sl
 80097b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097ba:	f7f7 f9f5 	bl	8000ba8 <__aeabi_d2iz>
 80097be:	4605      	mov	r5, r0
 80097c0:	f7f6 fed8 	bl	8000574 <__aeabi_i2d>
 80097c4:	4602      	mov	r2, r0
 80097c6:	460b      	mov	r3, r1
 80097c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097cc:	f7f6 fd84 	bl	80002d8 <__aeabi_dsub>
 80097d0:	3530      	adds	r5, #48	@ 0x30
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097da:	f806 5b01 	strb.w	r5, [r6], #1
 80097de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097e2:	f7f7 f9a3 	bl	8000b2c <__aeabi_dcmplt>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d171      	bne.n	80098ce <_dtoa_r+0x65e>
 80097ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097ee:	4911      	ldr	r1, [pc, #68]	@ (8009834 <_dtoa_r+0x5c4>)
 80097f0:	2000      	movs	r0, #0
 80097f2:	f7f6 fd71 	bl	80002d8 <__aeabi_dsub>
 80097f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097fa:	f7f7 f997 	bl	8000b2c <__aeabi_dcmplt>
 80097fe:	2800      	cmp	r0, #0
 8009800:	f040 8095 	bne.w	800992e <_dtoa_r+0x6be>
 8009804:	42a6      	cmp	r6, r4
 8009806:	f43f af50 	beq.w	80096aa <_dtoa_r+0x43a>
 800980a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800980e:	4b0a      	ldr	r3, [pc, #40]	@ (8009838 <_dtoa_r+0x5c8>)
 8009810:	2200      	movs	r2, #0
 8009812:	f7f6 ff19 	bl	8000648 <__aeabi_dmul>
 8009816:	4b08      	ldr	r3, [pc, #32]	@ (8009838 <_dtoa_r+0x5c8>)
 8009818:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800981c:	2200      	movs	r2, #0
 800981e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009822:	f7f6 ff11 	bl	8000648 <__aeabi_dmul>
 8009826:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800982a:	e7c4      	b.n	80097b6 <_dtoa_r+0x546>
 800982c:	0800d1a0 	.word	0x0800d1a0
 8009830:	0800d178 	.word	0x0800d178
 8009834:	3ff00000 	.word	0x3ff00000
 8009838:	40240000 	.word	0x40240000
 800983c:	401c0000 	.word	0x401c0000
 8009840:	40140000 	.word	0x40140000
 8009844:	3fe00000 	.word	0x3fe00000
 8009848:	4631      	mov	r1, r6
 800984a:	4628      	mov	r0, r5
 800984c:	f7f6 fefc 	bl	8000648 <__aeabi_dmul>
 8009850:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009854:	9415      	str	r4, [sp, #84]	@ 0x54
 8009856:	4656      	mov	r6, sl
 8009858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800985c:	f7f7 f9a4 	bl	8000ba8 <__aeabi_d2iz>
 8009860:	4605      	mov	r5, r0
 8009862:	f7f6 fe87 	bl	8000574 <__aeabi_i2d>
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800986e:	f7f6 fd33 	bl	80002d8 <__aeabi_dsub>
 8009872:	3530      	adds	r5, #48	@ 0x30
 8009874:	f806 5b01 	strb.w	r5, [r6], #1
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	42a6      	cmp	r6, r4
 800987e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009882:	f04f 0200 	mov.w	r2, #0
 8009886:	d124      	bne.n	80098d2 <_dtoa_r+0x662>
 8009888:	4bac      	ldr	r3, [pc, #688]	@ (8009b3c <_dtoa_r+0x8cc>)
 800988a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800988e:	f7f6 fd25 	bl	80002dc <__adddf3>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800989a:	f7f7 f965 	bl	8000b68 <__aeabi_dcmpgt>
 800989e:	2800      	cmp	r0, #0
 80098a0:	d145      	bne.n	800992e <_dtoa_r+0x6be>
 80098a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80098a6:	49a5      	ldr	r1, [pc, #660]	@ (8009b3c <_dtoa_r+0x8cc>)
 80098a8:	2000      	movs	r0, #0
 80098aa:	f7f6 fd15 	bl	80002d8 <__aeabi_dsub>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098b6:	f7f7 f939 	bl	8000b2c <__aeabi_dcmplt>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	f43f aef5 	beq.w	80096aa <_dtoa_r+0x43a>
 80098c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80098c2:	1e73      	subs	r3, r6, #1
 80098c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80098c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80098ca:	2b30      	cmp	r3, #48	@ 0x30
 80098cc:	d0f8      	beq.n	80098c0 <_dtoa_r+0x650>
 80098ce:	9f04      	ldr	r7, [sp, #16]
 80098d0:	e73e      	b.n	8009750 <_dtoa_r+0x4e0>
 80098d2:	4b9b      	ldr	r3, [pc, #620]	@ (8009b40 <_dtoa_r+0x8d0>)
 80098d4:	f7f6 feb8 	bl	8000648 <__aeabi_dmul>
 80098d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098dc:	e7bc      	b.n	8009858 <_dtoa_r+0x5e8>
 80098de:	d10c      	bne.n	80098fa <_dtoa_r+0x68a>
 80098e0:	4b98      	ldr	r3, [pc, #608]	@ (8009b44 <_dtoa_r+0x8d4>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098e8:	f7f6 feae 	bl	8000648 <__aeabi_dmul>
 80098ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098f0:	f7f7 f930 	bl	8000b54 <__aeabi_dcmpge>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	f000 8157 	beq.w	8009ba8 <_dtoa_r+0x938>
 80098fa:	2400      	movs	r4, #0
 80098fc:	4625      	mov	r5, r4
 80098fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009900:	43db      	mvns	r3, r3
 8009902:	9304      	str	r3, [sp, #16]
 8009904:	4656      	mov	r6, sl
 8009906:	2700      	movs	r7, #0
 8009908:	4621      	mov	r1, r4
 800990a:	4658      	mov	r0, fp
 800990c:	f000 fbb4 	bl	800a078 <_Bfree>
 8009910:	2d00      	cmp	r5, #0
 8009912:	d0dc      	beq.n	80098ce <_dtoa_r+0x65e>
 8009914:	b12f      	cbz	r7, 8009922 <_dtoa_r+0x6b2>
 8009916:	42af      	cmp	r7, r5
 8009918:	d003      	beq.n	8009922 <_dtoa_r+0x6b2>
 800991a:	4639      	mov	r1, r7
 800991c:	4658      	mov	r0, fp
 800991e:	f000 fbab 	bl	800a078 <_Bfree>
 8009922:	4629      	mov	r1, r5
 8009924:	4658      	mov	r0, fp
 8009926:	f000 fba7 	bl	800a078 <_Bfree>
 800992a:	e7d0      	b.n	80098ce <_dtoa_r+0x65e>
 800992c:	9704      	str	r7, [sp, #16]
 800992e:	4633      	mov	r3, r6
 8009930:	461e      	mov	r6, r3
 8009932:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009936:	2a39      	cmp	r2, #57	@ 0x39
 8009938:	d107      	bne.n	800994a <_dtoa_r+0x6da>
 800993a:	459a      	cmp	sl, r3
 800993c:	d1f8      	bne.n	8009930 <_dtoa_r+0x6c0>
 800993e:	9a04      	ldr	r2, [sp, #16]
 8009940:	3201      	adds	r2, #1
 8009942:	9204      	str	r2, [sp, #16]
 8009944:	2230      	movs	r2, #48	@ 0x30
 8009946:	f88a 2000 	strb.w	r2, [sl]
 800994a:	781a      	ldrb	r2, [r3, #0]
 800994c:	3201      	adds	r2, #1
 800994e:	701a      	strb	r2, [r3, #0]
 8009950:	e7bd      	b.n	80098ce <_dtoa_r+0x65e>
 8009952:	4b7b      	ldr	r3, [pc, #492]	@ (8009b40 <_dtoa_r+0x8d0>)
 8009954:	2200      	movs	r2, #0
 8009956:	f7f6 fe77 	bl	8000648 <__aeabi_dmul>
 800995a:	2200      	movs	r2, #0
 800995c:	2300      	movs	r3, #0
 800995e:	4604      	mov	r4, r0
 8009960:	460d      	mov	r5, r1
 8009962:	f7f7 f8d9 	bl	8000b18 <__aeabi_dcmpeq>
 8009966:	2800      	cmp	r0, #0
 8009968:	f43f aebb 	beq.w	80096e2 <_dtoa_r+0x472>
 800996c:	e6f0      	b.n	8009750 <_dtoa_r+0x4e0>
 800996e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009970:	2a00      	cmp	r2, #0
 8009972:	f000 80db 	beq.w	8009b2c <_dtoa_r+0x8bc>
 8009976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009978:	2a01      	cmp	r2, #1
 800997a:	f300 80bf 	bgt.w	8009afc <_dtoa_r+0x88c>
 800997e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009980:	2a00      	cmp	r2, #0
 8009982:	f000 80b7 	beq.w	8009af4 <_dtoa_r+0x884>
 8009986:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800998a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800998c:	4646      	mov	r6, r8
 800998e:	9a08      	ldr	r2, [sp, #32]
 8009990:	2101      	movs	r1, #1
 8009992:	441a      	add	r2, r3
 8009994:	4658      	mov	r0, fp
 8009996:	4498      	add	r8, r3
 8009998:	9208      	str	r2, [sp, #32]
 800999a:	f000 fc6b 	bl	800a274 <__i2b>
 800999e:	4605      	mov	r5, r0
 80099a0:	b15e      	cbz	r6, 80099ba <_dtoa_r+0x74a>
 80099a2:	9b08      	ldr	r3, [sp, #32]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	dd08      	ble.n	80099ba <_dtoa_r+0x74a>
 80099a8:	42b3      	cmp	r3, r6
 80099aa:	9a08      	ldr	r2, [sp, #32]
 80099ac:	bfa8      	it	ge
 80099ae:	4633      	movge	r3, r6
 80099b0:	eba8 0803 	sub.w	r8, r8, r3
 80099b4:	1af6      	subs	r6, r6, r3
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	9308      	str	r3, [sp, #32]
 80099ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099bc:	b1f3      	cbz	r3, 80099fc <_dtoa_r+0x78c>
 80099be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f000 80b7 	beq.w	8009b34 <_dtoa_r+0x8c4>
 80099c6:	b18c      	cbz	r4, 80099ec <_dtoa_r+0x77c>
 80099c8:	4629      	mov	r1, r5
 80099ca:	4622      	mov	r2, r4
 80099cc:	4658      	mov	r0, fp
 80099ce:	f000 fd11 	bl	800a3f4 <__pow5mult>
 80099d2:	464a      	mov	r2, r9
 80099d4:	4601      	mov	r1, r0
 80099d6:	4605      	mov	r5, r0
 80099d8:	4658      	mov	r0, fp
 80099da:	f000 fc61 	bl	800a2a0 <__multiply>
 80099de:	4649      	mov	r1, r9
 80099e0:	9004      	str	r0, [sp, #16]
 80099e2:	4658      	mov	r0, fp
 80099e4:	f000 fb48 	bl	800a078 <_Bfree>
 80099e8:	9b04      	ldr	r3, [sp, #16]
 80099ea:	4699      	mov	r9, r3
 80099ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ee:	1b1a      	subs	r2, r3, r4
 80099f0:	d004      	beq.n	80099fc <_dtoa_r+0x78c>
 80099f2:	4649      	mov	r1, r9
 80099f4:	4658      	mov	r0, fp
 80099f6:	f000 fcfd 	bl	800a3f4 <__pow5mult>
 80099fa:	4681      	mov	r9, r0
 80099fc:	2101      	movs	r1, #1
 80099fe:	4658      	mov	r0, fp
 8009a00:	f000 fc38 	bl	800a274 <__i2b>
 8009a04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a06:	4604      	mov	r4, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 81cf 	beq.w	8009dac <_dtoa_r+0xb3c>
 8009a0e:	461a      	mov	r2, r3
 8009a10:	4601      	mov	r1, r0
 8009a12:	4658      	mov	r0, fp
 8009a14:	f000 fcee 	bl	800a3f4 <__pow5mult>
 8009a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	f300 8095 	bgt.w	8009b4c <_dtoa_r+0x8dc>
 8009a22:	9b02      	ldr	r3, [sp, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f040 8087 	bne.w	8009b38 <_dtoa_r+0x8c8>
 8009a2a:	9b03      	ldr	r3, [sp, #12]
 8009a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f040 8089 	bne.w	8009b48 <_dtoa_r+0x8d8>
 8009a36:	9b03      	ldr	r3, [sp, #12]
 8009a38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a3c:	0d1b      	lsrs	r3, r3, #20
 8009a3e:	051b      	lsls	r3, r3, #20
 8009a40:	b12b      	cbz	r3, 8009a4e <_dtoa_r+0x7de>
 8009a42:	9b08      	ldr	r3, [sp, #32]
 8009a44:	3301      	adds	r3, #1
 8009a46:	9308      	str	r3, [sp, #32]
 8009a48:	f108 0801 	add.w	r8, r8, #1
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	f000 81b0 	beq.w	8009db8 <_dtoa_r+0xb48>
 8009a58:	6923      	ldr	r3, [r4, #16]
 8009a5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a5e:	6918      	ldr	r0, [r3, #16]
 8009a60:	f000 fbbc 	bl	800a1dc <__hi0bits>
 8009a64:	f1c0 0020 	rsb	r0, r0, #32
 8009a68:	9b08      	ldr	r3, [sp, #32]
 8009a6a:	4418      	add	r0, r3
 8009a6c:	f010 001f 	ands.w	r0, r0, #31
 8009a70:	d077      	beq.n	8009b62 <_dtoa_r+0x8f2>
 8009a72:	f1c0 0320 	rsb	r3, r0, #32
 8009a76:	2b04      	cmp	r3, #4
 8009a78:	dd6b      	ble.n	8009b52 <_dtoa_r+0x8e2>
 8009a7a:	9b08      	ldr	r3, [sp, #32]
 8009a7c:	f1c0 001c 	rsb	r0, r0, #28
 8009a80:	4403      	add	r3, r0
 8009a82:	4480      	add	r8, r0
 8009a84:	4406      	add	r6, r0
 8009a86:	9308      	str	r3, [sp, #32]
 8009a88:	f1b8 0f00 	cmp.w	r8, #0
 8009a8c:	dd05      	ble.n	8009a9a <_dtoa_r+0x82a>
 8009a8e:	4649      	mov	r1, r9
 8009a90:	4642      	mov	r2, r8
 8009a92:	4658      	mov	r0, fp
 8009a94:	f000 fd08 	bl	800a4a8 <__lshift>
 8009a98:	4681      	mov	r9, r0
 8009a9a:	9b08      	ldr	r3, [sp, #32]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	dd05      	ble.n	8009aac <_dtoa_r+0x83c>
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	4658      	mov	r0, fp
 8009aa6:	f000 fcff 	bl	800a4a8 <__lshift>
 8009aaa:	4604      	mov	r4, r0
 8009aac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d059      	beq.n	8009b66 <_dtoa_r+0x8f6>
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	4648      	mov	r0, r9
 8009ab6:	f000 fd63 	bl	800a580 <__mcmp>
 8009aba:	2800      	cmp	r0, #0
 8009abc:	da53      	bge.n	8009b66 <_dtoa_r+0x8f6>
 8009abe:	1e7b      	subs	r3, r7, #1
 8009ac0:	9304      	str	r3, [sp, #16]
 8009ac2:	4649      	mov	r1, r9
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	220a      	movs	r2, #10
 8009ac8:	4658      	mov	r0, fp
 8009aca:	f000 faf7 	bl	800a0bc <__multadd>
 8009ace:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ad0:	4681      	mov	r9, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 8172 	beq.w	8009dbc <_dtoa_r+0xb4c>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4629      	mov	r1, r5
 8009adc:	220a      	movs	r2, #10
 8009ade:	4658      	mov	r0, fp
 8009ae0:	f000 faec 	bl	800a0bc <__multadd>
 8009ae4:	9b00      	ldr	r3, [sp, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	4605      	mov	r5, r0
 8009aea:	dc67      	bgt.n	8009bbc <_dtoa_r+0x94c>
 8009aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	dc41      	bgt.n	8009b76 <_dtoa_r+0x906>
 8009af2:	e063      	b.n	8009bbc <_dtoa_r+0x94c>
 8009af4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009af6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009afa:	e746      	b.n	800998a <_dtoa_r+0x71a>
 8009afc:	9b07      	ldr	r3, [sp, #28]
 8009afe:	1e5c      	subs	r4, r3, #1
 8009b00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b02:	42a3      	cmp	r3, r4
 8009b04:	bfbf      	itttt	lt
 8009b06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009b08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009b0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009b0c:	1ae3      	sublt	r3, r4, r3
 8009b0e:	bfb4      	ite	lt
 8009b10:	18d2      	addlt	r2, r2, r3
 8009b12:	1b1c      	subge	r4, r3, r4
 8009b14:	9b07      	ldr	r3, [sp, #28]
 8009b16:	bfbc      	itt	lt
 8009b18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009b1a:	2400      	movlt	r4, #0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	bfb5      	itete	lt
 8009b20:	eba8 0603 	sublt.w	r6, r8, r3
 8009b24:	9b07      	ldrge	r3, [sp, #28]
 8009b26:	2300      	movlt	r3, #0
 8009b28:	4646      	movge	r6, r8
 8009b2a:	e730      	b.n	800998e <_dtoa_r+0x71e>
 8009b2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009b30:	4646      	mov	r6, r8
 8009b32:	e735      	b.n	80099a0 <_dtoa_r+0x730>
 8009b34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b36:	e75c      	b.n	80099f2 <_dtoa_r+0x782>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	e788      	b.n	8009a4e <_dtoa_r+0x7de>
 8009b3c:	3fe00000 	.word	0x3fe00000
 8009b40:	40240000 	.word	0x40240000
 8009b44:	40140000 	.word	0x40140000
 8009b48:	9b02      	ldr	r3, [sp, #8]
 8009b4a:	e780      	b.n	8009a4e <_dtoa_r+0x7de>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b50:	e782      	b.n	8009a58 <_dtoa_r+0x7e8>
 8009b52:	d099      	beq.n	8009a88 <_dtoa_r+0x818>
 8009b54:	9a08      	ldr	r2, [sp, #32]
 8009b56:	331c      	adds	r3, #28
 8009b58:	441a      	add	r2, r3
 8009b5a:	4498      	add	r8, r3
 8009b5c:	441e      	add	r6, r3
 8009b5e:	9208      	str	r2, [sp, #32]
 8009b60:	e792      	b.n	8009a88 <_dtoa_r+0x818>
 8009b62:	4603      	mov	r3, r0
 8009b64:	e7f6      	b.n	8009b54 <_dtoa_r+0x8e4>
 8009b66:	9b07      	ldr	r3, [sp, #28]
 8009b68:	9704      	str	r7, [sp, #16]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	dc20      	bgt.n	8009bb0 <_dtoa_r+0x940>
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	dd1e      	ble.n	8009bb4 <_dtoa_r+0x944>
 8009b76:	9b00      	ldr	r3, [sp, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f47f aec0 	bne.w	80098fe <_dtoa_r+0x68e>
 8009b7e:	4621      	mov	r1, r4
 8009b80:	2205      	movs	r2, #5
 8009b82:	4658      	mov	r0, fp
 8009b84:	f000 fa9a 	bl	800a0bc <__multadd>
 8009b88:	4601      	mov	r1, r0
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	4648      	mov	r0, r9
 8009b8e:	f000 fcf7 	bl	800a580 <__mcmp>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	f77f aeb3 	ble.w	80098fe <_dtoa_r+0x68e>
 8009b98:	4656      	mov	r6, sl
 8009b9a:	2331      	movs	r3, #49	@ 0x31
 8009b9c:	f806 3b01 	strb.w	r3, [r6], #1
 8009ba0:	9b04      	ldr	r3, [sp, #16]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	9304      	str	r3, [sp, #16]
 8009ba6:	e6ae      	b.n	8009906 <_dtoa_r+0x696>
 8009ba8:	9c07      	ldr	r4, [sp, #28]
 8009baa:	9704      	str	r7, [sp, #16]
 8009bac:	4625      	mov	r5, r4
 8009bae:	e7f3      	b.n	8009b98 <_dtoa_r+0x928>
 8009bb0:	9b07      	ldr	r3, [sp, #28]
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 8104 	beq.w	8009dc4 <_dtoa_r+0xb54>
 8009bbc:	2e00      	cmp	r6, #0
 8009bbe:	dd05      	ble.n	8009bcc <_dtoa_r+0x95c>
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	4632      	mov	r2, r6
 8009bc4:	4658      	mov	r0, fp
 8009bc6:	f000 fc6f 	bl	800a4a8 <__lshift>
 8009bca:	4605      	mov	r5, r0
 8009bcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d05a      	beq.n	8009c88 <_dtoa_r+0xa18>
 8009bd2:	6869      	ldr	r1, [r5, #4]
 8009bd4:	4658      	mov	r0, fp
 8009bd6:	f000 fa0f 	bl	8009ff8 <_Balloc>
 8009bda:	4606      	mov	r6, r0
 8009bdc:	b928      	cbnz	r0, 8009bea <_dtoa_r+0x97a>
 8009bde:	4b84      	ldr	r3, [pc, #528]	@ (8009df0 <_dtoa_r+0xb80>)
 8009be0:	4602      	mov	r2, r0
 8009be2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009be6:	f7ff bb5a 	b.w	800929e <_dtoa_r+0x2e>
 8009bea:	692a      	ldr	r2, [r5, #16]
 8009bec:	3202      	adds	r2, #2
 8009bee:	0092      	lsls	r2, r2, #2
 8009bf0:	f105 010c 	add.w	r1, r5, #12
 8009bf4:	300c      	adds	r0, #12
 8009bf6:	f001 ff75 	bl	800bae4 <memcpy>
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4658      	mov	r0, fp
 8009c00:	f000 fc52 	bl	800a4a8 <__lshift>
 8009c04:	f10a 0301 	add.w	r3, sl, #1
 8009c08:	9307      	str	r3, [sp, #28]
 8009c0a:	9b00      	ldr	r3, [sp, #0]
 8009c0c:	4453      	add	r3, sl
 8009c0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c10:	9b02      	ldr	r3, [sp, #8]
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	462f      	mov	r7, r5
 8009c18:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	9b07      	ldr	r3, [sp, #28]
 8009c1e:	4621      	mov	r1, r4
 8009c20:	3b01      	subs	r3, #1
 8009c22:	4648      	mov	r0, r9
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	f7ff fa9b 	bl	8009160 <quorem>
 8009c2a:	4639      	mov	r1, r7
 8009c2c:	9002      	str	r0, [sp, #8]
 8009c2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c32:	4648      	mov	r0, r9
 8009c34:	f000 fca4 	bl	800a580 <__mcmp>
 8009c38:	462a      	mov	r2, r5
 8009c3a:	9008      	str	r0, [sp, #32]
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	4658      	mov	r0, fp
 8009c40:	f000 fcba 	bl	800a5b8 <__mdiff>
 8009c44:	68c2      	ldr	r2, [r0, #12]
 8009c46:	4606      	mov	r6, r0
 8009c48:	bb02      	cbnz	r2, 8009c8c <_dtoa_r+0xa1c>
 8009c4a:	4601      	mov	r1, r0
 8009c4c:	4648      	mov	r0, r9
 8009c4e:	f000 fc97 	bl	800a580 <__mcmp>
 8009c52:	4602      	mov	r2, r0
 8009c54:	4631      	mov	r1, r6
 8009c56:	4658      	mov	r0, fp
 8009c58:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c5a:	f000 fa0d 	bl	800a078 <_Bfree>
 8009c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c62:	9e07      	ldr	r6, [sp, #28]
 8009c64:	ea43 0102 	orr.w	r1, r3, r2
 8009c68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c6a:	4319      	orrs	r1, r3
 8009c6c:	d110      	bne.n	8009c90 <_dtoa_r+0xa20>
 8009c6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c72:	d029      	beq.n	8009cc8 <_dtoa_r+0xa58>
 8009c74:	9b08      	ldr	r3, [sp, #32]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	dd02      	ble.n	8009c80 <_dtoa_r+0xa10>
 8009c7a:	9b02      	ldr	r3, [sp, #8]
 8009c7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009c80:	9b00      	ldr	r3, [sp, #0]
 8009c82:	f883 8000 	strb.w	r8, [r3]
 8009c86:	e63f      	b.n	8009908 <_dtoa_r+0x698>
 8009c88:	4628      	mov	r0, r5
 8009c8a:	e7bb      	b.n	8009c04 <_dtoa_r+0x994>
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	e7e1      	b.n	8009c54 <_dtoa_r+0x9e4>
 8009c90:	9b08      	ldr	r3, [sp, #32]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	db04      	blt.n	8009ca0 <_dtoa_r+0xa30>
 8009c96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c98:	430b      	orrs	r3, r1
 8009c9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c9c:	430b      	orrs	r3, r1
 8009c9e:	d120      	bne.n	8009ce2 <_dtoa_r+0xa72>
 8009ca0:	2a00      	cmp	r2, #0
 8009ca2:	dded      	ble.n	8009c80 <_dtoa_r+0xa10>
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	4658      	mov	r0, fp
 8009caa:	f000 fbfd 	bl	800a4a8 <__lshift>
 8009cae:	4621      	mov	r1, r4
 8009cb0:	4681      	mov	r9, r0
 8009cb2:	f000 fc65 	bl	800a580 <__mcmp>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	dc03      	bgt.n	8009cc2 <_dtoa_r+0xa52>
 8009cba:	d1e1      	bne.n	8009c80 <_dtoa_r+0xa10>
 8009cbc:	f018 0f01 	tst.w	r8, #1
 8009cc0:	d0de      	beq.n	8009c80 <_dtoa_r+0xa10>
 8009cc2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009cc6:	d1d8      	bne.n	8009c7a <_dtoa_r+0xa0a>
 8009cc8:	9a00      	ldr	r2, [sp, #0]
 8009cca:	2339      	movs	r3, #57	@ 0x39
 8009ccc:	7013      	strb	r3, [r2, #0]
 8009cce:	4633      	mov	r3, r6
 8009cd0:	461e      	mov	r6, r3
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009cd8:	2a39      	cmp	r2, #57	@ 0x39
 8009cda:	d052      	beq.n	8009d82 <_dtoa_r+0xb12>
 8009cdc:	3201      	adds	r2, #1
 8009cde:	701a      	strb	r2, [r3, #0]
 8009ce0:	e612      	b.n	8009908 <_dtoa_r+0x698>
 8009ce2:	2a00      	cmp	r2, #0
 8009ce4:	dd07      	ble.n	8009cf6 <_dtoa_r+0xa86>
 8009ce6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009cea:	d0ed      	beq.n	8009cc8 <_dtoa_r+0xa58>
 8009cec:	9a00      	ldr	r2, [sp, #0]
 8009cee:	f108 0301 	add.w	r3, r8, #1
 8009cf2:	7013      	strb	r3, [r2, #0]
 8009cf4:	e608      	b.n	8009908 <_dtoa_r+0x698>
 8009cf6:	9b07      	ldr	r3, [sp, #28]
 8009cf8:	9a07      	ldr	r2, [sp, #28]
 8009cfa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009cfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d028      	beq.n	8009d56 <_dtoa_r+0xae6>
 8009d04:	4649      	mov	r1, r9
 8009d06:	2300      	movs	r3, #0
 8009d08:	220a      	movs	r2, #10
 8009d0a:	4658      	mov	r0, fp
 8009d0c:	f000 f9d6 	bl	800a0bc <__multadd>
 8009d10:	42af      	cmp	r7, r5
 8009d12:	4681      	mov	r9, r0
 8009d14:	f04f 0300 	mov.w	r3, #0
 8009d18:	f04f 020a 	mov.w	r2, #10
 8009d1c:	4639      	mov	r1, r7
 8009d1e:	4658      	mov	r0, fp
 8009d20:	d107      	bne.n	8009d32 <_dtoa_r+0xac2>
 8009d22:	f000 f9cb 	bl	800a0bc <__multadd>
 8009d26:	4607      	mov	r7, r0
 8009d28:	4605      	mov	r5, r0
 8009d2a:	9b07      	ldr	r3, [sp, #28]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	9307      	str	r3, [sp, #28]
 8009d30:	e774      	b.n	8009c1c <_dtoa_r+0x9ac>
 8009d32:	f000 f9c3 	bl	800a0bc <__multadd>
 8009d36:	4629      	mov	r1, r5
 8009d38:	4607      	mov	r7, r0
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	220a      	movs	r2, #10
 8009d3e:	4658      	mov	r0, fp
 8009d40:	f000 f9bc 	bl	800a0bc <__multadd>
 8009d44:	4605      	mov	r5, r0
 8009d46:	e7f0      	b.n	8009d2a <_dtoa_r+0xaba>
 8009d48:	9b00      	ldr	r3, [sp, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	bfcc      	ite	gt
 8009d4e:	461e      	movgt	r6, r3
 8009d50:	2601      	movle	r6, #1
 8009d52:	4456      	add	r6, sl
 8009d54:	2700      	movs	r7, #0
 8009d56:	4649      	mov	r1, r9
 8009d58:	2201      	movs	r2, #1
 8009d5a:	4658      	mov	r0, fp
 8009d5c:	f000 fba4 	bl	800a4a8 <__lshift>
 8009d60:	4621      	mov	r1, r4
 8009d62:	4681      	mov	r9, r0
 8009d64:	f000 fc0c 	bl	800a580 <__mcmp>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	dcb0      	bgt.n	8009cce <_dtoa_r+0xa5e>
 8009d6c:	d102      	bne.n	8009d74 <_dtoa_r+0xb04>
 8009d6e:	f018 0f01 	tst.w	r8, #1
 8009d72:	d1ac      	bne.n	8009cce <_dtoa_r+0xa5e>
 8009d74:	4633      	mov	r3, r6
 8009d76:	461e      	mov	r6, r3
 8009d78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d7c:	2a30      	cmp	r2, #48	@ 0x30
 8009d7e:	d0fa      	beq.n	8009d76 <_dtoa_r+0xb06>
 8009d80:	e5c2      	b.n	8009908 <_dtoa_r+0x698>
 8009d82:	459a      	cmp	sl, r3
 8009d84:	d1a4      	bne.n	8009cd0 <_dtoa_r+0xa60>
 8009d86:	9b04      	ldr	r3, [sp, #16]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	9304      	str	r3, [sp, #16]
 8009d8c:	2331      	movs	r3, #49	@ 0x31
 8009d8e:	f88a 3000 	strb.w	r3, [sl]
 8009d92:	e5b9      	b.n	8009908 <_dtoa_r+0x698>
 8009d94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009df4 <_dtoa_r+0xb84>
 8009d9a:	b11b      	cbz	r3, 8009da4 <_dtoa_r+0xb34>
 8009d9c:	f10a 0308 	add.w	r3, sl, #8
 8009da0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009da2:	6013      	str	r3, [r2, #0]
 8009da4:	4650      	mov	r0, sl
 8009da6:	b019      	add	sp, #100	@ 0x64
 8009da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	f77f ae37 	ble.w	8009a22 <_dtoa_r+0x7b2>
 8009db4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009db6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009db8:	2001      	movs	r0, #1
 8009dba:	e655      	b.n	8009a68 <_dtoa_r+0x7f8>
 8009dbc:	9b00      	ldr	r3, [sp, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f77f aed6 	ble.w	8009b70 <_dtoa_r+0x900>
 8009dc4:	4656      	mov	r6, sl
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	4648      	mov	r0, r9
 8009dca:	f7ff f9c9 	bl	8009160 <quorem>
 8009dce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009dd2:	f806 8b01 	strb.w	r8, [r6], #1
 8009dd6:	9b00      	ldr	r3, [sp, #0]
 8009dd8:	eba6 020a 	sub.w	r2, r6, sl
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	ddb3      	ble.n	8009d48 <_dtoa_r+0xad8>
 8009de0:	4649      	mov	r1, r9
 8009de2:	2300      	movs	r3, #0
 8009de4:	220a      	movs	r2, #10
 8009de6:	4658      	mov	r0, fp
 8009de8:	f000 f968 	bl	800a0bc <__multadd>
 8009dec:	4681      	mov	r9, r0
 8009dee:	e7ea      	b.n	8009dc6 <_dtoa_r+0xb56>
 8009df0:	0800d0fd 	.word	0x0800d0fd
 8009df4:	0800d081 	.word	0x0800d081

08009df8 <_free_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	2900      	cmp	r1, #0
 8009dfe:	d041      	beq.n	8009e84 <_free_r+0x8c>
 8009e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e04:	1f0c      	subs	r4, r1, #4
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	bfb8      	it	lt
 8009e0a:	18e4      	addlt	r4, r4, r3
 8009e0c:	f000 f8e8 	bl	8009fe0 <__malloc_lock>
 8009e10:	4a1d      	ldr	r2, [pc, #116]	@ (8009e88 <_free_r+0x90>)
 8009e12:	6813      	ldr	r3, [r2, #0]
 8009e14:	b933      	cbnz	r3, 8009e24 <_free_r+0x2c>
 8009e16:	6063      	str	r3, [r4, #4]
 8009e18:	6014      	str	r4, [r2, #0]
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e20:	f000 b8e4 	b.w	8009fec <__malloc_unlock>
 8009e24:	42a3      	cmp	r3, r4
 8009e26:	d908      	bls.n	8009e3a <_free_r+0x42>
 8009e28:	6820      	ldr	r0, [r4, #0]
 8009e2a:	1821      	adds	r1, r4, r0
 8009e2c:	428b      	cmp	r3, r1
 8009e2e:	bf01      	itttt	eq
 8009e30:	6819      	ldreq	r1, [r3, #0]
 8009e32:	685b      	ldreq	r3, [r3, #4]
 8009e34:	1809      	addeq	r1, r1, r0
 8009e36:	6021      	streq	r1, [r4, #0]
 8009e38:	e7ed      	b.n	8009e16 <_free_r+0x1e>
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	b10b      	cbz	r3, 8009e44 <_free_r+0x4c>
 8009e40:	42a3      	cmp	r3, r4
 8009e42:	d9fa      	bls.n	8009e3a <_free_r+0x42>
 8009e44:	6811      	ldr	r1, [r2, #0]
 8009e46:	1850      	adds	r0, r2, r1
 8009e48:	42a0      	cmp	r0, r4
 8009e4a:	d10b      	bne.n	8009e64 <_free_r+0x6c>
 8009e4c:	6820      	ldr	r0, [r4, #0]
 8009e4e:	4401      	add	r1, r0
 8009e50:	1850      	adds	r0, r2, r1
 8009e52:	4283      	cmp	r3, r0
 8009e54:	6011      	str	r1, [r2, #0]
 8009e56:	d1e0      	bne.n	8009e1a <_free_r+0x22>
 8009e58:	6818      	ldr	r0, [r3, #0]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	6053      	str	r3, [r2, #4]
 8009e5e:	4408      	add	r0, r1
 8009e60:	6010      	str	r0, [r2, #0]
 8009e62:	e7da      	b.n	8009e1a <_free_r+0x22>
 8009e64:	d902      	bls.n	8009e6c <_free_r+0x74>
 8009e66:	230c      	movs	r3, #12
 8009e68:	602b      	str	r3, [r5, #0]
 8009e6a:	e7d6      	b.n	8009e1a <_free_r+0x22>
 8009e6c:	6820      	ldr	r0, [r4, #0]
 8009e6e:	1821      	adds	r1, r4, r0
 8009e70:	428b      	cmp	r3, r1
 8009e72:	bf04      	itt	eq
 8009e74:	6819      	ldreq	r1, [r3, #0]
 8009e76:	685b      	ldreq	r3, [r3, #4]
 8009e78:	6063      	str	r3, [r4, #4]
 8009e7a:	bf04      	itt	eq
 8009e7c:	1809      	addeq	r1, r1, r0
 8009e7e:	6021      	streq	r1, [r4, #0]
 8009e80:	6054      	str	r4, [r2, #4]
 8009e82:	e7ca      	b.n	8009e1a <_free_r+0x22>
 8009e84:	bd38      	pop	{r3, r4, r5, pc}
 8009e86:	bf00      	nop
 8009e88:	200086ec 	.word	0x200086ec

08009e8c <malloc>:
 8009e8c:	4b02      	ldr	r3, [pc, #8]	@ (8009e98 <malloc+0xc>)
 8009e8e:	4601      	mov	r1, r0
 8009e90:	6818      	ldr	r0, [r3, #0]
 8009e92:	f000 b825 	b.w	8009ee0 <_malloc_r>
 8009e96:	bf00      	nop
 8009e98:	2000003c 	.word	0x2000003c

08009e9c <sbrk_aligned>:
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	4e0f      	ldr	r6, [pc, #60]	@ (8009edc <sbrk_aligned+0x40>)
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	6831      	ldr	r1, [r6, #0]
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	b911      	cbnz	r1, 8009eae <sbrk_aligned+0x12>
 8009ea8:	f001 fe0c 	bl	800bac4 <_sbrk_r>
 8009eac:	6030      	str	r0, [r6, #0]
 8009eae:	4621      	mov	r1, r4
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	f001 fe07 	bl	800bac4 <_sbrk_r>
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	d103      	bne.n	8009ec2 <sbrk_aligned+0x26>
 8009eba:	f04f 34ff 	mov.w	r4, #4294967295
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	bd70      	pop	{r4, r5, r6, pc}
 8009ec2:	1cc4      	adds	r4, r0, #3
 8009ec4:	f024 0403 	bic.w	r4, r4, #3
 8009ec8:	42a0      	cmp	r0, r4
 8009eca:	d0f8      	beq.n	8009ebe <sbrk_aligned+0x22>
 8009ecc:	1a21      	subs	r1, r4, r0
 8009ece:	4628      	mov	r0, r5
 8009ed0:	f001 fdf8 	bl	800bac4 <_sbrk_r>
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	d1f2      	bne.n	8009ebe <sbrk_aligned+0x22>
 8009ed8:	e7ef      	b.n	8009eba <sbrk_aligned+0x1e>
 8009eda:	bf00      	nop
 8009edc:	200086e8 	.word	0x200086e8

08009ee0 <_malloc_r>:
 8009ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ee4:	1ccd      	adds	r5, r1, #3
 8009ee6:	f025 0503 	bic.w	r5, r5, #3
 8009eea:	3508      	adds	r5, #8
 8009eec:	2d0c      	cmp	r5, #12
 8009eee:	bf38      	it	cc
 8009ef0:	250c      	movcc	r5, #12
 8009ef2:	2d00      	cmp	r5, #0
 8009ef4:	4606      	mov	r6, r0
 8009ef6:	db01      	blt.n	8009efc <_malloc_r+0x1c>
 8009ef8:	42a9      	cmp	r1, r5
 8009efa:	d904      	bls.n	8009f06 <_malloc_r+0x26>
 8009efc:	230c      	movs	r3, #12
 8009efe:	6033      	str	r3, [r6, #0]
 8009f00:	2000      	movs	r0, #0
 8009f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009fdc <_malloc_r+0xfc>
 8009f0a:	f000 f869 	bl	8009fe0 <__malloc_lock>
 8009f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f12:	461c      	mov	r4, r3
 8009f14:	bb44      	cbnz	r4, 8009f68 <_malloc_r+0x88>
 8009f16:	4629      	mov	r1, r5
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f7ff ffbf 	bl	8009e9c <sbrk_aligned>
 8009f1e:	1c43      	adds	r3, r0, #1
 8009f20:	4604      	mov	r4, r0
 8009f22:	d158      	bne.n	8009fd6 <_malloc_r+0xf6>
 8009f24:	f8d8 4000 	ldr.w	r4, [r8]
 8009f28:	4627      	mov	r7, r4
 8009f2a:	2f00      	cmp	r7, #0
 8009f2c:	d143      	bne.n	8009fb6 <_malloc_r+0xd6>
 8009f2e:	2c00      	cmp	r4, #0
 8009f30:	d04b      	beq.n	8009fca <_malloc_r+0xea>
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	4639      	mov	r1, r7
 8009f36:	4630      	mov	r0, r6
 8009f38:	eb04 0903 	add.w	r9, r4, r3
 8009f3c:	f001 fdc2 	bl	800bac4 <_sbrk_r>
 8009f40:	4581      	cmp	r9, r0
 8009f42:	d142      	bne.n	8009fca <_malloc_r+0xea>
 8009f44:	6821      	ldr	r1, [r4, #0]
 8009f46:	1a6d      	subs	r5, r5, r1
 8009f48:	4629      	mov	r1, r5
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f7ff ffa6 	bl	8009e9c <sbrk_aligned>
 8009f50:	3001      	adds	r0, #1
 8009f52:	d03a      	beq.n	8009fca <_malloc_r+0xea>
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	442b      	add	r3, r5
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	bb62      	cbnz	r2, 8009fbc <_malloc_r+0xdc>
 8009f62:	f8c8 7000 	str.w	r7, [r8]
 8009f66:	e00f      	b.n	8009f88 <_malloc_r+0xa8>
 8009f68:	6822      	ldr	r2, [r4, #0]
 8009f6a:	1b52      	subs	r2, r2, r5
 8009f6c:	d420      	bmi.n	8009fb0 <_malloc_r+0xd0>
 8009f6e:	2a0b      	cmp	r2, #11
 8009f70:	d917      	bls.n	8009fa2 <_malloc_r+0xc2>
 8009f72:	1961      	adds	r1, r4, r5
 8009f74:	42a3      	cmp	r3, r4
 8009f76:	6025      	str	r5, [r4, #0]
 8009f78:	bf18      	it	ne
 8009f7a:	6059      	strne	r1, [r3, #4]
 8009f7c:	6863      	ldr	r3, [r4, #4]
 8009f7e:	bf08      	it	eq
 8009f80:	f8c8 1000 	streq.w	r1, [r8]
 8009f84:	5162      	str	r2, [r4, r5]
 8009f86:	604b      	str	r3, [r1, #4]
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f000 f82f 	bl	8009fec <__malloc_unlock>
 8009f8e:	f104 000b 	add.w	r0, r4, #11
 8009f92:	1d23      	adds	r3, r4, #4
 8009f94:	f020 0007 	bic.w	r0, r0, #7
 8009f98:	1ac2      	subs	r2, r0, r3
 8009f9a:	bf1c      	itt	ne
 8009f9c:	1a1b      	subne	r3, r3, r0
 8009f9e:	50a3      	strne	r3, [r4, r2]
 8009fa0:	e7af      	b.n	8009f02 <_malloc_r+0x22>
 8009fa2:	6862      	ldr	r2, [r4, #4]
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	bf0c      	ite	eq
 8009fa8:	f8c8 2000 	streq.w	r2, [r8]
 8009fac:	605a      	strne	r2, [r3, #4]
 8009fae:	e7eb      	b.n	8009f88 <_malloc_r+0xa8>
 8009fb0:	4623      	mov	r3, r4
 8009fb2:	6864      	ldr	r4, [r4, #4]
 8009fb4:	e7ae      	b.n	8009f14 <_malloc_r+0x34>
 8009fb6:	463c      	mov	r4, r7
 8009fb8:	687f      	ldr	r7, [r7, #4]
 8009fba:	e7b6      	b.n	8009f2a <_malloc_r+0x4a>
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	d1fb      	bne.n	8009fbc <_malloc_r+0xdc>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	6053      	str	r3, [r2, #4]
 8009fc8:	e7de      	b.n	8009f88 <_malloc_r+0xa8>
 8009fca:	230c      	movs	r3, #12
 8009fcc:	6033      	str	r3, [r6, #0]
 8009fce:	4630      	mov	r0, r6
 8009fd0:	f000 f80c 	bl	8009fec <__malloc_unlock>
 8009fd4:	e794      	b.n	8009f00 <_malloc_r+0x20>
 8009fd6:	6005      	str	r5, [r0, #0]
 8009fd8:	e7d6      	b.n	8009f88 <_malloc_r+0xa8>
 8009fda:	bf00      	nop
 8009fdc:	200086ec 	.word	0x200086ec

08009fe0 <__malloc_lock>:
 8009fe0:	4801      	ldr	r0, [pc, #4]	@ (8009fe8 <__malloc_lock+0x8>)
 8009fe2:	f7ff b8b4 	b.w	800914e <__retarget_lock_acquire_recursive>
 8009fe6:	bf00      	nop
 8009fe8:	200086e4 	.word	0x200086e4

08009fec <__malloc_unlock>:
 8009fec:	4801      	ldr	r0, [pc, #4]	@ (8009ff4 <__malloc_unlock+0x8>)
 8009fee:	f7ff b8af 	b.w	8009150 <__retarget_lock_release_recursive>
 8009ff2:	bf00      	nop
 8009ff4:	200086e4 	.word	0x200086e4

08009ff8 <_Balloc>:
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	69c6      	ldr	r6, [r0, #28]
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	460d      	mov	r5, r1
 800a000:	b976      	cbnz	r6, 800a020 <_Balloc+0x28>
 800a002:	2010      	movs	r0, #16
 800a004:	f7ff ff42 	bl	8009e8c <malloc>
 800a008:	4602      	mov	r2, r0
 800a00a:	61e0      	str	r0, [r4, #28]
 800a00c:	b920      	cbnz	r0, 800a018 <_Balloc+0x20>
 800a00e:	4b18      	ldr	r3, [pc, #96]	@ (800a070 <_Balloc+0x78>)
 800a010:	4818      	ldr	r0, [pc, #96]	@ (800a074 <_Balloc+0x7c>)
 800a012:	216b      	movs	r1, #107	@ 0x6b
 800a014:	f001 fd7c 	bl	800bb10 <__assert_func>
 800a018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a01c:	6006      	str	r6, [r0, #0]
 800a01e:	60c6      	str	r6, [r0, #12]
 800a020:	69e6      	ldr	r6, [r4, #28]
 800a022:	68f3      	ldr	r3, [r6, #12]
 800a024:	b183      	cbz	r3, 800a048 <_Balloc+0x50>
 800a026:	69e3      	ldr	r3, [r4, #28]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a02e:	b9b8      	cbnz	r0, 800a060 <_Balloc+0x68>
 800a030:	2101      	movs	r1, #1
 800a032:	fa01 f605 	lsl.w	r6, r1, r5
 800a036:	1d72      	adds	r2, r6, #5
 800a038:	0092      	lsls	r2, r2, #2
 800a03a:	4620      	mov	r0, r4
 800a03c:	f001 fd86 	bl	800bb4c <_calloc_r>
 800a040:	b160      	cbz	r0, 800a05c <_Balloc+0x64>
 800a042:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a046:	e00e      	b.n	800a066 <_Balloc+0x6e>
 800a048:	2221      	movs	r2, #33	@ 0x21
 800a04a:	2104      	movs	r1, #4
 800a04c:	4620      	mov	r0, r4
 800a04e:	f001 fd7d 	bl	800bb4c <_calloc_r>
 800a052:	69e3      	ldr	r3, [r4, #28]
 800a054:	60f0      	str	r0, [r6, #12]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e4      	bne.n	800a026 <_Balloc+0x2e>
 800a05c:	2000      	movs	r0, #0
 800a05e:	bd70      	pop	{r4, r5, r6, pc}
 800a060:	6802      	ldr	r2, [r0, #0]
 800a062:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a066:	2300      	movs	r3, #0
 800a068:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a06c:	e7f7      	b.n	800a05e <_Balloc+0x66>
 800a06e:	bf00      	nop
 800a070:	0800d08e 	.word	0x0800d08e
 800a074:	0800d10e 	.word	0x0800d10e

0800a078 <_Bfree>:
 800a078:	b570      	push	{r4, r5, r6, lr}
 800a07a:	69c6      	ldr	r6, [r0, #28]
 800a07c:	4605      	mov	r5, r0
 800a07e:	460c      	mov	r4, r1
 800a080:	b976      	cbnz	r6, 800a0a0 <_Bfree+0x28>
 800a082:	2010      	movs	r0, #16
 800a084:	f7ff ff02 	bl	8009e8c <malloc>
 800a088:	4602      	mov	r2, r0
 800a08a:	61e8      	str	r0, [r5, #28]
 800a08c:	b920      	cbnz	r0, 800a098 <_Bfree+0x20>
 800a08e:	4b09      	ldr	r3, [pc, #36]	@ (800a0b4 <_Bfree+0x3c>)
 800a090:	4809      	ldr	r0, [pc, #36]	@ (800a0b8 <_Bfree+0x40>)
 800a092:	218f      	movs	r1, #143	@ 0x8f
 800a094:	f001 fd3c 	bl	800bb10 <__assert_func>
 800a098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a09c:	6006      	str	r6, [r0, #0]
 800a09e:	60c6      	str	r6, [r0, #12]
 800a0a0:	b13c      	cbz	r4, 800a0b2 <_Bfree+0x3a>
 800a0a2:	69eb      	ldr	r3, [r5, #28]
 800a0a4:	6862      	ldr	r2, [r4, #4]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0ac:	6021      	str	r1, [r4, #0]
 800a0ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0b2:	bd70      	pop	{r4, r5, r6, pc}
 800a0b4:	0800d08e 	.word	0x0800d08e
 800a0b8:	0800d10e 	.word	0x0800d10e

0800a0bc <__multadd>:
 800a0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c0:	690d      	ldr	r5, [r1, #16]
 800a0c2:	4607      	mov	r7, r0
 800a0c4:	460c      	mov	r4, r1
 800a0c6:	461e      	mov	r6, r3
 800a0c8:	f101 0c14 	add.w	ip, r1, #20
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	f8dc 3000 	ldr.w	r3, [ip]
 800a0d2:	b299      	uxth	r1, r3
 800a0d4:	fb02 6101 	mla	r1, r2, r1, r6
 800a0d8:	0c1e      	lsrs	r6, r3, #16
 800a0da:	0c0b      	lsrs	r3, r1, #16
 800a0dc:	fb02 3306 	mla	r3, r2, r6, r3
 800a0e0:	b289      	uxth	r1, r1
 800a0e2:	3001      	adds	r0, #1
 800a0e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0e8:	4285      	cmp	r5, r0
 800a0ea:	f84c 1b04 	str.w	r1, [ip], #4
 800a0ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0f2:	dcec      	bgt.n	800a0ce <__multadd+0x12>
 800a0f4:	b30e      	cbz	r6, 800a13a <__multadd+0x7e>
 800a0f6:	68a3      	ldr	r3, [r4, #8]
 800a0f8:	42ab      	cmp	r3, r5
 800a0fa:	dc19      	bgt.n	800a130 <__multadd+0x74>
 800a0fc:	6861      	ldr	r1, [r4, #4]
 800a0fe:	4638      	mov	r0, r7
 800a100:	3101      	adds	r1, #1
 800a102:	f7ff ff79 	bl	8009ff8 <_Balloc>
 800a106:	4680      	mov	r8, r0
 800a108:	b928      	cbnz	r0, 800a116 <__multadd+0x5a>
 800a10a:	4602      	mov	r2, r0
 800a10c:	4b0c      	ldr	r3, [pc, #48]	@ (800a140 <__multadd+0x84>)
 800a10e:	480d      	ldr	r0, [pc, #52]	@ (800a144 <__multadd+0x88>)
 800a110:	21ba      	movs	r1, #186	@ 0xba
 800a112:	f001 fcfd 	bl	800bb10 <__assert_func>
 800a116:	6922      	ldr	r2, [r4, #16]
 800a118:	3202      	adds	r2, #2
 800a11a:	f104 010c 	add.w	r1, r4, #12
 800a11e:	0092      	lsls	r2, r2, #2
 800a120:	300c      	adds	r0, #12
 800a122:	f001 fcdf 	bl	800bae4 <memcpy>
 800a126:	4621      	mov	r1, r4
 800a128:	4638      	mov	r0, r7
 800a12a:	f7ff ffa5 	bl	800a078 <_Bfree>
 800a12e:	4644      	mov	r4, r8
 800a130:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a134:	3501      	adds	r5, #1
 800a136:	615e      	str	r6, [r3, #20]
 800a138:	6125      	str	r5, [r4, #16]
 800a13a:	4620      	mov	r0, r4
 800a13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a140:	0800d0fd 	.word	0x0800d0fd
 800a144:	0800d10e 	.word	0x0800d10e

0800a148 <__s2b>:
 800a148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a14c:	460c      	mov	r4, r1
 800a14e:	4615      	mov	r5, r2
 800a150:	461f      	mov	r7, r3
 800a152:	2209      	movs	r2, #9
 800a154:	3308      	adds	r3, #8
 800a156:	4606      	mov	r6, r0
 800a158:	fb93 f3f2 	sdiv	r3, r3, r2
 800a15c:	2100      	movs	r1, #0
 800a15e:	2201      	movs	r2, #1
 800a160:	429a      	cmp	r2, r3
 800a162:	db09      	blt.n	800a178 <__s2b+0x30>
 800a164:	4630      	mov	r0, r6
 800a166:	f7ff ff47 	bl	8009ff8 <_Balloc>
 800a16a:	b940      	cbnz	r0, 800a17e <__s2b+0x36>
 800a16c:	4602      	mov	r2, r0
 800a16e:	4b19      	ldr	r3, [pc, #100]	@ (800a1d4 <__s2b+0x8c>)
 800a170:	4819      	ldr	r0, [pc, #100]	@ (800a1d8 <__s2b+0x90>)
 800a172:	21d3      	movs	r1, #211	@ 0xd3
 800a174:	f001 fccc 	bl	800bb10 <__assert_func>
 800a178:	0052      	lsls	r2, r2, #1
 800a17a:	3101      	adds	r1, #1
 800a17c:	e7f0      	b.n	800a160 <__s2b+0x18>
 800a17e:	9b08      	ldr	r3, [sp, #32]
 800a180:	6143      	str	r3, [r0, #20]
 800a182:	2d09      	cmp	r5, #9
 800a184:	f04f 0301 	mov.w	r3, #1
 800a188:	6103      	str	r3, [r0, #16]
 800a18a:	dd16      	ble.n	800a1ba <__s2b+0x72>
 800a18c:	f104 0909 	add.w	r9, r4, #9
 800a190:	46c8      	mov	r8, r9
 800a192:	442c      	add	r4, r5
 800a194:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a198:	4601      	mov	r1, r0
 800a19a:	3b30      	subs	r3, #48	@ 0x30
 800a19c:	220a      	movs	r2, #10
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f7ff ff8c 	bl	800a0bc <__multadd>
 800a1a4:	45a0      	cmp	r8, r4
 800a1a6:	d1f5      	bne.n	800a194 <__s2b+0x4c>
 800a1a8:	f1a5 0408 	sub.w	r4, r5, #8
 800a1ac:	444c      	add	r4, r9
 800a1ae:	1b2d      	subs	r5, r5, r4
 800a1b0:	1963      	adds	r3, r4, r5
 800a1b2:	42bb      	cmp	r3, r7
 800a1b4:	db04      	blt.n	800a1c0 <__s2b+0x78>
 800a1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ba:	340a      	adds	r4, #10
 800a1bc:	2509      	movs	r5, #9
 800a1be:	e7f6      	b.n	800a1ae <__s2b+0x66>
 800a1c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1c4:	4601      	mov	r1, r0
 800a1c6:	3b30      	subs	r3, #48	@ 0x30
 800a1c8:	220a      	movs	r2, #10
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	f7ff ff76 	bl	800a0bc <__multadd>
 800a1d0:	e7ee      	b.n	800a1b0 <__s2b+0x68>
 800a1d2:	bf00      	nop
 800a1d4:	0800d0fd 	.word	0x0800d0fd
 800a1d8:	0800d10e 	.word	0x0800d10e

0800a1dc <__hi0bits>:
 800a1dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	bf36      	itet	cc
 800a1e4:	0403      	lslcc	r3, r0, #16
 800a1e6:	2000      	movcs	r0, #0
 800a1e8:	2010      	movcc	r0, #16
 800a1ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1ee:	bf3c      	itt	cc
 800a1f0:	021b      	lslcc	r3, r3, #8
 800a1f2:	3008      	addcc	r0, #8
 800a1f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1f8:	bf3c      	itt	cc
 800a1fa:	011b      	lslcc	r3, r3, #4
 800a1fc:	3004      	addcc	r0, #4
 800a1fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a202:	bf3c      	itt	cc
 800a204:	009b      	lslcc	r3, r3, #2
 800a206:	3002      	addcc	r0, #2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	db05      	blt.n	800a218 <__hi0bits+0x3c>
 800a20c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a210:	f100 0001 	add.w	r0, r0, #1
 800a214:	bf08      	it	eq
 800a216:	2020      	moveq	r0, #32
 800a218:	4770      	bx	lr

0800a21a <__lo0bits>:
 800a21a:	6803      	ldr	r3, [r0, #0]
 800a21c:	4602      	mov	r2, r0
 800a21e:	f013 0007 	ands.w	r0, r3, #7
 800a222:	d00b      	beq.n	800a23c <__lo0bits+0x22>
 800a224:	07d9      	lsls	r1, r3, #31
 800a226:	d421      	bmi.n	800a26c <__lo0bits+0x52>
 800a228:	0798      	lsls	r0, r3, #30
 800a22a:	bf49      	itett	mi
 800a22c:	085b      	lsrmi	r3, r3, #1
 800a22e:	089b      	lsrpl	r3, r3, #2
 800a230:	2001      	movmi	r0, #1
 800a232:	6013      	strmi	r3, [r2, #0]
 800a234:	bf5c      	itt	pl
 800a236:	6013      	strpl	r3, [r2, #0]
 800a238:	2002      	movpl	r0, #2
 800a23a:	4770      	bx	lr
 800a23c:	b299      	uxth	r1, r3
 800a23e:	b909      	cbnz	r1, 800a244 <__lo0bits+0x2a>
 800a240:	0c1b      	lsrs	r3, r3, #16
 800a242:	2010      	movs	r0, #16
 800a244:	b2d9      	uxtb	r1, r3
 800a246:	b909      	cbnz	r1, 800a24c <__lo0bits+0x32>
 800a248:	3008      	adds	r0, #8
 800a24a:	0a1b      	lsrs	r3, r3, #8
 800a24c:	0719      	lsls	r1, r3, #28
 800a24e:	bf04      	itt	eq
 800a250:	091b      	lsreq	r3, r3, #4
 800a252:	3004      	addeq	r0, #4
 800a254:	0799      	lsls	r1, r3, #30
 800a256:	bf04      	itt	eq
 800a258:	089b      	lsreq	r3, r3, #2
 800a25a:	3002      	addeq	r0, #2
 800a25c:	07d9      	lsls	r1, r3, #31
 800a25e:	d403      	bmi.n	800a268 <__lo0bits+0x4e>
 800a260:	085b      	lsrs	r3, r3, #1
 800a262:	f100 0001 	add.w	r0, r0, #1
 800a266:	d003      	beq.n	800a270 <__lo0bits+0x56>
 800a268:	6013      	str	r3, [r2, #0]
 800a26a:	4770      	bx	lr
 800a26c:	2000      	movs	r0, #0
 800a26e:	4770      	bx	lr
 800a270:	2020      	movs	r0, #32
 800a272:	4770      	bx	lr

0800a274 <__i2b>:
 800a274:	b510      	push	{r4, lr}
 800a276:	460c      	mov	r4, r1
 800a278:	2101      	movs	r1, #1
 800a27a:	f7ff febd 	bl	8009ff8 <_Balloc>
 800a27e:	4602      	mov	r2, r0
 800a280:	b928      	cbnz	r0, 800a28e <__i2b+0x1a>
 800a282:	4b05      	ldr	r3, [pc, #20]	@ (800a298 <__i2b+0x24>)
 800a284:	4805      	ldr	r0, [pc, #20]	@ (800a29c <__i2b+0x28>)
 800a286:	f240 1145 	movw	r1, #325	@ 0x145
 800a28a:	f001 fc41 	bl	800bb10 <__assert_func>
 800a28e:	2301      	movs	r3, #1
 800a290:	6144      	str	r4, [r0, #20]
 800a292:	6103      	str	r3, [r0, #16]
 800a294:	bd10      	pop	{r4, pc}
 800a296:	bf00      	nop
 800a298:	0800d0fd 	.word	0x0800d0fd
 800a29c:	0800d10e 	.word	0x0800d10e

0800a2a0 <__multiply>:
 800a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	4614      	mov	r4, r2
 800a2a6:	690a      	ldr	r2, [r1, #16]
 800a2a8:	6923      	ldr	r3, [r4, #16]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	bfa8      	it	ge
 800a2ae:	4623      	movge	r3, r4
 800a2b0:	460f      	mov	r7, r1
 800a2b2:	bfa4      	itt	ge
 800a2b4:	460c      	movge	r4, r1
 800a2b6:	461f      	movge	r7, r3
 800a2b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a2bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a2c0:	68a3      	ldr	r3, [r4, #8]
 800a2c2:	6861      	ldr	r1, [r4, #4]
 800a2c4:	eb0a 0609 	add.w	r6, sl, r9
 800a2c8:	42b3      	cmp	r3, r6
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	bfb8      	it	lt
 800a2ce:	3101      	addlt	r1, #1
 800a2d0:	f7ff fe92 	bl	8009ff8 <_Balloc>
 800a2d4:	b930      	cbnz	r0, 800a2e4 <__multiply+0x44>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	4b44      	ldr	r3, [pc, #272]	@ (800a3ec <__multiply+0x14c>)
 800a2da:	4845      	ldr	r0, [pc, #276]	@ (800a3f0 <__multiply+0x150>)
 800a2dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a2e0:	f001 fc16 	bl	800bb10 <__assert_func>
 800a2e4:	f100 0514 	add.w	r5, r0, #20
 800a2e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2ec:	462b      	mov	r3, r5
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	4543      	cmp	r3, r8
 800a2f2:	d321      	bcc.n	800a338 <__multiply+0x98>
 800a2f4:	f107 0114 	add.w	r1, r7, #20
 800a2f8:	f104 0214 	add.w	r2, r4, #20
 800a2fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a300:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a304:	9302      	str	r3, [sp, #8]
 800a306:	1b13      	subs	r3, r2, r4
 800a308:	3b15      	subs	r3, #21
 800a30a:	f023 0303 	bic.w	r3, r3, #3
 800a30e:	3304      	adds	r3, #4
 800a310:	f104 0715 	add.w	r7, r4, #21
 800a314:	42ba      	cmp	r2, r7
 800a316:	bf38      	it	cc
 800a318:	2304      	movcc	r3, #4
 800a31a:	9301      	str	r3, [sp, #4]
 800a31c:	9b02      	ldr	r3, [sp, #8]
 800a31e:	9103      	str	r1, [sp, #12]
 800a320:	428b      	cmp	r3, r1
 800a322:	d80c      	bhi.n	800a33e <__multiply+0x9e>
 800a324:	2e00      	cmp	r6, #0
 800a326:	dd03      	ble.n	800a330 <__multiply+0x90>
 800a328:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d05b      	beq.n	800a3e8 <__multiply+0x148>
 800a330:	6106      	str	r6, [r0, #16]
 800a332:	b005      	add	sp, #20
 800a334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a338:	f843 2b04 	str.w	r2, [r3], #4
 800a33c:	e7d8      	b.n	800a2f0 <__multiply+0x50>
 800a33e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a342:	f1ba 0f00 	cmp.w	sl, #0
 800a346:	d024      	beq.n	800a392 <__multiply+0xf2>
 800a348:	f104 0e14 	add.w	lr, r4, #20
 800a34c:	46a9      	mov	r9, r5
 800a34e:	f04f 0c00 	mov.w	ip, #0
 800a352:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a356:	f8d9 3000 	ldr.w	r3, [r9]
 800a35a:	fa1f fb87 	uxth.w	fp, r7
 800a35e:	b29b      	uxth	r3, r3
 800a360:	fb0a 330b 	mla	r3, sl, fp, r3
 800a364:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a368:	f8d9 7000 	ldr.w	r7, [r9]
 800a36c:	4463      	add	r3, ip
 800a36e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a372:	fb0a c70b 	mla	r7, sl, fp, ip
 800a376:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a380:	4572      	cmp	r2, lr
 800a382:	f849 3b04 	str.w	r3, [r9], #4
 800a386:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a38a:	d8e2      	bhi.n	800a352 <__multiply+0xb2>
 800a38c:	9b01      	ldr	r3, [sp, #4]
 800a38e:	f845 c003 	str.w	ip, [r5, r3]
 800a392:	9b03      	ldr	r3, [sp, #12]
 800a394:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a398:	3104      	adds	r1, #4
 800a39a:	f1b9 0f00 	cmp.w	r9, #0
 800a39e:	d021      	beq.n	800a3e4 <__multiply+0x144>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	f104 0c14 	add.w	ip, r4, #20
 800a3a6:	46ae      	mov	lr, r5
 800a3a8:	f04f 0a00 	mov.w	sl, #0
 800a3ac:	f8bc b000 	ldrh.w	fp, [ip]
 800a3b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a3b4:	fb09 770b 	mla	r7, r9, fp, r7
 800a3b8:	4457      	add	r7, sl
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a3c0:	f84e 3b04 	str.w	r3, [lr], #4
 800a3c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3cc:	f8be 3000 	ldrh.w	r3, [lr]
 800a3d0:	fb09 330a 	mla	r3, r9, sl, r3
 800a3d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a3d8:	4562      	cmp	r2, ip
 800a3da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3de:	d8e5      	bhi.n	800a3ac <__multiply+0x10c>
 800a3e0:	9f01      	ldr	r7, [sp, #4]
 800a3e2:	51eb      	str	r3, [r5, r7]
 800a3e4:	3504      	adds	r5, #4
 800a3e6:	e799      	b.n	800a31c <__multiply+0x7c>
 800a3e8:	3e01      	subs	r6, #1
 800a3ea:	e79b      	b.n	800a324 <__multiply+0x84>
 800a3ec:	0800d0fd 	.word	0x0800d0fd
 800a3f0:	0800d10e 	.word	0x0800d10e

0800a3f4 <__pow5mult>:
 800a3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f8:	4615      	mov	r5, r2
 800a3fa:	f012 0203 	ands.w	r2, r2, #3
 800a3fe:	4607      	mov	r7, r0
 800a400:	460e      	mov	r6, r1
 800a402:	d007      	beq.n	800a414 <__pow5mult+0x20>
 800a404:	4c25      	ldr	r4, [pc, #148]	@ (800a49c <__pow5mult+0xa8>)
 800a406:	3a01      	subs	r2, #1
 800a408:	2300      	movs	r3, #0
 800a40a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a40e:	f7ff fe55 	bl	800a0bc <__multadd>
 800a412:	4606      	mov	r6, r0
 800a414:	10ad      	asrs	r5, r5, #2
 800a416:	d03d      	beq.n	800a494 <__pow5mult+0xa0>
 800a418:	69fc      	ldr	r4, [r7, #28]
 800a41a:	b97c      	cbnz	r4, 800a43c <__pow5mult+0x48>
 800a41c:	2010      	movs	r0, #16
 800a41e:	f7ff fd35 	bl	8009e8c <malloc>
 800a422:	4602      	mov	r2, r0
 800a424:	61f8      	str	r0, [r7, #28]
 800a426:	b928      	cbnz	r0, 800a434 <__pow5mult+0x40>
 800a428:	4b1d      	ldr	r3, [pc, #116]	@ (800a4a0 <__pow5mult+0xac>)
 800a42a:	481e      	ldr	r0, [pc, #120]	@ (800a4a4 <__pow5mult+0xb0>)
 800a42c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a430:	f001 fb6e 	bl	800bb10 <__assert_func>
 800a434:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a438:	6004      	str	r4, [r0, #0]
 800a43a:	60c4      	str	r4, [r0, #12]
 800a43c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a440:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a444:	b94c      	cbnz	r4, 800a45a <__pow5mult+0x66>
 800a446:	f240 2171 	movw	r1, #625	@ 0x271
 800a44a:	4638      	mov	r0, r7
 800a44c:	f7ff ff12 	bl	800a274 <__i2b>
 800a450:	2300      	movs	r3, #0
 800a452:	f8c8 0008 	str.w	r0, [r8, #8]
 800a456:	4604      	mov	r4, r0
 800a458:	6003      	str	r3, [r0, #0]
 800a45a:	f04f 0900 	mov.w	r9, #0
 800a45e:	07eb      	lsls	r3, r5, #31
 800a460:	d50a      	bpl.n	800a478 <__pow5mult+0x84>
 800a462:	4631      	mov	r1, r6
 800a464:	4622      	mov	r2, r4
 800a466:	4638      	mov	r0, r7
 800a468:	f7ff ff1a 	bl	800a2a0 <__multiply>
 800a46c:	4631      	mov	r1, r6
 800a46e:	4680      	mov	r8, r0
 800a470:	4638      	mov	r0, r7
 800a472:	f7ff fe01 	bl	800a078 <_Bfree>
 800a476:	4646      	mov	r6, r8
 800a478:	106d      	asrs	r5, r5, #1
 800a47a:	d00b      	beq.n	800a494 <__pow5mult+0xa0>
 800a47c:	6820      	ldr	r0, [r4, #0]
 800a47e:	b938      	cbnz	r0, 800a490 <__pow5mult+0x9c>
 800a480:	4622      	mov	r2, r4
 800a482:	4621      	mov	r1, r4
 800a484:	4638      	mov	r0, r7
 800a486:	f7ff ff0b 	bl	800a2a0 <__multiply>
 800a48a:	6020      	str	r0, [r4, #0]
 800a48c:	f8c0 9000 	str.w	r9, [r0]
 800a490:	4604      	mov	r4, r0
 800a492:	e7e4      	b.n	800a45e <__pow5mult+0x6a>
 800a494:	4630      	mov	r0, r6
 800a496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a49a:	bf00      	nop
 800a49c:	0800d168 	.word	0x0800d168
 800a4a0:	0800d08e 	.word	0x0800d08e
 800a4a4:	0800d10e 	.word	0x0800d10e

0800a4a8 <__lshift>:
 800a4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	6849      	ldr	r1, [r1, #4]
 800a4b0:	6923      	ldr	r3, [r4, #16]
 800a4b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4b6:	68a3      	ldr	r3, [r4, #8]
 800a4b8:	4607      	mov	r7, r0
 800a4ba:	4691      	mov	r9, r2
 800a4bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4c0:	f108 0601 	add.w	r6, r8, #1
 800a4c4:	42b3      	cmp	r3, r6
 800a4c6:	db0b      	blt.n	800a4e0 <__lshift+0x38>
 800a4c8:	4638      	mov	r0, r7
 800a4ca:	f7ff fd95 	bl	8009ff8 <_Balloc>
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	b948      	cbnz	r0, 800a4e6 <__lshift+0x3e>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	4b28      	ldr	r3, [pc, #160]	@ (800a578 <__lshift+0xd0>)
 800a4d6:	4829      	ldr	r0, [pc, #164]	@ (800a57c <__lshift+0xd4>)
 800a4d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4dc:	f001 fb18 	bl	800bb10 <__assert_func>
 800a4e0:	3101      	adds	r1, #1
 800a4e2:	005b      	lsls	r3, r3, #1
 800a4e4:	e7ee      	b.n	800a4c4 <__lshift+0x1c>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f100 0114 	add.w	r1, r0, #20
 800a4ec:	f100 0210 	add.w	r2, r0, #16
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	4553      	cmp	r3, sl
 800a4f4:	db33      	blt.n	800a55e <__lshift+0xb6>
 800a4f6:	6920      	ldr	r0, [r4, #16]
 800a4f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4fc:	f104 0314 	add.w	r3, r4, #20
 800a500:	f019 091f 	ands.w	r9, r9, #31
 800a504:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a508:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a50c:	d02b      	beq.n	800a566 <__lshift+0xbe>
 800a50e:	f1c9 0e20 	rsb	lr, r9, #32
 800a512:	468a      	mov	sl, r1
 800a514:	2200      	movs	r2, #0
 800a516:	6818      	ldr	r0, [r3, #0]
 800a518:	fa00 f009 	lsl.w	r0, r0, r9
 800a51c:	4310      	orrs	r0, r2
 800a51e:	f84a 0b04 	str.w	r0, [sl], #4
 800a522:	f853 2b04 	ldr.w	r2, [r3], #4
 800a526:	459c      	cmp	ip, r3
 800a528:	fa22 f20e 	lsr.w	r2, r2, lr
 800a52c:	d8f3      	bhi.n	800a516 <__lshift+0x6e>
 800a52e:	ebac 0304 	sub.w	r3, ip, r4
 800a532:	3b15      	subs	r3, #21
 800a534:	f023 0303 	bic.w	r3, r3, #3
 800a538:	3304      	adds	r3, #4
 800a53a:	f104 0015 	add.w	r0, r4, #21
 800a53e:	4584      	cmp	ip, r0
 800a540:	bf38      	it	cc
 800a542:	2304      	movcc	r3, #4
 800a544:	50ca      	str	r2, [r1, r3]
 800a546:	b10a      	cbz	r2, 800a54c <__lshift+0xa4>
 800a548:	f108 0602 	add.w	r6, r8, #2
 800a54c:	3e01      	subs	r6, #1
 800a54e:	4638      	mov	r0, r7
 800a550:	612e      	str	r6, [r5, #16]
 800a552:	4621      	mov	r1, r4
 800a554:	f7ff fd90 	bl	800a078 <_Bfree>
 800a558:	4628      	mov	r0, r5
 800a55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a55e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a562:	3301      	adds	r3, #1
 800a564:	e7c5      	b.n	800a4f2 <__lshift+0x4a>
 800a566:	3904      	subs	r1, #4
 800a568:	f853 2b04 	ldr.w	r2, [r3], #4
 800a56c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a570:	459c      	cmp	ip, r3
 800a572:	d8f9      	bhi.n	800a568 <__lshift+0xc0>
 800a574:	e7ea      	b.n	800a54c <__lshift+0xa4>
 800a576:	bf00      	nop
 800a578:	0800d0fd 	.word	0x0800d0fd
 800a57c:	0800d10e 	.word	0x0800d10e

0800a580 <__mcmp>:
 800a580:	690a      	ldr	r2, [r1, #16]
 800a582:	4603      	mov	r3, r0
 800a584:	6900      	ldr	r0, [r0, #16]
 800a586:	1a80      	subs	r0, r0, r2
 800a588:	b530      	push	{r4, r5, lr}
 800a58a:	d10e      	bne.n	800a5aa <__mcmp+0x2a>
 800a58c:	3314      	adds	r3, #20
 800a58e:	3114      	adds	r1, #20
 800a590:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a594:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a598:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a59c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5a0:	4295      	cmp	r5, r2
 800a5a2:	d003      	beq.n	800a5ac <__mcmp+0x2c>
 800a5a4:	d205      	bcs.n	800a5b2 <__mcmp+0x32>
 800a5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5aa:	bd30      	pop	{r4, r5, pc}
 800a5ac:	42a3      	cmp	r3, r4
 800a5ae:	d3f3      	bcc.n	800a598 <__mcmp+0x18>
 800a5b0:	e7fb      	b.n	800a5aa <__mcmp+0x2a>
 800a5b2:	2001      	movs	r0, #1
 800a5b4:	e7f9      	b.n	800a5aa <__mcmp+0x2a>
	...

0800a5b8 <__mdiff>:
 800a5b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5bc:	4689      	mov	r9, r1
 800a5be:	4606      	mov	r6, r0
 800a5c0:	4611      	mov	r1, r2
 800a5c2:	4648      	mov	r0, r9
 800a5c4:	4614      	mov	r4, r2
 800a5c6:	f7ff ffdb 	bl	800a580 <__mcmp>
 800a5ca:	1e05      	subs	r5, r0, #0
 800a5cc:	d112      	bne.n	800a5f4 <__mdiff+0x3c>
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7ff fd11 	bl	8009ff8 <_Balloc>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	b928      	cbnz	r0, 800a5e6 <__mdiff+0x2e>
 800a5da:	4b3f      	ldr	r3, [pc, #252]	@ (800a6d8 <__mdiff+0x120>)
 800a5dc:	f240 2137 	movw	r1, #567	@ 0x237
 800a5e0:	483e      	ldr	r0, [pc, #248]	@ (800a6dc <__mdiff+0x124>)
 800a5e2:	f001 fa95 	bl	800bb10 <__assert_func>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	b003      	add	sp, #12
 800a5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f4:	bfbc      	itt	lt
 800a5f6:	464b      	movlt	r3, r9
 800a5f8:	46a1      	movlt	r9, r4
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a600:	bfba      	itte	lt
 800a602:	461c      	movlt	r4, r3
 800a604:	2501      	movlt	r5, #1
 800a606:	2500      	movge	r5, #0
 800a608:	f7ff fcf6 	bl	8009ff8 <_Balloc>
 800a60c:	4602      	mov	r2, r0
 800a60e:	b918      	cbnz	r0, 800a618 <__mdiff+0x60>
 800a610:	4b31      	ldr	r3, [pc, #196]	@ (800a6d8 <__mdiff+0x120>)
 800a612:	f240 2145 	movw	r1, #581	@ 0x245
 800a616:	e7e3      	b.n	800a5e0 <__mdiff+0x28>
 800a618:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a61c:	6926      	ldr	r6, [r4, #16]
 800a61e:	60c5      	str	r5, [r0, #12]
 800a620:	f109 0310 	add.w	r3, r9, #16
 800a624:	f109 0514 	add.w	r5, r9, #20
 800a628:	f104 0e14 	add.w	lr, r4, #20
 800a62c:	f100 0b14 	add.w	fp, r0, #20
 800a630:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a634:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a638:	9301      	str	r3, [sp, #4]
 800a63a:	46d9      	mov	r9, fp
 800a63c:	f04f 0c00 	mov.w	ip, #0
 800a640:	9b01      	ldr	r3, [sp, #4]
 800a642:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a646:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a64a:	9301      	str	r3, [sp, #4]
 800a64c:	fa1f f38a 	uxth.w	r3, sl
 800a650:	4619      	mov	r1, r3
 800a652:	b283      	uxth	r3, r0
 800a654:	1acb      	subs	r3, r1, r3
 800a656:	0c00      	lsrs	r0, r0, #16
 800a658:	4463      	add	r3, ip
 800a65a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a65e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a662:	b29b      	uxth	r3, r3
 800a664:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a668:	4576      	cmp	r6, lr
 800a66a:	f849 3b04 	str.w	r3, [r9], #4
 800a66e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a672:	d8e5      	bhi.n	800a640 <__mdiff+0x88>
 800a674:	1b33      	subs	r3, r6, r4
 800a676:	3b15      	subs	r3, #21
 800a678:	f023 0303 	bic.w	r3, r3, #3
 800a67c:	3415      	adds	r4, #21
 800a67e:	3304      	adds	r3, #4
 800a680:	42a6      	cmp	r6, r4
 800a682:	bf38      	it	cc
 800a684:	2304      	movcc	r3, #4
 800a686:	441d      	add	r5, r3
 800a688:	445b      	add	r3, fp
 800a68a:	461e      	mov	r6, r3
 800a68c:	462c      	mov	r4, r5
 800a68e:	4544      	cmp	r4, r8
 800a690:	d30e      	bcc.n	800a6b0 <__mdiff+0xf8>
 800a692:	f108 0103 	add.w	r1, r8, #3
 800a696:	1b49      	subs	r1, r1, r5
 800a698:	f021 0103 	bic.w	r1, r1, #3
 800a69c:	3d03      	subs	r5, #3
 800a69e:	45a8      	cmp	r8, r5
 800a6a0:	bf38      	it	cc
 800a6a2:	2100      	movcc	r1, #0
 800a6a4:	440b      	add	r3, r1
 800a6a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6aa:	b191      	cbz	r1, 800a6d2 <__mdiff+0x11a>
 800a6ac:	6117      	str	r7, [r2, #16]
 800a6ae:	e79d      	b.n	800a5ec <__mdiff+0x34>
 800a6b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800a6b4:	46e6      	mov	lr, ip
 800a6b6:	0c08      	lsrs	r0, r1, #16
 800a6b8:	fa1c fc81 	uxtah	ip, ip, r1
 800a6bc:	4471      	add	r1, lr
 800a6be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a6c2:	b289      	uxth	r1, r1
 800a6c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6c8:	f846 1b04 	str.w	r1, [r6], #4
 800a6cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6d0:	e7dd      	b.n	800a68e <__mdiff+0xd6>
 800a6d2:	3f01      	subs	r7, #1
 800a6d4:	e7e7      	b.n	800a6a6 <__mdiff+0xee>
 800a6d6:	bf00      	nop
 800a6d8:	0800d0fd 	.word	0x0800d0fd
 800a6dc:	0800d10e 	.word	0x0800d10e

0800a6e0 <__ulp>:
 800a6e0:	b082      	sub	sp, #8
 800a6e2:	ed8d 0b00 	vstr	d0, [sp]
 800a6e6:	9a01      	ldr	r2, [sp, #4]
 800a6e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a728 <__ulp+0x48>)
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	dc08      	bgt.n	800a706 <__ulp+0x26>
 800a6f4:	425b      	negs	r3, r3
 800a6f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a6fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6fe:	da04      	bge.n	800a70a <__ulp+0x2a>
 800a700:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a704:	4113      	asrs	r3, r2
 800a706:	2200      	movs	r2, #0
 800a708:	e008      	b.n	800a71c <__ulp+0x3c>
 800a70a:	f1a2 0314 	sub.w	r3, r2, #20
 800a70e:	2b1e      	cmp	r3, #30
 800a710:	bfda      	itte	le
 800a712:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a716:	40da      	lsrle	r2, r3
 800a718:	2201      	movgt	r2, #1
 800a71a:	2300      	movs	r3, #0
 800a71c:	4619      	mov	r1, r3
 800a71e:	4610      	mov	r0, r2
 800a720:	ec41 0b10 	vmov	d0, r0, r1
 800a724:	b002      	add	sp, #8
 800a726:	4770      	bx	lr
 800a728:	7ff00000 	.word	0x7ff00000

0800a72c <__b2d>:
 800a72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a730:	6906      	ldr	r6, [r0, #16]
 800a732:	f100 0814 	add.w	r8, r0, #20
 800a736:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a73a:	1f37      	subs	r7, r6, #4
 800a73c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a740:	4610      	mov	r0, r2
 800a742:	f7ff fd4b 	bl	800a1dc <__hi0bits>
 800a746:	f1c0 0320 	rsb	r3, r0, #32
 800a74a:	280a      	cmp	r0, #10
 800a74c:	600b      	str	r3, [r1, #0]
 800a74e:	491b      	ldr	r1, [pc, #108]	@ (800a7bc <__b2d+0x90>)
 800a750:	dc15      	bgt.n	800a77e <__b2d+0x52>
 800a752:	f1c0 0c0b 	rsb	ip, r0, #11
 800a756:	fa22 f30c 	lsr.w	r3, r2, ip
 800a75a:	45b8      	cmp	r8, r7
 800a75c:	ea43 0501 	orr.w	r5, r3, r1
 800a760:	bf34      	ite	cc
 800a762:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a766:	2300      	movcs	r3, #0
 800a768:	3015      	adds	r0, #21
 800a76a:	fa02 f000 	lsl.w	r0, r2, r0
 800a76e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a772:	4303      	orrs	r3, r0
 800a774:	461c      	mov	r4, r3
 800a776:	ec45 4b10 	vmov	d0, r4, r5
 800a77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a77e:	45b8      	cmp	r8, r7
 800a780:	bf3a      	itte	cc
 800a782:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a786:	f1a6 0708 	subcc.w	r7, r6, #8
 800a78a:	2300      	movcs	r3, #0
 800a78c:	380b      	subs	r0, #11
 800a78e:	d012      	beq.n	800a7b6 <__b2d+0x8a>
 800a790:	f1c0 0120 	rsb	r1, r0, #32
 800a794:	fa23 f401 	lsr.w	r4, r3, r1
 800a798:	4082      	lsls	r2, r0
 800a79a:	4322      	orrs	r2, r4
 800a79c:	4547      	cmp	r7, r8
 800a79e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a7a2:	bf8c      	ite	hi
 800a7a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a7a8:	2200      	movls	r2, #0
 800a7aa:	4083      	lsls	r3, r0
 800a7ac:	40ca      	lsrs	r2, r1
 800a7ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	e7de      	b.n	800a774 <__b2d+0x48>
 800a7b6:	ea42 0501 	orr.w	r5, r2, r1
 800a7ba:	e7db      	b.n	800a774 <__b2d+0x48>
 800a7bc:	3ff00000 	.word	0x3ff00000

0800a7c0 <__d2b>:
 800a7c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7c4:	460f      	mov	r7, r1
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	ec59 8b10 	vmov	r8, r9, d0
 800a7cc:	4616      	mov	r6, r2
 800a7ce:	f7ff fc13 	bl	8009ff8 <_Balloc>
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	b930      	cbnz	r0, 800a7e4 <__d2b+0x24>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	4b23      	ldr	r3, [pc, #140]	@ (800a868 <__d2b+0xa8>)
 800a7da:	4824      	ldr	r0, [pc, #144]	@ (800a86c <__d2b+0xac>)
 800a7dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7e0:	f001 f996 	bl	800bb10 <__assert_func>
 800a7e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7ec:	b10d      	cbz	r5, 800a7f2 <__d2b+0x32>
 800a7ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7f2:	9301      	str	r3, [sp, #4]
 800a7f4:	f1b8 0300 	subs.w	r3, r8, #0
 800a7f8:	d023      	beq.n	800a842 <__d2b+0x82>
 800a7fa:	4668      	mov	r0, sp
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	f7ff fd0c 	bl	800a21a <__lo0bits>
 800a802:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a806:	b1d0      	cbz	r0, 800a83e <__d2b+0x7e>
 800a808:	f1c0 0320 	rsb	r3, r0, #32
 800a80c:	fa02 f303 	lsl.w	r3, r2, r3
 800a810:	430b      	orrs	r3, r1
 800a812:	40c2      	lsrs	r2, r0
 800a814:	6163      	str	r3, [r4, #20]
 800a816:	9201      	str	r2, [sp, #4]
 800a818:	9b01      	ldr	r3, [sp, #4]
 800a81a:	61a3      	str	r3, [r4, #24]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	bf0c      	ite	eq
 800a820:	2201      	moveq	r2, #1
 800a822:	2202      	movne	r2, #2
 800a824:	6122      	str	r2, [r4, #16]
 800a826:	b1a5      	cbz	r5, 800a852 <__d2b+0x92>
 800a828:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a82c:	4405      	add	r5, r0
 800a82e:	603d      	str	r5, [r7, #0]
 800a830:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a834:	6030      	str	r0, [r6, #0]
 800a836:	4620      	mov	r0, r4
 800a838:	b003      	add	sp, #12
 800a83a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a83e:	6161      	str	r1, [r4, #20]
 800a840:	e7ea      	b.n	800a818 <__d2b+0x58>
 800a842:	a801      	add	r0, sp, #4
 800a844:	f7ff fce9 	bl	800a21a <__lo0bits>
 800a848:	9b01      	ldr	r3, [sp, #4]
 800a84a:	6163      	str	r3, [r4, #20]
 800a84c:	3020      	adds	r0, #32
 800a84e:	2201      	movs	r2, #1
 800a850:	e7e8      	b.n	800a824 <__d2b+0x64>
 800a852:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a856:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a85a:	6038      	str	r0, [r7, #0]
 800a85c:	6918      	ldr	r0, [r3, #16]
 800a85e:	f7ff fcbd 	bl	800a1dc <__hi0bits>
 800a862:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a866:	e7e5      	b.n	800a834 <__d2b+0x74>
 800a868:	0800d0fd 	.word	0x0800d0fd
 800a86c:	0800d10e 	.word	0x0800d10e

0800a870 <__ratio>:
 800a870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a874:	b085      	sub	sp, #20
 800a876:	e9cd 1000 	strd	r1, r0, [sp]
 800a87a:	a902      	add	r1, sp, #8
 800a87c:	f7ff ff56 	bl	800a72c <__b2d>
 800a880:	9800      	ldr	r0, [sp, #0]
 800a882:	a903      	add	r1, sp, #12
 800a884:	ec55 4b10 	vmov	r4, r5, d0
 800a888:	f7ff ff50 	bl	800a72c <__b2d>
 800a88c:	9b01      	ldr	r3, [sp, #4]
 800a88e:	6919      	ldr	r1, [r3, #16]
 800a890:	9b00      	ldr	r3, [sp, #0]
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	1ac9      	subs	r1, r1, r3
 800a896:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a89a:	1a9b      	subs	r3, r3, r2
 800a89c:	ec5b ab10 	vmov	sl, fp, d0
 800a8a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	bfce      	itee	gt
 800a8a8:	462a      	movgt	r2, r5
 800a8aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a8ae:	465a      	movle	r2, fp
 800a8b0:	462f      	mov	r7, r5
 800a8b2:	46d9      	mov	r9, fp
 800a8b4:	bfcc      	ite	gt
 800a8b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a8ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a8be:	464b      	mov	r3, r9
 800a8c0:	4652      	mov	r2, sl
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	4639      	mov	r1, r7
 800a8c6:	f7f5 ffe9 	bl	800089c <__aeabi_ddiv>
 800a8ca:	ec41 0b10 	vmov	d0, r0, r1
 800a8ce:	b005      	add	sp, #20
 800a8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8d4 <__copybits>:
 800a8d4:	3901      	subs	r1, #1
 800a8d6:	b570      	push	{r4, r5, r6, lr}
 800a8d8:	1149      	asrs	r1, r1, #5
 800a8da:	6914      	ldr	r4, [r2, #16]
 800a8dc:	3101      	adds	r1, #1
 800a8de:	f102 0314 	add.w	r3, r2, #20
 800a8e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a8ea:	1f05      	subs	r5, r0, #4
 800a8ec:	42a3      	cmp	r3, r4
 800a8ee:	d30c      	bcc.n	800a90a <__copybits+0x36>
 800a8f0:	1aa3      	subs	r3, r4, r2
 800a8f2:	3b11      	subs	r3, #17
 800a8f4:	f023 0303 	bic.w	r3, r3, #3
 800a8f8:	3211      	adds	r2, #17
 800a8fa:	42a2      	cmp	r2, r4
 800a8fc:	bf88      	it	hi
 800a8fe:	2300      	movhi	r3, #0
 800a900:	4418      	add	r0, r3
 800a902:	2300      	movs	r3, #0
 800a904:	4288      	cmp	r0, r1
 800a906:	d305      	bcc.n	800a914 <__copybits+0x40>
 800a908:	bd70      	pop	{r4, r5, r6, pc}
 800a90a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a90e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a912:	e7eb      	b.n	800a8ec <__copybits+0x18>
 800a914:	f840 3b04 	str.w	r3, [r0], #4
 800a918:	e7f4      	b.n	800a904 <__copybits+0x30>

0800a91a <__any_on>:
 800a91a:	f100 0214 	add.w	r2, r0, #20
 800a91e:	6900      	ldr	r0, [r0, #16]
 800a920:	114b      	asrs	r3, r1, #5
 800a922:	4298      	cmp	r0, r3
 800a924:	b510      	push	{r4, lr}
 800a926:	db11      	blt.n	800a94c <__any_on+0x32>
 800a928:	dd0a      	ble.n	800a940 <__any_on+0x26>
 800a92a:	f011 011f 	ands.w	r1, r1, #31
 800a92e:	d007      	beq.n	800a940 <__any_on+0x26>
 800a930:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a934:	fa24 f001 	lsr.w	r0, r4, r1
 800a938:	fa00 f101 	lsl.w	r1, r0, r1
 800a93c:	428c      	cmp	r4, r1
 800a93e:	d10b      	bne.n	800a958 <__any_on+0x3e>
 800a940:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a944:	4293      	cmp	r3, r2
 800a946:	d803      	bhi.n	800a950 <__any_on+0x36>
 800a948:	2000      	movs	r0, #0
 800a94a:	bd10      	pop	{r4, pc}
 800a94c:	4603      	mov	r3, r0
 800a94e:	e7f7      	b.n	800a940 <__any_on+0x26>
 800a950:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a954:	2900      	cmp	r1, #0
 800a956:	d0f5      	beq.n	800a944 <__any_on+0x2a>
 800a958:	2001      	movs	r0, #1
 800a95a:	e7f6      	b.n	800a94a <__any_on+0x30>

0800a95c <sulp>:
 800a95c:	b570      	push	{r4, r5, r6, lr}
 800a95e:	4604      	mov	r4, r0
 800a960:	460d      	mov	r5, r1
 800a962:	ec45 4b10 	vmov	d0, r4, r5
 800a966:	4616      	mov	r6, r2
 800a968:	f7ff feba 	bl	800a6e0 <__ulp>
 800a96c:	ec51 0b10 	vmov	r0, r1, d0
 800a970:	b17e      	cbz	r6, 800a992 <sulp+0x36>
 800a972:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a976:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	dd09      	ble.n	800a992 <sulp+0x36>
 800a97e:	051b      	lsls	r3, r3, #20
 800a980:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a984:	2400      	movs	r4, #0
 800a986:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a98a:	4622      	mov	r2, r4
 800a98c:	462b      	mov	r3, r5
 800a98e:	f7f5 fe5b 	bl	8000648 <__aeabi_dmul>
 800a992:	ec41 0b10 	vmov	d0, r0, r1
 800a996:	bd70      	pop	{r4, r5, r6, pc}

0800a998 <_strtod_l>:
 800a998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a99c:	b09f      	sub	sp, #124	@ 0x7c
 800a99e:	460c      	mov	r4, r1
 800a9a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	921a      	str	r2, [sp, #104]	@ 0x68
 800a9a6:	9005      	str	r0, [sp, #20]
 800a9a8:	f04f 0a00 	mov.w	sl, #0
 800a9ac:	f04f 0b00 	mov.w	fp, #0
 800a9b0:	460a      	mov	r2, r1
 800a9b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9b4:	7811      	ldrb	r1, [r2, #0]
 800a9b6:	292b      	cmp	r1, #43	@ 0x2b
 800a9b8:	d04a      	beq.n	800aa50 <_strtod_l+0xb8>
 800a9ba:	d838      	bhi.n	800aa2e <_strtod_l+0x96>
 800a9bc:	290d      	cmp	r1, #13
 800a9be:	d832      	bhi.n	800aa26 <_strtod_l+0x8e>
 800a9c0:	2908      	cmp	r1, #8
 800a9c2:	d832      	bhi.n	800aa2a <_strtod_l+0x92>
 800a9c4:	2900      	cmp	r1, #0
 800a9c6:	d03b      	beq.n	800aa40 <_strtod_l+0xa8>
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a9cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a9ce:	782a      	ldrb	r2, [r5, #0]
 800a9d0:	2a30      	cmp	r2, #48	@ 0x30
 800a9d2:	f040 80b3 	bne.w	800ab3c <_strtod_l+0x1a4>
 800a9d6:	786a      	ldrb	r2, [r5, #1]
 800a9d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a9dc:	2a58      	cmp	r2, #88	@ 0x58
 800a9de:	d16e      	bne.n	800aabe <_strtod_l+0x126>
 800a9e0:	9302      	str	r3, [sp, #8]
 800a9e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9e4:	9301      	str	r3, [sp, #4]
 800a9e6:	ab1a      	add	r3, sp, #104	@ 0x68
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	4a8e      	ldr	r2, [pc, #568]	@ (800ac24 <_strtod_l+0x28c>)
 800a9ec:	9805      	ldr	r0, [sp, #20]
 800a9ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a9f0:	a919      	add	r1, sp, #100	@ 0x64
 800a9f2:	f001 f927 	bl	800bc44 <__gethex>
 800a9f6:	f010 060f 	ands.w	r6, r0, #15
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	d005      	beq.n	800aa0a <_strtod_l+0x72>
 800a9fe:	2e06      	cmp	r6, #6
 800aa00:	d128      	bne.n	800aa54 <_strtod_l+0xbc>
 800aa02:	3501      	adds	r5, #1
 800aa04:	2300      	movs	r3, #0
 800aa06:	9519      	str	r5, [sp, #100]	@ 0x64
 800aa08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f040 858e 	bne.w	800b52e <_strtod_l+0xb96>
 800aa12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa14:	b1cb      	cbz	r3, 800aa4a <_strtod_l+0xb2>
 800aa16:	4652      	mov	r2, sl
 800aa18:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aa1c:	ec43 2b10 	vmov	d0, r2, r3
 800aa20:	b01f      	add	sp, #124	@ 0x7c
 800aa22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa26:	2920      	cmp	r1, #32
 800aa28:	d1ce      	bne.n	800a9c8 <_strtod_l+0x30>
 800aa2a:	3201      	adds	r2, #1
 800aa2c:	e7c1      	b.n	800a9b2 <_strtod_l+0x1a>
 800aa2e:	292d      	cmp	r1, #45	@ 0x2d
 800aa30:	d1ca      	bne.n	800a9c8 <_strtod_l+0x30>
 800aa32:	2101      	movs	r1, #1
 800aa34:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa36:	1c51      	adds	r1, r2, #1
 800aa38:	9119      	str	r1, [sp, #100]	@ 0x64
 800aa3a:	7852      	ldrb	r2, [r2, #1]
 800aa3c:	2a00      	cmp	r2, #0
 800aa3e:	d1c5      	bne.n	800a9cc <_strtod_l+0x34>
 800aa40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa42:	9419      	str	r4, [sp, #100]	@ 0x64
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f040 8570 	bne.w	800b52a <_strtod_l+0xb92>
 800aa4a:	4652      	mov	r2, sl
 800aa4c:	465b      	mov	r3, fp
 800aa4e:	e7e5      	b.n	800aa1c <_strtod_l+0x84>
 800aa50:	2100      	movs	r1, #0
 800aa52:	e7ef      	b.n	800aa34 <_strtod_l+0x9c>
 800aa54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa56:	b13a      	cbz	r2, 800aa68 <_strtod_l+0xd0>
 800aa58:	2135      	movs	r1, #53	@ 0x35
 800aa5a:	a81c      	add	r0, sp, #112	@ 0x70
 800aa5c:	f7ff ff3a 	bl	800a8d4 <__copybits>
 800aa60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa62:	9805      	ldr	r0, [sp, #20]
 800aa64:	f7ff fb08 	bl	800a078 <_Bfree>
 800aa68:	3e01      	subs	r6, #1
 800aa6a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aa6c:	2e04      	cmp	r6, #4
 800aa6e:	d806      	bhi.n	800aa7e <_strtod_l+0xe6>
 800aa70:	e8df f006 	tbb	[pc, r6]
 800aa74:	201d0314 	.word	0x201d0314
 800aa78:	14          	.byte	0x14
 800aa79:	00          	.byte	0x00
 800aa7a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aa7e:	05e1      	lsls	r1, r4, #23
 800aa80:	bf48      	it	mi
 800aa82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800aa86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa8a:	0d1b      	lsrs	r3, r3, #20
 800aa8c:	051b      	lsls	r3, r3, #20
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1bb      	bne.n	800aa0a <_strtod_l+0x72>
 800aa92:	f7fe fb31 	bl	80090f8 <__errno>
 800aa96:	2322      	movs	r3, #34	@ 0x22
 800aa98:	6003      	str	r3, [r0, #0]
 800aa9a:	e7b6      	b.n	800aa0a <_strtod_l+0x72>
 800aa9c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800aaa0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aaa4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aaa8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aaac:	e7e7      	b.n	800aa7e <_strtod_l+0xe6>
 800aaae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ac2c <_strtod_l+0x294>
 800aab2:	e7e4      	b.n	800aa7e <_strtod_l+0xe6>
 800aab4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aab8:	f04f 3aff 	mov.w	sl, #4294967295
 800aabc:	e7df      	b.n	800aa7e <_strtod_l+0xe6>
 800aabe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aac0:	1c5a      	adds	r2, r3, #1
 800aac2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aac4:	785b      	ldrb	r3, [r3, #1]
 800aac6:	2b30      	cmp	r3, #48	@ 0x30
 800aac8:	d0f9      	beq.n	800aabe <_strtod_l+0x126>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d09d      	beq.n	800aa0a <_strtod_l+0x72>
 800aace:	2301      	movs	r3, #1
 800aad0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aad2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aad4:	930c      	str	r3, [sp, #48]	@ 0x30
 800aad6:	2300      	movs	r3, #0
 800aad8:	9308      	str	r3, [sp, #32]
 800aada:	930a      	str	r3, [sp, #40]	@ 0x28
 800aadc:	461f      	mov	r7, r3
 800aade:	220a      	movs	r2, #10
 800aae0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aae2:	7805      	ldrb	r5, [r0, #0]
 800aae4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aae8:	b2d9      	uxtb	r1, r3
 800aaea:	2909      	cmp	r1, #9
 800aaec:	d928      	bls.n	800ab40 <_strtod_l+0x1a8>
 800aaee:	494e      	ldr	r1, [pc, #312]	@ (800ac28 <_strtod_l+0x290>)
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f000 ffd5 	bl	800baa0 <strncmp>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d032      	beq.n	800ab60 <_strtod_l+0x1c8>
 800aafa:	2000      	movs	r0, #0
 800aafc:	462a      	mov	r2, r5
 800aafe:	4681      	mov	r9, r0
 800ab00:	463d      	mov	r5, r7
 800ab02:	4603      	mov	r3, r0
 800ab04:	2a65      	cmp	r2, #101	@ 0x65
 800ab06:	d001      	beq.n	800ab0c <_strtod_l+0x174>
 800ab08:	2a45      	cmp	r2, #69	@ 0x45
 800ab0a:	d114      	bne.n	800ab36 <_strtod_l+0x19e>
 800ab0c:	b91d      	cbnz	r5, 800ab16 <_strtod_l+0x17e>
 800ab0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab10:	4302      	orrs	r2, r0
 800ab12:	d095      	beq.n	800aa40 <_strtod_l+0xa8>
 800ab14:	2500      	movs	r5, #0
 800ab16:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ab18:	1c62      	adds	r2, r4, #1
 800ab1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab1c:	7862      	ldrb	r2, [r4, #1]
 800ab1e:	2a2b      	cmp	r2, #43	@ 0x2b
 800ab20:	d077      	beq.n	800ac12 <_strtod_l+0x27a>
 800ab22:	2a2d      	cmp	r2, #45	@ 0x2d
 800ab24:	d07b      	beq.n	800ac1e <_strtod_l+0x286>
 800ab26:	f04f 0c00 	mov.w	ip, #0
 800ab2a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ab2e:	2909      	cmp	r1, #9
 800ab30:	f240 8082 	bls.w	800ac38 <_strtod_l+0x2a0>
 800ab34:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab36:	f04f 0800 	mov.w	r8, #0
 800ab3a:	e0a2      	b.n	800ac82 <_strtod_l+0x2ea>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	e7c7      	b.n	800aad0 <_strtod_l+0x138>
 800ab40:	2f08      	cmp	r7, #8
 800ab42:	bfd5      	itete	le
 800ab44:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ab46:	9908      	ldrgt	r1, [sp, #32]
 800ab48:	fb02 3301 	mlale	r3, r2, r1, r3
 800ab4c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ab50:	f100 0001 	add.w	r0, r0, #1
 800ab54:	bfd4      	ite	le
 800ab56:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ab58:	9308      	strgt	r3, [sp, #32]
 800ab5a:	3701      	adds	r7, #1
 800ab5c:	9019      	str	r0, [sp, #100]	@ 0x64
 800ab5e:	e7bf      	b.n	800aae0 <_strtod_l+0x148>
 800ab60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab66:	785a      	ldrb	r2, [r3, #1]
 800ab68:	b37f      	cbz	r7, 800abca <_strtod_l+0x232>
 800ab6a:	4681      	mov	r9, r0
 800ab6c:	463d      	mov	r5, r7
 800ab6e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ab72:	2b09      	cmp	r3, #9
 800ab74:	d912      	bls.n	800ab9c <_strtod_l+0x204>
 800ab76:	2301      	movs	r3, #1
 800ab78:	e7c4      	b.n	800ab04 <_strtod_l+0x16c>
 800ab7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab80:	785a      	ldrb	r2, [r3, #1]
 800ab82:	3001      	adds	r0, #1
 800ab84:	2a30      	cmp	r2, #48	@ 0x30
 800ab86:	d0f8      	beq.n	800ab7a <_strtod_l+0x1e2>
 800ab88:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ab8c:	2b08      	cmp	r3, #8
 800ab8e:	f200 84d3 	bhi.w	800b538 <_strtod_l+0xba0>
 800ab92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab94:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab96:	4681      	mov	r9, r0
 800ab98:	2000      	movs	r0, #0
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	3a30      	subs	r2, #48	@ 0x30
 800ab9e:	f100 0301 	add.w	r3, r0, #1
 800aba2:	d02a      	beq.n	800abfa <_strtod_l+0x262>
 800aba4:	4499      	add	r9, r3
 800aba6:	eb00 0c05 	add.w	ip, r0, r5
 800abaa:	462b      	mov	r3, r5
 800abac:	210a      	movs	r1, #10
 800abae:	4563      	cmp	r3, ip
 800abb0:	d10d      	bne.n	800abce <_strtod_l+0x236>
 800abb2:	1c69      	adds	r1, r5, #1
 800abb4:	4401      	add	r1, r0
 800abb6:	4428      	add	r0, r5
 800abb8:	2808      	cmp	r0, #8
 800abba:	dc16      	bgt.n	800abea <_strtod_l+0x252>
 800abbc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800abbe:	230a      	movs	r3, #10
 800abc0:	fb03 2300 	mla	r3, r3, r0, r2
 800abc4:	930a      	str	r3, [sp, #40]	@ 0x28
 800abc6:	2300      	movs	r3, #0
 800abc8:	e018      	b.n	800abfc <_strtod_l+0x264>
 800abca:	4638      	mov	r0, r7
 800abcc:	e7da      	b.n	800ab84 <_strtod_l+0x1ec>
 800abce:	2b08      	cmp	r3, #8
 800abd0:	f103 0301 	add.w	r3, r3, #1
 800abd4:	dc03      	bgt.n	800abde <_strtod_l+0x246>
 800abd6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800abd8:	434e      	muls	r6, r1
 800abda:	960a      	str	r6, [sp, #40]	@ 0x28
 800abdc:	e7e7      	b.n	800abae <_strtod_l+0x216>
 800abde:	2b10      	cmp	r3, #16
 800abe0:	bfde      	ittt	le
 800abe2:	9e08      	ldrle	r6, [sp, #32]
 800abe4:	434e      	mulle	r6, r1
 800abe6:	9608      	strle	r6, [sp, #32]
 800abe8:	e7e1      	b.n	800abae <_strtod_l+0x216>
 800abea:	280f      	cmp	r0, #15
 800abec:	dceb      	bgt.n	800abc6 <_strtod_l+0x22e>
 800abee:	9808      	ldr	r0, [sp, #32]
 800abf0:	230a      	movs	r3, #10
 800abf2:	fb03 2300 	mla	r3, r3, r0, r2
 800abf6:	9308      	str	r3, [sp, #32]
 800abf8:	e7e5      	b.n	800abc6 <_strtod_l+0x22e>
 800abfa:	4629      	mov	r1, r5
 800abfc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abfe:	1c50      	adds	r0, r2, #1
 800ac00:	9019      	str	r0, [sp, #100]	@ 0x64
 800ac02:	7852      	ldrb	r2, [r2, #1]
 800ac04:	4618      	mov	r0, r3
 800ac06:	460d      	mov	r5, r1
 800ac08:	e7b1      	b.n	800ab6e <_strtod_l+0x1d6>
 800ac0a:	f04f 0900 	mov.w	r9, #0
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e77d      	b.n	800ab0e <_strtod_l+0x176>
 800ac12:	f04f 0c00 	mov.w	ip, #0
 800ac16:	1ca2      	adds	r2, r4, #2
 800ac18:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac1a:	78a2      	ldrb	r2, [r4, #2]
 800ac1c:	e785      	b.n	800ab2a <_strtod_l+0x192>
 800ac1e:	f04f 0c01 	mov.w	ip, #1
 800ac22:	e7f8      	b.n	800ac16 <_strtod_l+0x27e>
 800ac24:	0800d280 	.word	0x0800d280
 800ac28:	0800d268 	.word	0x0800d268
 800ac2c:	7ff00000 	.word	0x7ff00000
 800ac30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac32:	1c51      	adds	r1, r2, #1
 800ac34:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac36:	7852      	ldrb	r2, [r2, #1]
 800ac38:	2a30      	cmp	r2, #48	@ 0x30
 800ac3a:	d0f9      	beq.n	800ac30 <_strtod_l+0x298>
 800ac3c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ac40:	2908      	cmp	r1, #8
 800ac42:	f63f af78 	bhi.w	800ab36 <_strtod_l+0x19e>
 800ac46:	3a30      	subs	r2, #48	@ 0x30
 800ac48:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ac4e:	f04f 080a 	mov.w	r8, #10
 800ac52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac54:	1c56      	adds	r6, r2, #1
 800ac56:	9619      	str	r6, [sp, #100]	@ 0x64
 800ac58:	7852      	ldrb	r2, [r2, #1]
 800ac5a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ac5e:	f1be 0f09 	cmp.w	lr, #9
 800ac62:	d939      	bls.n	800acd8 <_strtod_l+0x340>
 800ac64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ac66:	1a76      	subs	r6, r6, r1
 800ac68:	2e08      	cmp	r6, #8
 800ac6a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ac6e:	dc03      	bgt.n	800ac78 <_strtod_l+0x2e0>
 800ac70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ac72:	4588      	cmp	r8, r1
 800ac74:	bfa8      	it	ge
 800ac76:	4688      	movge	r8, r1
 800ac78:	f1bc 0f00 	cmp.w	ip, #0
 800ac7c:	d001      	beq.n	800ac82 <_strtod_l+0x2ea>
 800ac7e:	f1c8 0800 	rsb	r8, r8, #0
 800ac82:	2d00      	cmp	r5, #0
 800ac84:	d14e      	bne.n	800ad24 <_strtod_l+0x38c>
 800ac86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac88:	4308      	orrs	r0, r1
 800ac8a:	f47f aebe 	bne.w	800aa0a <_strtod_l+0x72>
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f47f aed6 	bne.w	800aa40 <_strtod_l+0xa8>
 800ac94:	2a69      	cmp	r2, #105	@ 0x69
 800ac96:	d028      	beq.n	800acea <_strtod_l+0x352>
 800ac98:	dc25      	bgt.n	800ace6 <_strtod_l+0x34e>
 800ac9a:	2a49      	cmp	r2, #73	@ 0x49
 800ac9c:	d025      	beq.n	800acea <_strtod_l+0x352>
 800ac9e:	2a4e      	cmp	r2, #78	@ 0x4e
 800aca0:	f47f aece 	bne.w	800aa40 <_strtod_l+0xa8>
 800aca4:	499b      	ldr	r1, [pc, #620]	@ (800af14 <_strtod_l+0x57c>)
 800aca6:	a819      	add	r0, sp, #100	@ 0x64
 800aca8:	f001 f9ee 	bl	800c088 <__match>
 800acac:	2800      	cmp	r0, #0
 800acae:	f43f aec7 	beq.w	800aa40 <_strtod_l+0xa8>
 800acb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	2b28      	cmp	r3, #40	@ 0x28
 800acb8:	d12e      	bne.n	800ad18 <_strtod_l+0x380>
 800acba:	4997      	ldr	r1, [pc, #604]	@ (800af18 <_strtod_l+0x580>)
 800acbc:	aa1c      	add	r2, sp, #112	@ 0x70
 800acbe:	a819      	add	r0, sp, #100	@ 0x64
 800acc0:	f001 f9f6 	bl	800c0b0 <__hexnan>
 800acc4:	2805      	cmp	r0, #5
 800acc6:	d127      	bne.n	800ad18 <_strtod_l+0x380>
 800acc8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800acca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800acce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800acd2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800acd6:	e698      	b.n	800aa0a <_strtod_l+0x72>
 800acd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800acda:	fb08 2101 	mla	r1, r8, r1, r2
 800acde:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ace2:	920e      	str	r2, [sp, #56]	@ 0x38
 800ace4:	e7b5      	b.n	800ac52 <_strtod_l+0x2ba>
 800ace6:	2a6e      	cmp	r2, #110	@ 0x6e
 800ace8:	e7da      	b.n	800aca0 <_strtod_l+0x308>
 800acea:	498c      	ldr	r1, [pc, #560]	@ (800af1c <_strtod_l+0x584>)
 800acec:	a819      	add	r0, sp, #100	@ 0x64
 800acee:	f001 f9cb 	bl	800c088 <__match>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	f43f aea4 	beq.w	800aa40 <_strtod_l+0xa8>
 800acf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acfa:	4989      	ldr	r1, [pc, #548]	@ (800af20 <_strtod_l+0x588>)
 800acfc:	3b01      	subs	r3, #1
 800acfe:	a819      	add	r0, sp, #100	@ 0x64
 800ad00:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad02:	f001 f9c1 	bl	800c088 <__match>
 800ad06:	b910      	cbnz	r0, 800ad0e <_strtod_l+0x376>
 800ad08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad0e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800af30 <_strtod_l+0x598>
 800ad12:	f04f 0a00 	mov.w	sl, #0
 800ad16:	e678      	b.n	800aa0a <_strtod_l+0x72>
 800ad18:	4882      	ldr	r0, [pc, #520]	@ (800af24 <_strtod_l+0x58c>)
 800ad1a:	f000 fef1 	bl	800bb00 <nan>
 800ad1e:	ec5b ab10 	vmov	sl, fp, d0
 800ad22:	e672      	b.n	800aa0a <_strtod_l+0x72>
 800ad24:	eba8 0309 	sub.w	r3, r8, r9
 800ad28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad2c:	2f00      	cmp	r7, #0
 800ad2e:	bf08      	it	eq
 800ad30:	462f      	moveq	r7, r5
 800ad32:	2d10      	cmp	r5, #16
 800ad34:	462c      	mov	r4, r5
 800ad36:	bfa8      	it	ge
 800ad38:	2410      	movge	r4, #16
 800ad3a:	f7f5 fc0b 	bl	8000554 <__aeabi_ui2d>
 800ad3e:	2d09      	cmp	r5, #9
 800ad40:	4682      	mov	sl, r0
 800ad42:	468b      	mov	fp, r1
 800ad44:	dc13      	bgt.n	800ad6e <_strtod_l+0x3d6>
 800ad46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f43f ae5e 	beq.w	800aa0a <_strtod_l+0x72>
 800ad4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad50:	dd78      	ble.n	800ae44 <_strtod_l+0x4ac>
 800ad52:	2b16      	cmp	r3, #22
 800ad54:	dc5f      	bgt.n	800ae16 <_strtod_l+0x47e>
 800ad56:	4974      	ldr	r1, [pc, #464]	@ (800af28 <_strtod_l+0x590>)
 800ad58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad60:	4652      	mov	r2, sl
 800ad62:	465b      	mov	r3, fp
 800ad64:	f7f5 fc70 	bl	8000648 <__aeabi_dmul>
 800ad68:	4682      	mov	sl, r0
 800ad6a:	468b      	mov	fp, r1
 800ad6c:	e64d      	b.n	800aa0a <_strtod_l+0x72>
 800ad6e:	4b6e      	ldr	r3, [pc, #440]	@ (800af28 <_strtod_l+0x590>)
 800ad70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ad78:	f7f5 fc66 	bl	8000648 <__aeabi_dmul>
 800ad7c:	4682      	mov	sl, r0
 800ad7e:	9808      	ldr	r0, [sp, #32]
 800ad80:	468b      	mov	fp, r1
 800ad82:	f7f5 fbe7 	bl	8000554 <__aeabi_ui2d>
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4650      	mov	r0, sl
 800ad8c:	4659      	mov	r1, fp
 800ad8e:	f7f5 faa5 	bl	80002dc <__adddf3>
 800ad92:	2d0f      	cmp	r5, #15
 800ad94:	4682      	mov	sl, r0
 800ad96:	468b      	mov	fp, r1
 800ad98:	ddd5      	ble.n	800ad46 <_strtod_l+0x3ae>
 800ad9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad9c:	1b2c      	subs	r4, r5, r4
 800ad9e:	441c      	add	r4, r3
 800ada0:	2c00      	cmp	r4, #0
 800ada2:	f340 8096 	ble.w	800aed2 <_strtod_l+0x53a>
 800ada6:	f014 030f 	ands.w	r3, r4, #15
 800adaa:	d00a      	beq.n	800adc2 <_strtod_l+0x42a>
 800adac:	495e      	ldr	r1, [pc, #376]	@ (800af28 <_strtod_l+0x590>)
 800adae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800adb2:	4652      	mov	r2, sl
 800adb4:	465b      	mov	r3, fp
 800adb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adba:	f7f5 fc45 	bl	8000648 <__aeabi_dmul>
 800adbe:	4682      	mov	sl, r0
 800adc0:	468b      	mov	fp, r1
 800adc2:	f034 040f 	bics.w	r4, r4, #15
 800adc6:	d073      	beq.n	800aeb0 <_strtod_l+0x518>
 800adc8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800adcc:	dd48      	ble.n	800ae60 <_strtod_l+0x4c8>
 800adce:	2400      	movs	r4, #0
 800add0:	46a0      	mov	r8, r4
 800add2:	940a      	str	r4, [sp, #40]	@ 0x28
 800add4:	46a1      	mov	r9, r4
 800add6:	9a05      	ldr	r2, [sp, #20]
 800add8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800af30 <_strtod_l+0x598>
 800addc:	2322      	movs	r3, #34	@ 0x22
 800adde:	6013      	str	r3, [r2, #0]
 800ade0:	f04f 0a00 	mov.w	sl, #0
 800ade4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f43f ae0f 	beq.w	800aa0a <_strtod_l+0x72>
 800adec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adee:	9805      	ldr	r0, [sp, #20]
 800adf0:	f7ff f942 	bl	800a078 <_Bfree>
 800adf4:	9805      	ldr	r0, [sp, #20]
 800adf6:	4649      	mov	r1, r9
 800adf8:	f7ff f93e 	bl	800a078 <_Bfree>
 800adfc:	9805      	ldr	r0, [sp, #20]
 800adfe:	4641      	mov	r1, r8
 800ae00:	f7ff f93a 	bl	800a078 <_Bfree>
 800ae04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae06:	9805      	ldr	r0, [sp, #20]
 800ae08:	f7ff f936 	bl	800a078 <_Bfree>
 800ae0c:	9805      	ldr	r0, [sp, #20]
 800ae0e:	4621      	mov	r1, r4
 800ae10:	f7ff f932 	bl	800a078 <_Bfree>
 800ae14:	e5f9      	b.n	800aa0a <_strtod_l+0x72>
 800ae16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	dbbc      	blt.n	800ad9a <_strtod_l+0x402>
 800ae20:	4c41      	ldr	r4, [pc, #260]	@ (800af28 <_strtod_l+0x590>)
 800ae22:	f1c5 050f 	rsb	r5, r5, #15
 800ae26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ae2a:	4652      	mov	r2, sl
 800ae2c:	465b      	mov	r3, fp
 800ae2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae32:	f7f5 fc09 	bl	8000648 <__aeabi_dmul>
 800ae36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae38:	1b5d      	subs	r5, r3, r5
 800ae3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ae3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ae42:	e78f      	b.n	800ad64 <_strtod_l+0x3cc>
 800ae44:	3316      	adds	r3, #22
 800ae46:	dba8      	blt.n	800ad9a <_strtod_l+0x402>
 800ae48:	4b37      	ldr	r3, [pc, #220]	@ (800af28 <_strtod_l+0x590>)
 800ae4a:	eba9 0808 	sub.w	r8, r9, r8
 800ae4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ae52:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ae56:	4650      	mov	r0, sl
 800ae58:	4659      	mov	r1, fp
 800ae5a:	f7f5 fd1f 	bl	800089c <__aeabi_ddiv>
 800ae5e:	e783      	b.n	800ad68 <_strtod_l+0x3d0>
 800ae60:	4b32      	ldr	r3, [pc, #200]	@ (800af2c <_strtod_l+0x594>)
 800ae62:	9308      	str	r3, [sp, #32]
 800ae64:	2300      	movs	r3, #0
 800ae66:	1124      	asrs	r4, r4, #4
 800ae68:	4650      	mov	r0, sl
 800ae6a:	4659      	mov	r1, fp
 800ae6c:	461e      	mov	r6, r3
 800ae6e:	2c01      	cmp	r4, #1
 800ae70:	dc21      	bgt.n	800aeb6 <_strtod_l+0x51e>
 800ae72:	b10b      	cbz	r3, 800ae78 <_strtod_l+0x4e0>
 800ae74:	4682      	mov	sl, r0
 800ae76:	468b      	mov	fp, r1
 800ae78:	492c      	ldr	r1, [pc, #176]	@ (800af2c <_strtod_l+0x594>)
 800ae7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ae7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ae82:	4652      	mov	r2, sl
 800ae84:	465b      	mov	r3, fp
 800ae86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae8a:	f7f5 fbdd 	bl	8000648 <__aeabi_dmul>
 800ae8e:	4b28      	ldr	r3, [pc, #160]	@ (800af30 <_strtod_l+0x598>)
 800ae90:	460a      	mov	r2, r1
 800ae92:	400b      	ands	r3, r1
 800ae94:	4927      	ldr	r1, [pc, #156]	@ (800af34 <_strtod_l+0x59c>)
 800ae96:	428b      	cmp	r3, r1
 800ae98:	4682      	mov	sl, r0
 800ae9a:	d898      	bhi.n	800adce <_strtod_l+0x436>
 800ae9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800aea0:	428b      	cmp	r3, r1
 800aea2:	bf86      	itte	hi
 800aea4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800af38 <_strtod_l+0x5a0>
 800aea8:	f04f 3aff 	movhi.w	sl, #4294967295
 800aeac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	9308      	str	r3, [sp, #32]
 800aeb4:	e07a      	b.n	800afac <_strtod_l+0x614>
 800aeb6:	07e2      	lsls	r2, r4, #31
 800aeb8:	d505      	bpl.n	800aec6 <_strtod_l+0x52e>
 800aeba:	9b08      	ldr	r3, [sp, #32]
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	f7f5 fbc2 	bl	8000648 <__aeabi_dmul>
 800aec4:	2301      	movs	r3, #1
 800aec6:	9a08      	ldr	r2, [sp, #32]
 800aec8:	3208      	adds	r2, #8
 800aeca:	3601      	adds	r6, #1
 800aecc:	1064      	asrs	r4, r4, #1
 800aece:	9208      	str	r2, [sp, #32]
 800aed0:	e7cd      	b.n	800ae6e <_strtod_l+0x4d6>
 800aed2:	d0ed      	beq.n	800aeb0 <_strtod_l+0x518>
 800aed4:	4264      	negs	r4, r4
 800aed6:	f014 020f 	ands.w	r2, r4, #15
 800aeda:	d00a      	beq.n	800aef2 <_strtod_l+0x55a>
 800aedc:	4b12      	ldr	r3, [pc, #72]	@ (800af28 <_strtod_l+0x590>)
 800aede:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aee2:	4650      	mov	r0, sl
 800aee4:	4659      	mov	r1, fp
 800aee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeea:	f7f5 fcd7 	bl	800089c <__aeabi_ddiv>
 800aeee:	4682      	mov	sl, r0
 800aef0:	468b      	mov	fp, r1
 800aef2:	1124      	asrs	r4, r4, #4
 800aef4:	d0dc      	beq.n	800aeb0 <_strtod_l+0x518>
 800aef6:	2c1f      	cmp	r4, #31
 800aef8:	dd20      	ble.n	800af3c <_strtod_l+0x5a4>
 800aefa:	2400      	movs	r4, #0
 800aefc:	46a0      	mov	r8, r4
 800aefe:	940a      	str	r4, [sp, #40]	@ 0x28
 800af00:	46a1      	mov	r9, r4
 800af02:	9a05      	ldr	r2, [sp, #20]
 800af04:	2322      	movs	r3, #34	@ 0x22
 800af06:	f04f 0a00 	mov.w	sl, #0
 800af0a:	f04f 0b00 	mov.w	fp, #0
 800af0e:	6013      	str	r3, [r2, #0]
 800af10:	e768      	b.n	800ade4 <_strtod_l+0x44c>
 800af12:	bf00      	nop
 800af14:	0800d055 	.word	0x0800d055
 800af18:	0800d26c 	.word	0x0800d26c
 800af1c:	0800d04d 	.word	0x0800d04d
 800af20:	0800d084 	.word	0x0800d084
 800af24:	0800d415 	.word	0x0800d415
 800af28:	0800d1a0 	.word	0x0800d1a0
 800af2c:	0800d178 	.word	0x0800d178
 800af30:	7ff00000 	.word	0x7ff00000
 800af34:	7ca00000 	.word	0x7ca00000
 800af38:	7fefffff 	.word	0x7fefffff
 800af3c:	f014 0310 	ands.w	r3, r4, #16
 800af40:	bf18      	it	ne
 800af42:	236a      	movne	r3, #106	@ 0x6a
 800af44:	4ea9      	ldr	r6, [pc, #676]	@ (800b1ec <_strtod_l+0x854>)
 800af46:	9308      	str	r3, [sp, #32]
 800af48:	4650      	mov	r0, sl
 800af4a:	4659      	mov	r1, fp
 800af4c:	2300      	movs	r3, #0
 800af4e:	07e2      	lsls	r2, r4, #31
 800af50:	d504      	bpl.n	800af5c <_strtod_l+0x5c4>
 800af52:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af56:	f7f5 fb77 	bl	8000648 <__aeabi_dmul>
 800af5a:	2301      	movs	r3, #1
 800af5c:	1064      	asrs	r4, r4, #1
 800af5e:	f106 0608 	add.w	r6, r6, #8
 800af62:	d1f4      	bne.n	800af4e <_strtod_l+0x5b6>
 800af64:	b10b      	cbz	r3, 800af6a <_strtod_l+0x5d2>
 800af66:	4682      	mov	sl, r0
 800af68:	468b      	mov	fp, r1
 800af6a:	9b08      	ldr	r3, [sp, #32]
 800af6c:	b1b3      	cbz	r3, 800af9c <_strtod_l+0x604>
 800af6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800af72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800af76:	2b00      	cmp	r3, #0
 800af78:	4659      	mov	r1, fp
 800af7a:	dd0f      	ble.n	800af9c <_strtod_l+0x604>
 800af7c:	2b1f      	cmp	r3, #31
 800af7e:	dd55      	ble.n	800b02c <_strtod_l+0x694>
 800af80:	2b34      	cmp	r3, #52	@ 0x34
 800af82:	bfde      	ittt	le
 800af84:	f04f 33ff 	movle.w	r3, #4294967295
 800af88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800af8c:	4093      	lslle	r3, r2
 800af8e:	f04f 0a00 	mov.w	sl, #0
 800af92:	bfcc      	ite	gt
 800af94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800af98:	ea03 0b01 	andle.w	fp, r3, r1
 800af9c:	2200      	movs	r2, #0
 800af9e:	2300      	movs	r3, #0
 800afa0:	4650      	mov	r0, sl
 800afa2:	4659      	mov	r1, fp
 800afa4:	f7f5 fdb8 	bl	8000b18 <__aeabi_dcmpeq>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d1a6      	bne.n	800aefa <_strtod_l+0x562>
 800afac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800afb2:	9805      	ldr	r0, [sp, #20]
 800afb4:	462b      	mov	r3, r5
 800afb6:	463a      	mov	r2, r7
 800afb8:	f7ff f8c6 	bl	800a148 <__s2b>
 800afbc:	900a      	str	r0, [sp, #40]	@ 0x28
 800afbe:	2800      	cmp	r0, #0
 800afc0:	f43f af05 	beq.w	800adce <_strtod_l+0x436>
 800afc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afc6:	2a00      	cmp	r2, #0
 800afc8:	eba9 0308 	sub.w	r3, r9, r8
 800afcc:	bfa8      	it	ge
 800afce:	2300      	movge	r3, #0
 800afd0:	9312      	str	r3, [sp, #72]	@ 0x48
 800afd2:	2400      	movs	r4, #0
 800afd4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800afd8:	9316      	str	r3, [sp, #88]	@ 0x58
 800afda:	46a0      	mov	r8, r4
 800afdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afde:	9805      	ldr	r0, [sp, #20]
 800afe0:	6859      	ldr	r1, [r3, #4]
 800afe2:	f7ff f809 	bl	8009ff8 <_Balloc>
 800afe6:	4681      	mov	r9, r0
 800afe8:	2800      	cmp	r0, #0
 800afea:	f43f aef4 	beq.w	800add6 <_strtod_l+0x43e>
 800afee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aff0:	691a      	ldr	r2, [r3, #16]
 800aff2:	3202      	adds	r2, #2
 800aff4:	f103 010c 	add.w	r1, r3, #12
 800aff8:	0092      	lsls	r2, r2, #2
 800affa:	300c      	adds	r0, #12
 800affc:	f000 fd72 	bl	800bae4 <memcpy>
 800b000:	ec4b ab10 	vmov	d0, sl, fp
 800b004:	9805      	ldr	r0, [sp, #20]
 800b006:	aa1c      	add	r2, sp, #112	@ 0x70
 800b008:	a91b      	add	r1, sp, #108	@ 0x6c
 800b00a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b00e:	f7ff fbd7 	bl	800a7c0 <__d2b>
 800b012:	901a      	str	r0, [sp, #104]	@ 0x68
 800b014:	2800      	cmp	r0, #0
 800b016:	f43f aede 	beq.w	800add6 <_strtod_l+0x43e>
 800b01a:	9805      	ldr	r0, [sp, #20]
 800b01c:	2101      	movs	r1, #1
 800b01e:	f7ff f929 	bl	800a274 <__i2b>
 800b022:	4680      	mov	r8, r0
 800b024:	b948      	cbnz	r0, 800b03a <_strtod_l+0x6a2>
 800b026:	f04f 0800 	mov.w	r8, #0
 800b02a:	e6d4      	b.n	800add6 <_strtod_l+0x43e>
 800b02c:	f04f 32ff 	mov.w	r2, #4294967295
 800b030:	fa02 f303 	lsl.w	r3, r2, r3
 800b034:	ea03 0a0a 	and.w	sl, r3, sl
 800b038:	e7b0      	b.n	800af9c <_strtod_l+0x604>
 800b03a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b03c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b03e:	2d00      	cmp	r5, #0
 800b040:	bfab      	itete	ge
 800b042:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b044:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b046:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b048:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b04a:	bfac      	ite	ge
 800b04c:	18ef      	addge	r7, r5, r3
 800b04e:	1b5e      	sublt	r6, r3, r5
 800b050:	9b08      	ldr	r3, [sp, #32]
 800b052:	1aed      	subs	r5, r5, r3
 800b054:	4415      	add	r5, r2
 800b056:	4b66      	ldr	r3, [pc, #408]	@ (800b1f0 <_strtod_l+0x858>)
 800b058:	3d01      	subs	r5, #1
 800b05a:	429d      	cmp	r5, r3
 800b05c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b060:	da50      	bge.n	800b104 <_strtod_l+0x76c>
 800b062:	1b5b      	subs	r3, r3, r5
 800b064:	2b1f      	cmp	r3, #31
 800b066:	eba2 0203 	sub.w	r2, r2, r3
 800b06a:	f04f 0101 	mov.w	r1, #1
 800b06e:	dc3d      	bgt.n	800b0ec <_strtod_l+0x754>
 800b070:	fa01 f303 	lsl.w	r3, r1, r3
 800b074:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b076:	2300      	movs	r3, #0
 800b078:	9310      	str	r3, [sp, #64]	@ 0x40
 800b07a:	18bd      	adds	r5, r7, r2
 800b07c:	9b08      	ldr	r3, [sp, #32]
 800b07e:	42af      	cmp	r7, r5
 800b080:	4416      	add	r6, r2
 800b082:	441e      	add	r6, r3
 800b084:	463b      	mov	r3, r7
 800b086:	bfa8      	it	ge
 800b088:	462b      	movge	r3, r5
 800b08a:	42b3      	cmp	r3, r6
 800b08c:	bfa8      	it	ge
 800b08e:	4633      	movge	r3, r6
 800b090:	2b00      	cmp	r3, #0
 800b092:	bfc2      	ittt	gt
 800b094:	1aed      	subgt	r5, r5, r3
 800b096:	1af6      	subgt	r6, r6, r3
 800b098:	1aff      	subgt	r7, r7, r3
 800b09a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	dd16      	ble.n	800b0ce <_strtod_l+0x736>
 800b0a0:	4641      	mov	r1, r8
 800b0a2:	9805      	ldr	r0, [sp, #20]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	f7ff f9a5 	bl	800a3f4 <__pow5mult>
 800b0aa:	4680      	mov	r8, r0
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d0ba      	beq.n	800b026 <_strtod_l+0x68e>
 800b0b0:	4601      	mov	r1, r0
 800b0b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b0b4:	9805      	ldr	r0, [sp, #20]
 800b0b6:	f7ff f8f3 	bl	800a2a0 <__multiply>
 800b0ba:	900e      	str	r0, [sp, #56]	@ 0x38
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	f43f ae8a 	beq.w	800add6 <_strtod_l+0x43e>
 800b0c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0c4:	9805      	ldr	r0, [sp, #20]
 800b0c6:	f7fe ffd7 	bl	800a078 <_Bfree>
 800b0ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0ce:	2d00      	cmp	r5, #0
 800b0d0:	dc1d      	bgt.n	800b10e <_strtod_l+0x776>
 800b0d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	dd23      	ble.n	800b120 <_strtod_l+0x788>
 800b0d8:	4649      	mov	r1, r9
 800b0da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b0dc:	9805      	ldr	r0, [sp, #20]
 800b0de:	f7ff f989 	bl	800a3f4 <__pow5mult>
 800b0e2:	4681      	mov	r9, r0
 800b0e4:	b9e0      	cbnz	r0, 800b120 <_strtod_l+0x788>
 800b0e6:	f04f 0900 	mov.w	r9, #0
 800b0ea:	e674      	b.n	800add6 <_strtod_l+0x43e>
 800b0ec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b0f0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b0f4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b0f8:	35e2      	adds	r5, #226	@ 0xe2
 800b0fa:	fa01 f305 	lsl.w	r3, r1, r5
 800b0fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800b100:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b102:	e7ba      	b.n	800b07a <_strtod_l+0x6e2>
 800b104:	2300      	movs	r3, #0
 800b106:	9310      	str	r3, [sp, #64]	@ 0x40
 800b108:	2301      	movs	r3, #1
 800b10a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b10c:	e7b5      	b.n	800b07a <_strtod_l+0x6e2>
 800b10e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b110:	9805      	ldr	r0, [sp, #20]
 800b112:	462a      	mov	r2, r5
 800b114:	f7ff f9c8 	bl	800a4a8 <__lshift>
 800b118:	901a      	str	r0, [sp, #104]	@ 0x68
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d1d9      	bne.n	800b0d2 <_strtod_l+0x73a>
 800b11e:	e65a      	b.n	800add6 <_strtod_l+0x43e>
 800b120:	2e00      	cmp	r6, #0
 800b122:	dd07      	ble.n	800b134 <_strtod_l+0x79c>
 800b124:	4649      	mov	r1, r9
 800b126:	9805      	ldr	r0, [sp, #20]
 800b128:	4632      	mov	r2, r6
 800b12a:	f7ff f9bd 	bl	800a4a8 <__lshift>
 800b12e:	4681      	mov	r9, r0
 800b130:	2800      	cmp	r0, #0
 800b132:	d0d8      	beq.n	800b0e6 <_strtod_l+0x74e>
 800b134:	2f00      	cmp	r7, #0
 800b136:	dd08      	ble.n	800b14a <_strtod_l+0x7b2>
 800b138:	4641      	mov	r1, r8
 800b13a:	9805      	ldr	r0, [sp, #20]
 800b13c:	463a      	mov	r2, r7
 800b13e:	f7ff f9b3 	bl	800a4a8 <__lshift>
 800b142:	4680      	mov	r8, r0
 800b144:	2800      	cmp	r0, #0
 800b146:	f43f ae46 	beq.w	800add6 <_strtod_l+0x43e>
 800b14a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b14c:	9805      	ldr	r0, [sp, #20]
 800b14e:	464a      	mov	r2, r9
 800b150:	f7ff fa32 	bl	800a5b8 <__mdiff>
 800b154:	4604      	mov	r4, r0
 800b156:	2800      	cmp	r0, #0
 800b158:	f43f ae3d 	beq.w	800add6 <_strtod_l+0x43e>
 800b15c:	68c3      	ldr	r3, [r0, #12]
 800b15e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b160:	2300      	movs	r3, #0
 800b162:	60c3      	str	r3, [r0, #12]
 800b164:	4641      	mov	r1, r8
 800b166:	f7ff fa0b 	bl	800a580 <__mcmp>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	da46      	bge.n	800b1fc <_strtod_l+0x864>
 800b16e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b170:	ea53 030a 	orrs.w	r3, r3, sl
 800b174:	d16c      	bne.n	800b250 <_strtod_l+0x8b8>
 800b176:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d168      	bne.n	800b250 <_strtod_l+0x8b8>
 800b17e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b182:	0d1b      	lsrs	r3, r3, #20
 800b184:	051b      	lsls	r3, r3, #20
 800b186:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b18a:	d961      	bls.n	800b250 <_strtod_l+0x8b8>
 800b18c:	6963      	ldr	r3, [r4, #20]
 800b18e:	b913      	cbnz	r3, 800b196 <_strtod_l+0x7fe>
 800b190:	6923      	ldr	r3, [r4, #16]
 800b192:	2b01      	cmp	r3, #1
 800b194:	dd5c      	ble.n	800b250 <_strtod_l+0x8b8>
 800b196:	4621      	mov	r1, r4
 800b198:	2201      	movs	r2, #1
 800b19a:	9805      	ldr	r0, [sp, #20]
 800b19c:	f7ff f984 	bl	800a4a8 <__lshift>
 800b1a0:	4641      	mov	r1, r8
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	f7ff f9ec 	bl	800a580 <__mcmp>
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	dd51      	ble.n	800b250 <_strtod_l+0x8b8>
 800b1ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b1b0:	9a08      	ldr	r2, [sp, #32]
 800b1b2:	0d1b      	lsrs	r3, r3, #20
 800b1b4:	051b      	lsls	r3, r3, #20
 800b1b6:	2a00      	cmp	r2, #0
 800b1b8:	d06b      	beq.n	800b292 <_strtod_l+0x8fa>
 800b1ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b1be:	d868      	bhi.n	800b292 <_strtod_l+0x8fa>
 800b1c0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b1c4:	f67f ae9d 	bls.w	800af02 <_strtod_l+0x56a>
 800b1c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b1f4 <_strtod_l+0x85c>)
 800b1ca:	4650      	mov	r0, sl
 800b1cc:	4659      	mov	r1, fp
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f7f5 fa3a 	bl	8000648 <__aeabi_dmul>
 800b1d4:	4b08      	ldr	r3, [pc, #32]	@ (800b1f8 <_strtod_l+0x860>)
 800b1d6:	400b      	ands	r3, r1
 800b1d8:	4682      	mov	sl, r0
 800b1da:	468b      	mov	fp, r1
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f47f ae05 	bne.w	800adec <_strtod_l+0x454>
 800b1e2:	9a05      	ldr	r2, [sp, #20]
 800b1e4:	2322      	movs	r3, #34	@ 0x22
 800b1e6:	6013      	str	r3, [r2, #0]
 800b1e8:	e600      	b.n	800adec <_strtod_l+0x454>
 800b1ea:	bf00      	nop
 800b1ec:	0800d298 	.word	0x0800d298
 800b1f0:	fffffc02 	.word	0xfffffc02
 800b1f4:	39500000 	.word	0x39500000
 800b1f8:	7ff00000 	.word	0x7ff00000
 800b1fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b200:	d165      	bne.n	800b2ce <_strtod_l+0x936>
 800b202:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b204:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b208:	b35a      	cbz	r2, 800b262 <_strtod_l+0x8ca>
 800b20a:	4a9f      	ldr	r2, [pc, #636]	@ (800b488 <_strtod_l+0xaf0>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d12b      	bne.n	800b268 <_strtod_l+0x8d0>
 800b210:	9b08      	ldr	r3, [sp, #32]
 800b212:	4651      	mov	r1, sl
 800b214:	b303      	cbz	r3, 800b258 <_strtod_l+0x8c0>
 800b216:	4b9d      	ldr	r3, [pc, #628]	@ (800b48c <_strtod_l+0xaf4>)
 800b218:	465a      	mov	r2, fp
 800b21a:	4013      	ands	r3, r2
 800b21c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b220:	f04f 32ff 	mov.w	r2, #4294967295
 800b224:	d81b      	bhi.n	800b25e <_strtod_l+0x8c6>
 800b226:	0d1b      	lsrs	r3, r3, #20
 800b228:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b22c:	fa02 f303 	lsl.w	r3, r2, r3
 800b230:	4299      	cmp	r1, r3
 800b232:	d119      	bne.n	800b268 <_strtod_l+0x8d0>
 800b234:	4b96      	ldr	r3, [pc, #600]	@ (800b490 <_strtod_l+0xaf8>)
 800b236:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b238:	429a      	cmp	r2, r3
 800b23a:	d102      	bne.n	800b242 <_strtod_l+0x8aa>
 800b23c:	3101      	adds	r1, #1
 800b23e:	f43f adca 	beq.w	800add6 <_strtod_l+0x43e>
 800b242:	4b92      	ldr	r3, [pc, #584]	@ (800b48c <_strtod_l+0xaf4>)
 800b244:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b246:	401a      	ands	r2, r3
 800b248:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b24c:	f04f 0a00 	mov.w	sl, #0
 800b250:	9b08      	ldr	r3, [sp, #32]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1b8      	bne.n	800b1c8 <_strtod_l+0x830>
 800b256:	e5c9      	b.n	800adec <_strtod_l+0x454>
 800b258:	f04f 33ff 	mov.w	r3, #4294967295
 800b25c:	e7e8      	b.n	800b230 <_strtod_l+0x898>
 800b25e:	4613      	mov	r3, r2
 800b260:	e7e6      	b.n	800b230 <_strtod_l+0x898>
 800b262:	ea53 030a 	orrs.w	r3, r3, sl
 800b266:	d0a1      	beq.n	800b1ac <_strtod_l+0x814>
 800b268:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b26a:	b1db      	cbz	r3, 800b2a4 <_strtod_l+0x90c>
 800b26c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b26e:	4213      	tst	r3, r2
 800b270:	d0ee      	beq.n	800b250 <_strtod_l+0x8b8>
 800b272:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b274:	9a08      	ldr	r2, [sp, #32]
 800b276:	4650      	mov	r0, sl
 800b278:	4659      	mov	r1, fp
 800b27a:	b1bb      	cbz	r3, 800b2ac <_strtod_l+0x914>
 800b27c:	f7ff fb6e 	bl	800a95c <sulp>
 800b280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b284:	ec53 2b10 	vmov	r2, r3, d0
 800b288:	f7f5 f828 	bl	80002dc <__adddf3>
 800b28c:	4682      	mov	sl, r0
 800b28e:	468b      	mov	fp, r1
 800b290:	e7de      	b.n	800b250 <_strtod_l+0x8b8>
 800b292:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b296:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b29a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b29e:	f04f 3aff 	mov.w	sl, #4294967295
 800b2a2:	e7d5      	b.n	800b250 <_strtod_l+0x8b8>
 800b2a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b2a6:	ea13 0f0a 	tst.w	r3, sl
 800b2aa:	e7e1      	b.n	800b270 <_strtod_l+0x8d8>
 800b2ac:	f7ff fb56 	bl	800a95c <sulp>
 800b2b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2b4:	ec53 2b10 	vmov	r2, r3, d0
 800b2b8:	f7f5 f80e 	bl	80002d8 <__aeabi_dsub>
 800b2bc:	2200      	movs	r2, #0
 800b2be:	2300      	movs	r3, #0
 800b2c0:	4682      	mov	sl, r0
 800b2c2:	468b      	mov	fp, r1
 800b2c4:	f7f5 fc28 	bl	8000b18 <__aeabi_dcmpeq>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d0c1      	beq.n	800b250 <_strtod_l+0x8b8>
 800b2cc:	e619      	b.n	800af02 <_strtod_l+0x56a>
 800b2ce:	4641      	mov	r1, r8
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f7ff facd 	bl	800a870 <__ratio>
 800b2d6:	ec57 6b10 	vmov	r6, r7, d0
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	f7f5 fc2c 	bl	8000b40 <__aeabi_dcmple>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d06f      	beq.n	800b3cc <_strtod_l+0xa34>
 800b2ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d17a      	bne.n	800b3e8 <_strtod_l+0xa50>
 800b2f2:	f1ba 0f00 	cmp.w	sl, #0
 800b2f6:	d158      	bne.n	800b3aa <_strtod_l+0xa12>
 800b2f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d15a      	bne.n	800b3b8 <_strtod_l+0xa20>
 800b302:	4b64      	ldr	r3, [pc, #400]	@ (800b494 <_strtod_l+0xafc>)
 800b304:	2200      	movs	r2, #0
 800b306:	4630      	mov	r0, r6
 800b308:	4639      	mov	r1, r7
 800b30a:	f7f5 fc0f 	bl	8000b2c <__aeabi_dcmplt>
 800b30e:	2800      	cmp	r0, #0
 800b310:	d159      	bne.n	800b3c6 <_strtod_l+0xa2e>
 800b312:	4630      	mov	r0, r6
 800b314:	4639      	mov	r1, r7
 800b316:	4b60      	ldr	r3, [pc, #384]	@ (800b498 <_strtod_l+0xb00>)
 800b318:	2200      	movs	r2, #0
 800b31a:	f7f5 f995 	bl	8000648 <__aeabi_dmul>
 800b31e:	4606      	mov	r6, r0
 800b320:	460f      	mov	r7, r1
 800b322:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b326:	9606      	str	r6, [sp, #24]
 800b328:	9307      	str	r3, [sp, #28]
 800b32a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b32e:	4d57      	ldr	r5, [pc, #348]	@ (800b48c <_strtod_l+0xaf4>)
 800b330:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b334:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b336:	401d      	ands	r5, r3
 800b338:	4b58      	ldr	r3, [pc, #352]	@ (800b49c <_strtod_l+0xb04>)
 800b33a:	429d      	cmp	r5, r3
 800b33c:	f040 80b2 	bne.w	800b4a4 <_strtod_l+0xb0c>
 800b340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b342:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b346:	ec4b ab10 	vmov	d0, sl, fp
 800b34a:	f7ff f9c9 	bl	800a6e0 <__ulp>
 800b34e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b352:	ec51 0b10 	vmov	r0, r1, d0
 800b356:	f7f5 f977 	bl	8000648 <__aeabi_dmul>
 800b35a:	4652      	mov	r2, sl
 800b35c:	465b      	mov	r3, fp
 800b35e:	f7f4 ffbd 	bl	80002dc <__adddf3>
 800b362:	460b      	mov	r3, r1
 800b364:	4949      	ldr	r1, [pc, #292]	@ (800b48c <_strtod_l+0xaf4>)
 800b366:	4a4e      	ldr	r2, [pc, #312]	@ (800b4a0 <_strtod_l+0xb08>)
 800b368:	4019      	ands	r1, r3
 800b36a:	4291      	cmp	r1, r2
 800b36c:	4682      	mov	sl, r0
 800b36e:	d942      	bls.n	800b3f6 <_strtod_l+0xa5e>
 800b370:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b372:	4b47      	ldr	r3, [pc, #284]	@ (800b490 <_strtod_l+0xaf8>)
 800b374:	429a      	cmp	r2, r3
 800b376:	d103      	bne.n	800b380 <_strtod_l+0x9e8>
 800b378:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b37a:	3301      	adds	r3, #1
 800b37c:	f43f ad2b 	beq.w	800add6 <_strtod_l+0x43e>
 800b380:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b490 <_strtod_l+0xaf8>
 800b384:	f04f 3aff 	mov.w	sl, #4294967295
 800b388:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b38a:	9805      	ldr	r0, [sp, #20]
 800b38c:	f7fe fe74 	bl	800a078 <_Bfree>
 800b390:	9805      	ldr	r0, [sp, #20]
 800b392:	4649      	mov	r1, r9
 800b394:	f7fe fe70 	bl	800a078 <_Bfree>
 800b398:	9805      	ldr	r0, [sp, #20]
 800b39a:	4641      	mov	r1, r8
 800b39c:	f7fe fe6c 	bl	800a078 <_Bfree>
 800b3a0:	9805      	ldr	r0, [sp, #20]
 800b3a2:	4621      	mov	r1, r4
 800b3a4:	f7fe fe68 	bl	800a078 <_Bfree>
 800b3a8:	e618      	b.n	800afdc <_strtod_l+0x644>
 800b3aa:	f1ba 0f01 	cmp.w	sl, #1
 800b3ae:	d103      	bne.n	800b3b8 <_strtod_l+0xa20>
 800b3b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f43f ada5 	beq.w	800af02 <_strtod_l+0x56a>
 800b3b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b468 <_strtod_l+0xad0>
 800b3bc:	4f35      	ldr	r7, [pc, #212]	@ (800b494 <_strtod_l+0xafc>)
 800b3be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b3c2:	2600      	movs	r6, #0
 800b3c4:	e7b1      	b.n	800b32a <_strtod_l+0x992>
 800b3c6:	4f34      	ldr	r7, [pc, #208]	@ (800b498 <_strtod_l+0xb00>)
 800b3c8:	2600      	movs	r6, #0
 800b3ca:	e7aa      	b.n	800b322 <_strtod_l+0x98a>
 800b3cc:	4b32      	ldr	r3, [pc, #200]	@ (800b498 <_strtod_l+0xb00>)
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	4639      	mov	r1, r7
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f7f5 f938 	bl	8000648 <__aeabi_dmul>
 800b3d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3da:	4606      	mov	r6, r0
 800b3dc:	460f      	mov	r7, r1
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d09f      	beq.n	800b322 <_strtod_l+0x98a>
 800b3e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b3e6:	e7a0      	b.n	800b32a <_strtod_l+0x992>
 800b3e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b470 <_strtod_l+0xad8>
 800b3ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b3f0:	ec57 6b17 	vmov	r6, r7, d7
 800b3f4:	e799      	b.n	800b32a <_strtod_l+0x992>
 800b3f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b3fa:	9b08      	ldr	r3, [sp, #32]
 800b3fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1c1      	bne.n	800b388 <_strtod_l+0x9f0>
 800b404:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b408:	0d1b      	lsrs	r3, r3, #20
 800b40a:	051b      	lsls	r3, r3, #20
 800b40c:	429d      	cmp	r5, r3
 800b40e:	d1bb      	bne.n	800b388 <_strtod_l+0x9f0>
 800b410:	4630      	mov	r0, r6
 800b412:	4639      	mov	r1, r7
 800b414:	f7f5 fc78 	bl	8000d08 <__aeabi_d2lz>
 800b418:	f7f5 f8e8 	bl	80005ec <__aeabi_l2d>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	4630      	mov	r0, r6
 800b422:	4639      	mov	r1, r7
 800b424:	f7f4 ff58 	bl	80002d8 <__aeabi_dsub>
 800b428:	460b      	mov	r3, r1
 800b42a:	4602      	mov	r2, r0
 800b42c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b430:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b436:	ea46 060a 	orr.w	r6, r6, sl
 800b43a:	431e      	orrs	r6, r3
 800b43c:	d06f      	beq.n	800b51e <_strtod_l+0xb86>
 800b43e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b478 <_strtod_l+0xae0>)
 800b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b444:	f7f5 fb72 	bl	8000b2c <__aeabi_dcmplt>
 800b448:	2800      	cmp	r0, #0
 800b44a:	f47f accf 	bne.w	800adec <_strtod_l+0x454>
 800b44e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b480 <_strtod_l+0xae8>)
 800b450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b454:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b458:	f7f5 fb86 	bl	8000b68 <__aeabi_dcmpgt>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d093      	beq.n	800b388 <_strtod_l+0x9f0>
 800b460:	e4c4      	b.n	800adec <_strtod_l+0x454>
 800b462:	bf00      	nop
 800b464:	f3af 8000 	nop.w
 800b468:	00000000 	.word	0x00000000
 800b46c:	bff00000 	.word	0xbff00000
 800b470:	00000000 	.word	0x00000000
 800b474:	3ff00000 	.word	0x3ff00000
 800b478:	94a03595 	.word	0x94a03595
 800b47c:	3fdfffff 	.word	0x3fdfffff
 800b480:	35afe535 	.word	0x35afe535
 800b484:	3fe00000 	.word	0x3fe00000
 800b488:	000fffff 	.word	0x000fffff
 800b48c:	7ff00000 	.word	0x7ff00000
 800b490:	7fefffff 	.word	0x7fefffff
 800b494:	3ff00000 	.word	0x3ff00000
 800b498:	3fe00000 	.word	0x3fe00000
 800b49c:	7fe00000 	.word	0x7fe00000
 800b4a0:	7c9fffff 	.word	0x7c9fffff
 800b4a4:	9b08      	ldr	r3, [sp, #32]
 800b4a6:	b323      	cbz	r3, 800b4f2 <_strtod_l+0xb5a>
 800b4a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b4ac:	d821      	bhi.n	800b4f2 <_strtod_l+0xb5a>
 800b4ae:	a328      	add	r3, pc, #160	@ (adr r3, 800b550 <_strtod_l+0xbb8>)
 800b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	4639      	mov	r1, r7
 800b4b8:	f7f5 fb42 	bl	8000b40 <__aeabi_dcmple>
 800b4bc:	b1a0      	cbz	r0, 800b4e8 <_strtod_l+0xb50>
 800b4be:	4639      	mov	r1, r7
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f7f5 fb99 	bl	8000bf8 <__aeabi_d2uiz>
 800b4c6:	2801      	cmp	r0, #1
 800b4c8:	bf38      	it	cc
 800b4ca:	2001      	movcc	r0, #1
 800b4cc:	f7f5 f842 	bl	8000554 <__aeabi_ui2d>
 800b4d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	460f      	mov	r7, r1
 800b4d6:	b9fb      	cbnz	r3, 800b518 <_strtod_l+0xb80>
 800b4d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b4dc:	9014      	str	r0, [sp, #80]	@ 0x50
 800b4de:	9315      	str	r3, [sp, #84]	@ 0x54
 800b4e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b4e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b4e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b4ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b4ee:	1b5b      	subs	r3, r3, r5
 800b4f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b4f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b4f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b4fa:	f7ff f8f1 	bl	800a6e0 <__ulp>
 800b4fe:	4650      	mov	r0, sl
 800b500:	ec53 2b10 	vmov	r2, r3, d0
 800b504:	4659      	mov	r1, fp
 800b506:	f7f5 f89f 	bl	8000648 <__aeabi_dmul>
 800b50a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b50e:	f7f4 fee5 	bl	80002dc <__adddf3>
 800b512:	4682      	mov	sl, r0
 800b514:	468b      	mov	fp, r1
 800b516:	e770      	b.n	800b3fa <_strtod_l+0xa62>
 800b518:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b51c:	e7e0      	b.n	800b4e0 <_strtod_l+0xb48>
 800b51e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b558 <_strtod_l+0xbc0>)
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f7f5 fb02 	bl	8000b2c <__aeabi_dcmplt>
 800b528:	e798      	b.n	800b45c <_strtod_l+0xac4>
 800b52a:	2300      	movs	r3, #0
 800b52c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b52e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b530:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b532:	6013      	str	r3, [r2, #0]
 800b534:	f7ff ba6d 	b.w	800aa12 <_strtod_l+0x7a>
 800b538:	2a65      	cmp	r2, #101	@ 0x65
 800b53a:	f43f ab66 	beq.w	800ac0a <_strtod_l+0x272>
 800b53e:	2a45      	cmp	r2, #69	@ 0x45
 800b540:	f43f ab63 	beq.w	800ac0a <_strtod_l+0x272>
 800b544:	2301      	movs	r3, #1
 800b546:	f7ff bb9e 	b.w	800ac86 <_strtod_l+0x2ee>
 800b54a:	bf00      	nop
 800b54c:	f3af 8000 	nop.w
 800b550:	ffc00000 	.word	0xffc00000
 800b554:	41dfffff 	.word	0x41dfffff
 800b558:	94a03595 	.word	0x94a03595
 800b55c:	3fcfffff 	.word	0x3fcfffff

0800b560 <_strtod_r>:
 800b560:	4b01      	ldr	r3, [pc, #4]	@ (800b568 <_strtod_r+0x8>)
 800b562:	f7ff ba19 	b.w	800a998 <_strtod_l>
 800b566:	bf00      	nop
 800b568:	2000008c 	.word	0x2000008c

0800b56c <_strtol_l.constprop.0>:
 800b56c:	2b24      	cmp	r3, #36	@ 0x24
 800b56e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b572:	4686      	mov	lr, r0
 800b574:	4690      	mov	r8, r2
 800b576:	d801      	bhi.n	800b57c <_strtol_l.constprop.0+0x10>
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d106      	bne.n	800b58a <_strtol_l.constprop.0+0x1e>
 800b57c:	f7fd fdbc 	bl	80090f8 <__errno>
 800b580:	2316      	movs	r3, #22
 800b582:	6003      	str	r3, [r0, #0]
 800b584:	2000      	movs	r0, #0
 800b586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b58a:	4834      	ldr	r0, [pc, #208]	@ (800b65c <_strtol_l.constprop.0+0xf0>)
 800b58c:	460d      	mov	r5, r1
 800b58e:	462a      	mov	r2, r5
 800b590:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b594:	5d06      	ldrb	r6, [r0, r4]
 800b596:	f016 0608 	ands.w	r6, r6, #8
 800b59a:	d1f8      	bne.n	800b58e <_strtol_l.constprop.0+0x22>
 800b59c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b59e:	d12d      	bne.n	800b5fc <_strtol_l.constprop.0+0x90>
 800b5a0:	782c      	ldrb	r4, [r5, #0]
 800b5a2:	2601      	movs	r6, #1
 800b5a4:	1c95      	adds	r5, r2, #2
 800b5a6:	f033 0210 	bics.w	r2, r3, #16
 800b5aa:	d109      	bne.n	800b5c0 <_strtol_l.constprop.0+0x54>
 800b5ac:	2c30      	cmp	r4, #48	@ 0x30
 800b5ae:	d12a      	bne.n	800b606 <_strtol_l.constprop.0+0x9a>
 800b5b0:	782a      	ldrb	r2, [r5, #0]
 800b5b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b5b6:	2a58      	cmp	r2, #88	@ 0x58
 800b5b8:	d125      	bne.n	800b606 <_strtol_l.constprop.0+0x9a>
 800b5ba:	786c      	ldrb	r4, [r5, #1]
 800b5bc:	2310      	movs	r3, #16
 800b5be:	3502      	adds	r5, #2
 800b5c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b5c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	fbbc f9f3 	udiv	r9, ip, r3
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b5d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b5d8:	2f09      	cmp	r7, #9
 800b5da:	d81b      	bhi.n	800b614 <_strtol_l.constprop.0+0xa8>
 800b5dc:	463c      	mov	r4, r7
 800b5de:	42a3      	cmp	r3, r4
 800b5e0:	dd27      	ble.n	800b632 <_strtol_l.constprop.0+0xc6>
 800b5e2:	1c57      	adds	r7, r2, #1
 800b5e4:	d007      	beq.n	800b5f6 <_strtol_l.constprop.0+0x8a>
 800b5e6:	4581      	cmp	r9, r0
 800b5e8:	d320      	bcc.n	800b62c <_strtol_l.constprop.0+0xc0>
 800b5ea:	d101      	bne.n	800b5f0 <_strtol_l.constprop.0+0x84>
 800b5ec:	45a2      	cmp	sl, r4
 800b5ee:	db1d      	blt.n	800b62c <_strtol_l.constprop.0+0xc0>
 800b5f0:	fb00 4003 	mla	r0, r0, r3, r4
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5fa:	e7eb      	b.n	800b5d4 <_strtol_l.constprop.0+0x68>
 800b5fc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b5fe:	bf04      	itt	eq
 800b600:	782c      	ldrbeq	r4, [r5, #0]
 800b602:	1c95      	addeq	r5, r2, #2
 800b604:	e7cf      	b.n	800b5a6 <_strtol_l.constprop.0+0x3a>
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1da      	bne.n	800b5c0 <_strtol_l.constprop.0+0x54>
 800b60a:	2c30      	cmp	r4, #48	@ 0x30
 800b60c:	bf0c      	ite	eq
 800b60e:	2308      	moveq	r3, #8
 800b610:	230a      	movne	r3, #10
 800b612:	e7d5      	b.n	800b5c0 <_strtol_l.constprop.0+0x54>
 800b614:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b618:	2f19      	cmp	r7, #25
 800b61a:	d801      	bhi.n	800b620 <_strtol_l.constprop.0+0xb4>
 800b61c:	3c37      	subs	r4, #55	@ 0x37
 800b61e:	e7de      	b.n	800b5de <_strtol_l.constprop.0+0x72>
 800b620:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b624:	2f19      	cmp	r7, #25
 800b626:	d804      	bhi.n	800b632 <_strtol_l.constprop.0+0xc6>
 800b628:	3c57      	subs	r4, #87	@ 0x57
 800b62a:	e7d8      	b.n	800b5de <_strtol_l.constprop.0+0x72>
 800b62c:	f04f 32ff 	mov.w	r2, #4294967295
 800b630:	e7e1      	b.n	800b5f6 <_strtol_l.constprop.0+0x8a>
 800b632:	1c53      	adds	r3, r2, #1
 800b634:	d108      	bne.n	800b648 <_strtol_l.constprop.0+0xdc>
 800b636:	2322      	movs	r3, #34	@ 0x22
 800b638:	f8ce 3000 	str.w	r3, [lr]
 800b63c:	4660      	mov	r0, ip
 800b63e:	f1b8 0f00 	cmp.w	r8, #0
 800b642:	d0a0      	beq.n	800b586 <_strtol_l.constprop.0+0x1a>
 800b644:	1e69      	subs	r1, r5, #1
 800b646:	e006      	b.n	800b656 <_strtol_l.constprop.0+0xea>
 800b648:	b106      	cbz	r6, 800b64c <_strtol_l.constprop.0+0xe0>
 800b64a:	4240      	negs	r0, r0
 800b64c:	f1b8 0f00 	cmp.w	r8, #0
 800b650:	d099      	beq.n	800b586 <_strtol_l.constprop.0+0x1a>
 800b652:	2a00      	cmp	r2, #0
 800b654:	d1f6      	bne.n	800b644 <_strtol_l.constprop.0+0xd8>
 800b656:	f8c8 1000 	str.w	r1, [r8]
 800b65a:	e794      	b.n	800b586 <_strtol_l.constprop.0+0x1a>
 800b65c:	0800d2c1 	.word	0x0800d2c1

0800b660 <_strtol_r>:
 800b660:	f7ff bf84 	b.w	800b56c <_strtol_l.constprop.0>

0800b664 <__ssputs_r>:
 800b664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b668:	688e      	ldr	r6, [r1, #8]
 800b66a:	461f      	mov	r7, r3
 800b66c:	42be      	cmp	r6, r7
 800b66e:	680b      	ldr	r3, [r1, #0]
 800b670:	4682      	mov	sl, r0
 800b672:	460c      	mov	r4, r1
 800b674:	4690      	mov	r8, r2
 800b676:	d82d      	bhi.n	800b6d4 <__ssputs_r+0x70>
 800b678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b67c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b680:	d026      	beq.n	800b6d0 <__ssputs_r+0x6c>
 800b682:	6965      	ldr	r5, [r4, #20]
 800b684:	6909      	ldr	r1, [r1, #16]
 800b686:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b68a:	eba3 0901 	sub.w	r9, r3, r1
 800b68e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b692:	1c7b      	adds	r3, r7, #1
 800b694:	444b      	add	r3, r9
 800b696:	106d      	asrs	r5, r5, #1
 800b698:	429d      	cmp	r5, r3
 800b69a:	bf38      	it	cc
 800b69c:	461d      	movcc	r5, r3
 800b69e:	0553      	lsls	r3, r2, #21
 800b6a0:	d527      	bpl.n	800b6f2 <__ssputs_r+0x8e>
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	f7fe fc1c 	bl	8009ee0 <_malloc_r>
 800b6a8:	4606      	mov	r6, r0
 800b6aa:	b360      	cbz	r0, 800b706 <__ssputs_r+0xa2>
 800b6ac:	6921      	ldr	r1, [r4, #16]
 800b6ae:	464a      	mov	r2, r9
 800b6b0:	f000 fa18 	bl	800bae4 <memcpy>
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b6ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6be:	81a3      	strh	r3, [r4, #12]
 800b6c0:	6126      	str	r6, [r4, #16]
 800b6c2:	6165      	str	r5, [r4, #20]
 800b6c4:	444e      	add	r6, r9
 800b6c6:	eba5 0509 	sub.w	r5, r5, r9
 800b6ca:	6026      	str	r6, [r4, #0]
 800b6cc:	60a5      	str	r5, [r4, #8]
 800b6ce:	463e      	mov	r6, r7
 800b6d0:	42be      	cmp	r6, r7
 800b6d2:	d900      	bls.n	800b6d6 <__ssputs_r+0x72>
 800b6d4:	463e      	mov	r6, r7
 800b6d6:	6820      	ldr	r0, [r4, #0]
 800b6d8:	4632      	mov	r2, r6
 800b6da:	4641      	mov	r1, r8
 800b6dc:	f000 f9c6 	bl	800ba6c <memmove>
 800b6e0:	68a3      	ldr	r3, [r4, #8]
 800b6e2:	1b9b      	subs	r3, r3, r6
 800b6e4:	60a3      	str	r3, [r4, #8]
 800b6e6:	6823      	ldr	r3, [r4, #0]
 800b6e8:	4433      	add	r3, r6
 800b6ea:	6023      	str	r3, [r4, #0]
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f2:	462a      	mov	r2, r5
 800b6f4:	f000 fd89 	bl	800c20a <_realloc_r>
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d1e0      	bne.n	800b6c0 <__ssputs_r+0x5c>
 800b6fe:	6921      	ldr	r1, [r4, #16]
 800b700:	4650      	mov	r0, sl
 800b702:	f7fe fb79 	bl	8009df8 <_free_r>
 800b706:	230c      	movs	r3, #12
 800b708:	f8ca 3000 	str.w	r3, [sl]
 800b70c:	89a3      	ldrh	r3, [r4, #12]
 800b70e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b712:	81a3      	strh	r3, [r4, #12]
 800b714:	f04f 30ff 	mov.w	r0, #4294967295
 800b718:	e7e9      	b.n	800b6ee <__ssputs_r+0x8a>
	...

0800b71c <_svfiprintf_r>:
 800b71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b720:	4698      	mov	r8, r3
 800b722:	898b      	ldrh	r3, [r1, #12]
 800b724:	061b      	lsls	r3, r3, #24
 800b726:	b09d      	sub	sp, #116	@ 0x74
 800b728:	4607      	mov	r7, r0
 800b72a:	460d      	mov	r5, r1
 800b72c:	4614      	mov	r4, r2
 800b72e:	d510      	bpl.n	800b752 <_svfiprintf_r+0x36>
 800b730:	690b      	ldr	r3, [r1, #16]
 800b732:	b973      	cbnz	r3, 800b752 <_svfiprintf_r+0x36>
 800b734:	2140      	movs	r1, #64	@ 0x40
 800b736:	f7fe fbd3 	bl	8009ee0 <_malloc_r>
 800b73a:	6028      	str	r0, [r5, #0]
 800b73c:	6128      	str	r0, [r5, #16]
 800b73e:	b930      	cbnz	r0, 800b74e <_svfiprintf_r+0x32>
 800b740:	230c      	movs	r3, #12
 800b742:	603b      	str	r3, [r7, #0]
 800b744:	f04f 30ff 	mov.w	r0, #4294967295
 800b748:	b01d      	add	sp, #116	@ 0x74
 800b74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74e:	2340      	movs	r3, #64	@ 0x40
 800b750:	616b      	str	r3, [r5, #20]
 800b752:	2300      	movs	r3, #0
 800b754:	9309      	str	r3, [sp, #36]	@ 0x24
 800b756:	2320      	movs	r3, #32
 800b758:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b75c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b760:	2330      	movs	r3, #48	@ 0x30
 800b762:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b900 <_svfiprintf_r+0x1e4>
 800b766:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b76a:	f04f 0901 	mov.w	r9, #1
 800b76e:	4623      	mov	r3, r4
 800b770:	469a      	mov	sl, r3
 800b772:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b776:	b10a      	cbz	r2, 800b77c <_svfiprintf_r+0x60>
 800b778:	2a25      	cmp	r2, #37	@ 0x25
 800b77a:	d1f9      	bne.n	800b770 <_svfiprintf_r+0x54>
 800b77c:	ebba 0b04 	subs.w	fp, sl, r4
 800b780:	d00b      	beq.n	800b79a <_svfiprintf_r+0x7e>
 800b782:	465b      	mov	r3, fp
 800b784:	4622      	mov	r2, r4
 800b786:	4629      	mov	r1, r5
 800b788:	4638      	mov	r0, r7
 800b78a:	f7ff ff6b 	bl	800b664 <__ssputs_r>
 800b78e:	3001      	adds	r0, #1
 800b790:	f000 80a7 	beq.w	800b8e2 <_svfiprintf_r+0x1c6>
 800b794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b796:	445a      	add	r2, fp
 800b798:	9209      	str	r2, [sp, #36]	@ 0x24
 800b79a:	f89a 3000 	ldrb.w	r3, [sl]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f000 809f 	beq.w	800b8e2 <_svfiprintf_r+0x1c6>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7ae:	f10a 0a01 	add.w	sl, sl, #1
 800b7b2:	9304      	str	r3, [sp, #16]
 800b7b4:	9307      	str	r3, [sp, #28]
 800b7b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7bc:	4654      	mov	r4, sl
 800b7be:	2205      	movs	r2, #5
 800b7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c4:	484e      	ldr	r0, [pc, #312]	@ (800b900 <_svfiprintf_r+0x1e4>)
 800b7c6:	f7f4 fd2b 	bl	8000220 <memchr>
 800b7ca:	9a04      	ldr	r2, [sp, #16]
 800b7cc:	b9d8      	cbnz	r0, 800b806 <_svfiprintf_r+0xea>
 800b7ce:	06d0      	lsls	r0, r2, #27
 800b7d0:	bf44      	itt	mi
 800b7d2:	2320      	movmi	r3, #32
 800b7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7d8:	0711      	lsls	r1, r2, #28
 800b7da:	bf44      	itt	mi
 800b7dc:	232b      	movmi	r3, #43	@ 0x2b
 800b7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7e8:	d015      	beq.n	800b816 <_svfiprintf_r+0xfa>
 800b7ea:	9a07      	ldr	r2, [sp, #28]
 800b7ec:	4654      	mov	r4, sl
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	f04f 0c0a 	mov.w	ip, #10
 800b7f4:	4621      	mov	r1, r4
 800b7f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7fa:	3b30      	subs	r3, #48	@ 0x30
 800b7fc:	2b09      	cmp	r3, #9
 800b7fe:	d94b      	bls.n	800b898 <_svfiprintf_r+0x17c>
 800b800:	b1b0      	cbz	r0, 800b830 <_svfiprintf_r+0x114>
 800b802:	9207      	str	r2, [sp, #28]
 800b804:	e014      	b.n	800b830 <_svfiprintf_r+0x114>
 800b806:	eba0 0308 	sub.w	r3, r0, r8
 800b80a:	fa09 f303 	lsl.w	r3, r9, r3
 800b80e:	4313      	orrs	r3, r2
 800b810:	9304      	str	r3, [sp, #16]
 800b812:	46a2      	mov	sl, r4
 800b814:	e7d2      	b.n	800b7bc <_svfiprintf_r+0xa0>
 800b816:	9b03      	ldr	r3, [sp, #12]
 800b818:	1d19      	adds	r1, r3, #4
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	9103      	str	r1, [sp, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	bfbb      	ittet	lt
 800b822:	425b      	neglt	r3, r3
 800b824:	f042 0202 	orrlt.w	r2, r2, #2
 800b828:	9307      	strge	r3, [sp, #28]
 800b82a:	9307      	strlt	r3, [sp, #28]
 800b82c:	bfb8      	it	lt
 800b82e:	9204      	strlt	r2, [sp, #16]
 800b830:	7823      	ldrb	r3, [r4, #0]
 800b832:	2b2e      	cmp	r3, #46	@ 0x2e
 800b834:	d10a      	bne.n	800b84c <_svfiprintf_r+0x130>
 800b836:	7863      	ldrb	r3, [r4, #1]
 800b838:	2b2a      	cmp	r3, #42	@ 0x2a
 800b83a:	d132      	bne.n	800b8a2 <_svfiprintf_r+0x186>
 800b83c:	9b03      	ldr	r3, [sp, #12]
 800b83e:	1d1a      	adds	r2, r3, #4
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	9203      	str	r2, [sp, #12]
 800b844:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b848:	3402      	adds	r4, #2
 800b84a:	9305      	str	r3, [sp, #20]
 800b84c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b910 <_svfiprintf_r+0x1f4>
 800b850:	7821      	ldrb	r1, [r4, #0]
 800b852:	2203      	movs	r2, #3
 800b854:	4650      	mov	r0, sl
 800b856:	f7f4 fce3 	bl	8000220 <memchr>
 800b85a:	b138      	cbz	r0, 800b86c <_svfiprintf_r+0x150>
 800b85c:	9b04      	ldr	r3, [sp, #16]
 800b85e:	eba0 000a 	sub.w	r0, r0, sl
 800b862:	2240      	movs	r2, #64	@ 0x40
 800b864:	4082      	lsls	r2, r0
 800b866:	4313      	orrs	r3, r2
 800b868:	3401      	adds	r4, #1
 800b86a:	9304      	str	r3, [sp, #16]
 800b86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b870:	4824      	ldr	r0, [pc, #144]	@ (800b904 <_svfiprintf_r+0x1e8>)
 800b872:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b876:	2206      	movs	r2, #6
 800b878:	f7f4 fcd2 	bl	8000220 <memchr>
 800b87c:	2800      	cmp	r0, #0
 800b87e:	d036      	beq.n	800b8ee <_svfiprintf_r+0x1d2>
 800b880:	4b21      	ldr	r3, [pc, #132]	@ (800b908 <_svfiprintf_r+0x1ec>)
 800b882:	bb1b      	cbnz	r3, 800b8cc <_svfiprintf_r+0x1b0>
 800b884:	9b03      	ldr	r3, [sp, #12]
 800b886:	3307      	adds	r3, #7
 800b888:	f023 0307 	bic.w	r3, r3, #7
 800b88c:	3308      	adds	r3, #8
 800b88e:	9303      	str	r3, [sp, #12]
 800b890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b892:	4433      	add	r3, r6
 800b894:	9309      	str	r3, [sp, #36]	@ 0x24
 800b896:	e76a      	b.n	800b76e <_svfiprintf_r+0x52>
 800b898:	fb0c 3202 	mla	r2, ip, r2, r3
 800b89c:	460c      	mov	r4, r1
 800b89e:	2001      	movs	r0, #1
 800b8a0:	e7a8      	b.n	800b7f4 <_svfiprintf_r+0xd8>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	3401      	adds	r4, #1
 800b8a6:	9305      	str	r3, [sp, #20]
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	f04f 0c0a 	mov.w	ip, #10
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8b4:	3a30      	subs	r2, #48	@ 0x30
 800b8b6:	2a09      	cmp	r2, #9
 800b8b8:	d903      	bls.n	800b8c2 <_svfiprintf_r+0x1a6>
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d0c6      	beq.n	800b84c <_svfiprintf_r+0x130>
 800b8be:	9105      	str	r1, [sp, #20]
 800b8c0:	e7c4      	b.n	800b84c <_svfiprintf_r+0x130>
 800b8c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	e7f0      	b.n	800b8ae <_svfiprintf_r+0x192>
 800b8cc:	ab03      	add	r3, sp, #12
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	462a      	mov	r2, r5
 800b8d2:	4b0e      	ldr	r3, [pc, #56]	@ (800b90c <_svfiprintf_r+0x1f0>)
 800b8d4:	a904      	add	r1, sp, #16
 800b8d6:	4638      	mov	r0, r7
 800b8d8:	f7fc fcca 	bl	8008270 <_printf_float>
 800b8dc:	1c42      	adds	r2, r0, #1
 800b8de:	4606      	mov	r6, r0
 800b8e0:	d1d6      	bne.n	800b890 <_svfiprintf_r+0x174>
 800b8e2:	89ab      	ldrh	r3, [r5, #12]
 800b8e4:	065b      	lsls	r3, r3, #25
 800b8e6:	f53f af2d 	bmi.w	800b744 <_svfiprintf_r+0x28>
 800b8ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8ec:	e72c      	b.n	800b748 <_svfiprintf_r+0x2c>
 800b8ee:	ab03      	add	r3, sp, #12
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	462a      	mov	r2, r5
 800b8f4:	4b05      	ldr	r3, [pc, #20]	@ (800b90c <_svfiprintf_r+0x1f0>)
 800b8f6:	a904      	add	r1, sp, #16
 800b8f8:	4638      	mov	r0, r7
 800b8fa:	f7fc ff51 	bl	80087a0 <_printf_i>
 800b8fe:	e7ed      	b.n	800b8dc <_svfiprintf_r+0x1c0>
 800b900:	0800d3c1 	.word	0x0800d3c1
 800b904:	0800d3cb 	.word	0x0800d3cb
 800b908:	08008271 	.word	0x08008271
 800b90c:	0800b665 	.word	0x0800b665
 800b910:	0800d3c7 	.word	0x0800d3c7

0800b914 <__sflush_r>:
 800b914:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b91c:	0716      	lsls	r6, r2, #28
 800b91e:	4605      	mov	r5, r0
 800b920:	460c      	mov	r4, r1
 800b922:	d454      	bmi.n	800b9ce <__sflush_r+0xba>
 800b924:	684b      	ldr	r3, [r1, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	dc02      	bgt.n	800b930 <__sflush_r+0x1c>
 800b92a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	dd48      	ble.n	800b9c2 <__sflush_r+0xae>
 800b930:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b932:	2e00      	cmp	r6, #0
 800b934:	d045      	beq.n	800b9c2 <__sflush_r+0xae>
 800b936:	2300      	movs	r3, #0
 800b938:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b93c:	682f      	ldr	r7, [r5, #0]
 800b93e:	6a21      	ldr	r1, [r4, #32]
 800b940:	602b      	str	r3, [r5, #0]
 800b942:	d030      	beq.n	800b9a6 <__sflush_r+0x92>
 800b944:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	0759      	lsls	r1, r3, #29
 800b94a:	d505      	bpl.n	800b958 <__sflush_r+0x44>
 800b94c:	6863      	ldr	r3, [r4, #4]
 800b94e:	1ad2      	subs	r2, r2, r3
 800b950:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b952:	b10b      	cbz	r3, 800b958 <__sflush_r+0x44>
 800b954:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b956:	1ad2      	subs	r2, r2, r3
 800b958:	2300      	movs	r3, #0
 800b95a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b95c:	6a21      	ldr	r1, [r4, #32]
 800b95e:	4628      	mov	r0, r5
 800b960:	47b0      	blx	r6
 800b962:	1c43      	adds	r3, r0, #1
 800b964:	89a3      	ldrh	r3, [r4, #12]
 800b966:	d106      	bne.n	800b976 <__sflush_r+0x62>
 800b968:	6829      	ldr	r1, [r5, #0]
 800b96a:	291d      	cmp	r1, #29
 800b96c:	d82b      	bhi.n	800b9c6 <__sflush_r+0xb2>
 800b96e:	4a2a      	ldr	r2, [pc, #168]	@ (800ba18 <__sflush_r+0x104>)
 800b970:	410a      	asrs	r2, r1
 800b972:	07d6      	lsls	r6, r2, #31
 800b974:	d427      	bmi.n	800b9c6 <__sflush_r+0xb2>
 800b976:	2200      	movs	r2, #0
 800b978:	6062      	str	r2, [r4, #4]
 800b97a:	04d9      	lsls	r1, r3, #19
 800b97c:	6922      	ldr	r2, [r4, #16]
 800b97e:	6022      	str	r2, [r4, #0]
 800b980:	d504      	bpl.n	800b98c <__sflush_r+0x78>
 800b982:	1c42      	adds	r2, r0, #1
 800b984:	d101      	bne.n	800b98a <__sflush_r+0x76>
 800b986:	682b      	ldr	r3, [r5, #0]
 800b988:	b903      	cbnz	r3, 800b98c <__sflush_r+0x78>
 800b98a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b98c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b98e:	602f      	str	r7, [r5, #0]
 800b990:	b1b9      	cbz	r1, 800b9c2 <__sflush_r+0xae>
 800b992:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b996:	4299      	cmp	r1, r3
 800b998:	d002      	beq.n	800b9a0 <__sflush_r+0x8c>
 800b99a:	4628      	mov	r0, r5
 800b99c:	f7fe fa2c 	bl	8009df8 <_free_r>
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9a4:	e00d      	b.n	800b9c2 <__sflush_r+0xae>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	47b0      	blx	r6
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	1c50      	adds	r0, r2, #1
 800b9b0:	d1c9      	bne.n	800b946 <__sflush_r+0x32>
 800b9b2:	682b      	ldr	r3, [r5, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d0c6      	beq.n	800b946 <__sflush_r+0x32>
 800b9b8:	2b1d      	cmp	r3, #29
 800b9ba:	d001      	beq.n	800b9c0 <__sflush_r+0xac>
 800b9bc:	2b16      	cmp	r3, #22
 800b9be:	d11e      	bne.n	800b9fe <__sflush_r+0xea>
 800b9c0:	602f      	str	r7, [r5, #0]
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	e022      	b.n	800ba0c <__sflush_r+0xf8>
 800b9c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9ca:	b21b      	sxth	r3, r3
 800b9cc:	e01b      	b.n	800ba06 <__sflush_r+0xf2>
 800b9ce:	690f      	ldr	r7, [r1, #16]
 800b9d0:	2f00      	cmp	r7, #0
 800b9d2:	d0f6      	beq.n	800b9c2 <__sflush_r+0xae>
 800b9d4:	0793      	lsls	r3, r2, #30
 800b9d6:	680e      	ldr	r6, [r1, #0]
 800b9d8:	bf08      	it	eq
 800b9da:	694b      	ldreq	r3, [r1, #20]
 800b9dc:	600f      	str	r7, [r1, #0]
 800b9de:	bf18      	it	ne
 800b9e0:	2300      	movne	r3, #0
 800b9e2:	eba6 0807 	sub.w	r8, r6, r7
 800b9e6:	608b      	str	r3, [r1, #8]
 800b9e8:	f1b8 0f00 	cmp.w	r8, #0
 800b9ec:	dde9      	ble.n	800b9c2 <__sflush_r+0xae>
 800b9ee:	6a21      	ldr	r1, [r4, #32]
 800b9f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b9f2:	4643      	mov	r3, r8
 800b9f4:	463a      	mov	r2, r7
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	47b0      	blx	r6
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	dc08      	bgt.n	800ba10 <__sflush_r+0xfc>
 800b9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba06:	81a3      	strh	r3, [r4, #12]
 800ba08:	f04f 30ff 	mov.w	r0, #4294967295
 800ba0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba10:	4407      	add	r7, r0
 800ba12:	eba8 0800 	sub.w	r8, r8, r0
 800ba16:	e7e7      	b.n	800b9e8 <__sflush_r+0xd4>
 800ba18:	dfbffffe 	.word	0xdfbffffe

0800ba1c <_fflush_r>:
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	690b      	ldr	r3, [r1, #16]
 800ba20:	4605      	mov	r5, r0
 800ba22:	460c      	mov	r4, r1
 800ba24:	b913      	cbnz	r3, 800ba2c <_fflush_r+0x10>
 800ba26:	2500      	movs	r5, #0
 800ba28:	4628      	mov	r0, r5
 800ba2a:	bd38      	pop	{r3, r4, r5, pc}
 800ba2c:	b118      	cbz	r0, 800ba36 <_fflush_r+0x1a>
 800ba2e:	6a03      	ldr	r3, [r0, #32]
 800ba30:	b90b      	cbnz	r3, 800ba36 <_fflush_r+0x1a>
 800ba32:	f7fd fa75 	bl	8008f20 <__sinit>
 800ba36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d0f3      	beq.n	800ba26 <_fflush_r+0xa>
 800ba3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ba40:	07d0      	lsls	r0, r2, #31
 800ba42:	d404      	bmi.n	800ba4e <_fflush_r+0x32>
 800ba44:	0599      	lsls	r1, r3, #22
 800ba46:	d402      	bmi.n	800ba4e <_fflush_r+0x32>
 800ba48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba4a:	f7fd fb80 	bl	800914e <__retarget_lock_acquire_recursive>
 800ba4e:	4628      	mov	r0, r5
 800ba50:	4621      	mov	r1, r4
 800ba52:	f7ff ff5f 	bl	800b914 <__sflush_r>
 800ba56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba58:	07da      	lsls	r2, r3, #31
 800ba5a:	4605      	mov	r5, r0
 800ba5c:	d4e4      	bmi.n	800ba28 <_fflush_r+0xc>
 800ba5e:	89a3      	ldrh	r3, [r4, #12]
 800ba60:	059b      	lsls	r3, r3, #22
 800ba62:	d4e1      	bmi.n	800ba28 <_fflush_r+0xc>
 800ba64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba66:	f7fd fb73 	bl	8009150 <__retarget_lock_release_recursive>
 800ba6a:	e7dd      	b.n	800ba28 <_fflush_r+0xc>

0800ba6c <memmove>:
 800ba6c:	4288      	cmp	r0, r1
 800ba6e:	b510      	push	{r4, lr}
 800ba70:	eb01 0402 	add.w	r4, r1, r2
 800ba74:	d902      	bls.n	800ba7c <memmove+0x10>
 800ba76:	4284      	cmp	r4, r0
 800ba78:	4623      	mov	r3, r4
 800ba7a:	d807      	bhi.n	800ba8c <memmove+0x20>
 800ba7c:	1e43      	subs	r3, r0, #1
 800ba7e:	42a1      	cmp	r1, r4
 800ba80:	d008      	beq.n	800ba94 <memmove+0x28>
 800ba82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba8a:	e7f8      	b.n	800ba7e <memmove+0x12>
 800ba8c:	4402      	add	r2, r0
 800ba8e:	4601      	mov	r1, r0
 800ba90:	428a      	cmp	r2, r1
 800ba92:	d100      	bne.n	800ba96 <memmove+0x2a>
 800ba94:	bd10      	pop	{r4, pc}
 800ba96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba9e:	e7f7      	b.n	800ba90 <memmove+0x24>

0800baa0 <strncmp>:
 800baa0:	b510      	push	{r4, lr}
 800baa2:	b16a      	cbz	r2, 800bac0 <strncmp+0x20>
 800baa4:	3901      	subs	r1, #1
 800baa6:	1884      	adds	r4, r0, r2
 800baa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d103      	bne.n	800babc <strncmp+0x1c>
 800bab4:	42a0      	cmp	r0, r4
 800bab6:	d001      	beq.n	800babc <strncmp+0x1c>
 800bab8:	2a00      	cmp	r2, #0
 800baba:	d1f5      	bne.n	800baa8 <strncmp+0x8>
 800babc:	1ad0      	subs	r0, r2, r3
 800babe:	bd10      	pop	{r4, pc}
 800bac0:	4610      	mov	r0, r2
 800bac2:	e7fc      	b.n	800babe <strncmp+0x1e>

0800bac4 <_sbrk_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4d06      	ldr	r5, [pc, #24]	@ (800bae0 <_sbrk_r+0x1c>)
 800bac8:	2300      	movs	r3, #0
 800baca:	4604      	mov	r4, r0
 800bacc:	4608      	mov	r0, r1
 800bace:	602b      	str	r3, [r5, #0]
 800bad0:	f7f6 fc50 	bl	8002374 <_sbrk>
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	d102      	bne.n	800bade <_sbrk_r+0x1a>
 800bad8:	682b      	ldr	r3, [r5, #0]
 800bada:	b103      	cbz	r3, 800bade <_sbrk_r+0x1a>
 800badc:	6023      	str	r3, [r4, #0]
 800bade:	bd38      	pop	{r3, r4, r5, pc}
 800bae0:	200086e0 	.word	0x200086e0

0800bae4 <memcpy>:
 800bae4:	440a      	add	r2, r1
 800bae6:	4291      	cmp	r1, r2
 800bae8:	f100 33ff 	add.w	r3, r0, #4294967295
 800baec:	d100      	bne.n	800baf0 <memcpy+0xc>
 800baee:	4770      	bx	lr
 800baf0:	b510      	push	{r4, lr}
 800baf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bafa:	4291      	cmp	r1, r2
 800bafc:	d1f9      	bne.n	800baf2 <memcpy+0xe>
 800bafe:	bd10      	pop	{r4, pc}

0800bb00 <nan>:
 800bb00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bb08 <nan+0x8>
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop
 800bb08:	00000000 	.word	0x00000000
 800bb0c:	7ff80000 	.word	0x7ff80000

0800bb10 <__assert_func>:
 800bb10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb12:	4614      	mov	r4, r2
 800bb14:	461a      	mov	r2, r3
 800bb16:	4b09      	ldr	r3, [pc, #36]	@ (800bb3c <__assert_func+0x2c>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4605      	mov	r5, r0
 800bb1c:	68d8      	ldr	r0, [r3, #12]
 800bb1e:	b954      	cbnz	r4, 800bb36 <__assert_func+0x26>
 800bb20:	4b07      	ldr	r3, [pc, #28]	@ (800bb40 <__assert_func+0x30>)
 800bb22:	461c      	mov	r4, r3
 800bb24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb28:	9100      	str	r1, [sp, #0]
 800bb2a:	462b      	mov	r3, r5
 800bb2c:	4905      	ldr	r1, [pc, #20]	@ (800bb44 <__assert_func+0x34>)
 800bb2e:	f000 fba7 	bl	800c280 <fiprintf>
 800bb32:	f000 fbb7 	bl	800c2a4 <abort>
 800bb36:	4b04      	ldr	r3, [pc, #16]	@ (800bb48 <__assert_func+0x38>)
 800bb38:	e7f4      	b.n	800bb24 <__assert_func+0x14>
 800bb3a:	bf00      	nop
 800bb3c:	2000003c 	.word	0x2000003c
 800bb40:	0800d415 	.word	0x0800d415
 800bb44:	0800d3e7 	.word	0x0800d3e7
 800bb48:	0800d3da 	.word	0x0800d3da

0800bb4c <_calloc_r>:
 800bb4c:	b570      	push	{r4, r5, r6, lr}
 800bb4e:	fba1 5402 	umull	r5, r4, r1, r2
 800bb52:	b93c      	cbnz	r4, 800bb64 <_calloc_r+0x18>
 800bb54:	4629      	mov	r1, r5
 800bb56:	f7fe f9c3 	bl	8009ee0 <_malloc_r>
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	b928      	cbnz	r0, 800bb6a <_calloc_r+0x1e>
 800bb5e:	2600      	movs	r6, #0
 800bb60:	4630      	mov	r0, r6
 800bb62:	bd70      	pop	{r4, r5, r6, pc}
 800bb64:	220c      	movs	r2, #12
 800bb66:	6002      	str	r2, [r0, #0]
 800bb68:	e7f9      	b.n	800bb5e <_calloc_r+0x12>
 800bb6a:	462a      	mov	r2, r5
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	f7fd fa70 	bl	8009052 <memset>
 800bb72:	e7f5      	b.n	800bb60 <_calloc_r+0x14>

0800bb74 <rshift>:
 800bb74:	6903      	ldr	r3, [r0, #16]
 800bb76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb82:	f100 0414 	add.w	r4, r0, #20
 800bb86:	dd45      	ble.n	800bc14 <rshift+0xa0>
 800bb88:	f011 011f 	ands.w	r1, r1, #31
 800bb8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bb90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bb94:	d10c      	bne.n	800bbb0 <rshift+0x3c>
 800bb96:	f100 0710 	add.w	r7, r0, #16
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	42b1      	cmp	r1, r6
 800bb9e:	d334      	bcc.n	800bc0a <rshift+0x96>
 800bba0:	1a9b      	subs	r3, r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	1eea      	subs	r2, r5, #3
 800bba6:	4296      	cmp	r6, r2
 800bba8:	bf38      	it	cc
 800bbaa:	2300      	movcc	r3, #0
 800bbac:	4423      	add	r3, r4
 800bbae:	e015      	b.n	800bbdc <rshift+0x68>
 800bbb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bbb4:	f1c1 0820 	rsb	r8, r1, #32
 800bbb8:	40cf      	lsrs	r7, r1
 800bbba:	f105 0e04 	add.w	lr, r5, #4
 800bbbe:	46a1      	mov	r9, r4
 800bbc0:	4576      	cmp	r6, lr
 800bbc2:	46f4      	mov	ip, lr
 800bbc4:	d815      	bhi.n	800bbf2 <rshift+0x7e>
 800bbc6:	1a9a      	subs	r2, r3, r2
 800bbc8:	0092      	lsls	r2, r2, #2
 800bbca:	3a04      	subs	r2, #4
 800bbcc:	3501      	adds	r5, #1
 800bbce:	42ae      	cmp	r6, r5
 800bbd0:	bf38      	it	cc
 800bbd2:	2200      	movcc	r2, #0
 800bbd4:	18a3      	adds	r3, r4, r2
 800bbd6:	50a7      	str	r7, [r4, r2]
 800bbd8:	b107      	cbz	r7, 800bbdc <rshift+0x68>
 800bbda:	3304      	adds	r3, #4
 800bbdc:	1b1a      	subs	r2, r3, r4
 800bbde:	42a3      	cmp	r3, r4
 800bbe0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bbe4:	bf08      	it	eq
 800bbe6:	2300      	moveq	r3, #0
 800bbe8:	6102      	str	r2, [r0, #16]
 800bbea:	bf08      	it	eq
 800bbec:	6143      	streq	r3, [r0, #20]
 800bbee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbf2:	f8dc c000 	ldr.w	ip, [ip]
 800bbf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800bbfa:	ea4c 0707 	orr.w	r7, ip, r7
 800bbfe:	f849 7b04 	str.w	r7, [r9], #4
 800bc02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc06:	40cf      	lsrs	r7, r1
 800bc08:	e7da      	b.n	800bbc0 <rshift+0x4c>
 800bc0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc12:	e7c3      	b.n	800bb9c <rshift+0x28>
 800bc14:	4623      	mov	r3, r4
 800bc16:	e7e1      	b.n	800bbdc <rshift+0x68>

0800bc18 <__hexdig_fun>:
 800bc18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bc1c:	2b09      	cmp	r3, #9
 800bc1e:	d802      	bhi.n	800bc26 <__hexdig_fun+0xe>
 800bc20:	3820      	subs	r0, #32
 800bc22:	b2c0      	uxtb	r0, r0
 800bc24:	4770      	bx	lr
 800bc26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bc2a:	2b05      	cmp	r3, #5
 800bc2c:	d801      	bhi.n	800bc32 <__hexdig_fun+0x1a>
 800bc2e:	3847      	subs	r0, #71	@ 0x47
 800bc30:	e7f7      	b.n	800bc22 <__hexdig_fun+0xa>
 800bc32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bc36:	2b05      	cmp	r3, #5
 800bc38:	d801      	bhi.n	800bc3e <__hexdig_fun+0x26>
 800bc3a:	3827      	subs	r0, #39	@ 0x27
 800bc3c:	e7f1      	b.n	800bc22 <__hexdig_fun+0xa>
 800bc3e:	2000      	movs	r0, #0
 800bc40:	4770      	bx	lr
	...

0800bc44 <__gethex>:
 800bc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc48:	b085      	sub	sp, #20
 800bc4a:	468a      	mov	sl, r1
 800bc4c:	9302      	str	r3, [sp, #8]
 800bc4e:	680b      	ldr	r3, [r1, #0]
 800bc50:	9001      	str	r0, [sp, #4]
 800bc52:	4690      	mov	r8, r2
 800bc54:	1c9c      	adds	r4, r3, #2
 800bc56:	46a1      	mov	r9, r4
 800bc58:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bc5c:	2830      	cmp	r0, #48	@ 0x30
 800bc5e:	d0fa      	beq.n	800bc56 <__gethex+0x12>
 800bc60:	eba9 0303 	sub.w	r3, r9, r3
 800bc64:	f1a3 0b02 	sub.w	fp, r3, #2
 800bc68:	f7ff ffd6 	bl	800bc18 <__hexdig_fun>
 800bc6c:	4605      	mov	r5, r0
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d168      	bne.n	800bd44 <__gethex+0x100>
 800bc72:	49a0      	ldr	r1, [pc, #640]	@ (800bef4 <__gethex+0x2b0>)
 800bc74:	2201      	movs	r2, #1
 800bc76:	4648      	mov	r0, r9
 800bc78:	f7ff ff12 	bl	800baa0 <strncmp>
 800bc7c:	4607      	mov	r7, r0
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d167      	bne.n	800bd52 <__gethex+0x10e>
 800bc82:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bc86:	4626      	mov	r6, r4
 800bc88:	f7ff ffc6 	bl	800bc18 <__hexdig_fun>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d062      	beq.n	800bd56 <__gethex+0x112>
 800bc90:	4623      	mov	r3, r4
 800bc92:	7818      	ldrb	r0, [r3, #0]
 800bc94:	2830      	cmp	r0, #48	@ 0x30
 800bc96:	4699      	mov	r9, r3
 800bc98:	f103 0301 	add.w	r3, r3, #1
 800bc9c:	d0f9      	beq.n	800bc92 <__gethex+0x4e>
 800bc9e:	f7ff ffbb 	bl	800bc18 <__hexdig_fun>
 800bca2:	fab0 f580 	clz	r5, r0
 800bca6:	096d      	lsrs	r5, r5, #5
 800bca8:	f04f 0b01 	mov.w	fp, #1
 800bcac:	464a      	mov	r2, r9
 800bcae:	4616      	mov	r6, r2
 800bcb0:	3201      	adds	r2, #1
 800bcb2:	7830      	ldrb	r0, [r6, #0]
 800bcb4:	f7ff ffb0 	bl	800bc18 <__hexdig_fun>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	d1f8      	bne.n	800bcae <__gethex+0x6a>
 800bcbc:	498d      	ldr	r1, [pc, #564]	@ (800bef4 <__gethex+0x2b0>)
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f7ff feed 	bl	800baa0 <strncmp>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d13f      	bne.n	800bd4a <__gethex+0x106>
 800bcca:	b944      	cbnz	r4, 800bcde <__gethex+0x9a>
 800bccc:	1c74      	adds	r4, r6, #1
 800bcce:	4622      	mov	r2, r4
 800bcd0:	4616      	mov	r6, r2
 800bcd2:	3201      	adds	r2, #1
 800bcd4:	7830      	ldrb	r0, [r6, #0]
 800bcd6:	f7ff ff9f 	bl	800bc18 <__hexdig_fun>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d1f8      	bne.n	800bcd0 <__gethex+0x8c>
 800bcde:	1ba4      	subs	r4, r4, r6
 800bce0:	00a7      	lsls	r7, r4, #2
 800bce2:	7833      	ldrb	r3, [r6, #0]
 800bce4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bce8:	2b50      	cmp	r3, #80	@ 0x50
 800bcea:	d13e      	bne.n	800bd6a <__gethex+0x126>
 800bcec:	7873      	ldrb	r3, [r6, #1]
 800bcee:	2b2b      	cmp	r3, #43	@ 0x2b
 800bcf0:	d033      	beq.n	800bd5a <__gethex+0x116>
 800bcf2:	2b2d      	cmp	r3, #45	@ 0x2d
 800bcf4:	d034      	beq.n	800bd60 <__gethex+0x11c>
 800bcf6:	1c71      	adds	r1, r6, #1
 800bcf8:	2400      	movs	r4, #0
 800bcfa:	7808      	ldrb	r0, [r1, #0]
 800bcfc:	f7ff ff8c 	bl	800bc18 <__hexdig_fun>
 800bd00:	1e43      	subs	r3, r0, #1
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	2b18      	cmp	r3, #24
 800bd06:	d830      	bhi.n	800bd6a <__gethex+0x126>
 800bd08:	f1a0 0210 	sub.w	r2, r0, #16
 800bd0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd10:	f7ff ff82 	bl	800bc18 <__hexdig_fun>
 800bd14:	f100 3cff 	add.w	ip, r0, #4294967295
 800bd18:	fa5f fc8c 	uxtb.w	ip, ip
 800bd1c:	f1bc 0f18 	cmp.w	ip, #24
 800bd20:	f04f 030a 	mov.w	r3, #10
 800bd24:	d91e      	bls.n	800bd64 <__gethex+0x120>
 800bd26:	b104      	cbz	r4, 800bd2a <__gethex+0xe6>
 800bd28:	4252      	negs	r2, r2
 800bd2a:	4417      	add	r7, r2
 800bd2c:	f8ca 1000 	str.w	r1, [sl]
 800bd30:	b1ed      	cbz	r5, 800bd6e <__gethex+0x12a>
 800bd32:	f1bb 0f00 	cmp.w	fp, #0
 800bd36:	bf0c      	ite	eq
 800bd38:	2506      	moveq	r5, #6
 800bd3a:	2500      	movne	r5, #0
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	b005      	add	sp, #20
 800bd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd44:	2500      	movs	r5, #0
 800bd46:	462c      	mov	r4, r5
 800bd48:	e7b0      	b.n	800bcac <__gethex+0x68>
 800bd4a:	2c00      	cmp	r4, #0
 800bd4c:	d1c7      	bne.n	800bcde <__gethex+0x9a>
 800bd4e:	4627      	mov	r7, r4
 800bd50:	e7c7      	b.n	800bce2 <__gethex+0x9e>
 800bd52:	464e      	mov	r6, r9
 800bd54:	462f      	mov	r7, r5
 800bd56:	2501      	movs	r5, #1
 800bd58:	e7c3      	b.n	800bce2 <__gethex+0x9e>
 800bd5a:	2400      	movs	r4, #0
 800bd5c:	1cb1      	adds	r1, r6, #2
 800bd5e:	e7cc      	b.n	800bcfa <__gethex+0xb6>
 800bd60:	2401      	movs	r4, #1
 800bd62:	e7fb      	b.n	800bd5c <__gethex+0x118>
 800bd64:	fb03 0002 	mla	r0, r3, r2, r0
 800bd68:	e7ce      	b.n	800bd08 <__gethex+0xc4>
 800bd6a:	4631      	mov	r1, r6
 800bd6c:	e7de      	b.n	800bd2c <__gethex+0xe8>
 800bd6e:	eba6 0309 	sub.w	r3, r6, r9
 800bd72:	3b01      	subs	r3, #1
 800bd74:	4629      	mov	r1, r5
 800bd76:	2b07      	cmp	r3, #7
 800bd78:	dc0a      	bgt.n	800bd90 <__gethex+0x14c>
 800bd7a:	9801      	ldr	r0, [sp, #4]
 800bd7c:	f7fe f93c 	bl	8009ff8 <_Balloc>
 800bd80:	4604      	mov	r4, r0
 800bd82:	b940      	cbnz	r0, 800bd96 <__gethex+0x152>
 800bd84:	4b5c      	ldr	r3, [pc, #368]	@ (800bef8 <__gethex+0x2b4>)
 800bd86:	4602      	mov	r2, r0
 800bd88:	21e4      	movs	r1, #228	@ 0xe4
 800bd8a:	485c      	ldr	r0, [pc, #368]	@ (800befc <__gethex+0x2b8>)
 800bd8c:	f7ff fec0 	bl	800bb10 <__assert_func>
 800bd90:	3101      	adds	r1, #1
 800bd92:	105b      	asrs	r3, r3, #1
 800bd94:	e7ef      	b.n	800bd76 <__gethex+0x132>
 800bd96:	f100 0a14 	add.w	sl, r0, #20
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	4655      	mov	r5, sl
 800bd9e:	469b      	mov	fp, r3
 800bda0:	45b1      	cmp	r9, r6
 800bda2:	d337      	bcc.n	800be14 <__gethex+0x1d0>
 800bda4:	f845 bb04 	str.w	fp, [r5], #4
 800bda8:	eba5 050a 	sub.w	r5, r5, sl
 800bdac:	10ad      	asrs	r5, r5, #2
 800bdae:	6125      	str	r5, [r4, #16]
 800bdb0:	4658      	mov	r0, fp
 800bdb2:	f7fe fa13 	bl	800a1dc <__hi0bits>
 800bdb6:	016d      	lsls	r5, r5, #5
 800bdb8:	f8d8 6000 	ldr.w	r6, [r8]
 800bdbc:	1a2d      	subs	r5, r5, r0
 800bdbe:	42b5      	cmp	r5, r6
 800bdc0:	dd54      	ble.n	800be6c <__gethex+0x228>
 800bdc2:	1bad      	subs	r5, r5, r6
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f7fe fda7 	bl	800a91a <__any_on>
 800bdcc:	4681      	mov	r9, r0
 800bdce:	b178      	cbz	r0, 800bdf0 <__gethex+0x1ac>
 800bdd0:	1e6b      	subs	r3, r5, #1
 800bdd2:	1159      	asrs	r1, r3, #5
 800bdd4:	f003 021f 	and.w	r2, r3, #31
 800bdd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bddc:	f04f 0901 	mov.w	r9, #1
 800bde0:	fa09 f202 	lsl.w	r2, r9, r2
 800bde4:	420a      	tst	r2, r1
 800bde6:	d003      	beq.n	800bdf0 <__gethex+0x1ac>
 800bde8:	454b      	cmp	r3, r9
 800bdea:	dc36      	bgt.n	800be5a <__gethex+0x216>
 800bdec:	f04f 0902 	mov.w	r9, #2
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	f7ff febe 	bl	800bb74 <rshift>
 800bdf8:	442f      	add	r7, r5
 800bdfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bdfe:	42bb      	cmp	r3, r7
 800be00:	da42      	bge.n	800be88 <__gethex+0x244>
 800be02:	9801      	ldr	r0, [sp, #4]
 800be04:	4621      	mov	r1, r4
 800be06:	f7fe f937 	bl	800a078 <_Bfree>
 800be0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be0c:	2300      	movs	r3, #0
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	25a3      	movs	r5, #163	@ 0xa3
 800be12:	e793      	b.n	800bd3c <__gethex+0xf8>
 800be14:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800be18:	2a2e      	cmp	r2, #46	@ 0x2e
 800be1a:	d012      	beq.n	800be42 <__gethex+0x1fe>
 800be1c:	2b20      	cmp	r3, #32
 800be1e:	d104      	bne.n	800be2a <__gethex+0x1e6>
 800be20:	f845 bb04 	str.w	fp, [r5], #4
 800be24:	f04f 0b00 	mov.w	fp, #0
 800be28:	465b      	mov	r3, fp
 800be2a:	7830      	ldrb	r0, [r6, #0]
 800be2c:	9303      	str	r3, [sp, #12]
 800be2e:	f7ff fef3 	bl	800bc18 <__hexdig_fun>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	f000 000f 	and.w	r0, r0, #15
 800be38:	4098      	lsls	r0, r3
 800be3a:	ea4b 0b00 	orr.w	fp, fp, r0
 800be3e:	3304      	adds	r3, #4
 800be40:	e7ae      	b.n	800bda0 <__gethex+0x15c>
 800be42:	45b1      	cmp	r9, r6
 800be44:	d8ea      	bhi.n	800be1c <__gethex+0x1d8>
 800be46:	492b      	ldr	r1, [pc, #172]	@ (800bef4 <__gethex+0x2b0>)
 800be48:	9303      	str	r3, [sp, #12]
 800be4a:	2201      	movs	r2, #1
 800be4c:	4630      	mov	r0, r6
 800be4e:	f7ff fe27 	bl	800baa0 <strncmp>
 800be52:	9b03      	ldr	r3, [sp, #12]
 800be54:	2800      	cmp	r0, #0
 800be56:	d1e1      	bne.n	800be1c <__gethex+0x1d8>
 800be58:	e7a2      	b.n	800bda0 <__gethex+0x15c>
 800be5a:	1ea9      	subs	r1, r5, #2
 800be5c:	4620      	mov	r0, r4
 800be5e:	f7fe fd5c 	bl	800a91a <__any_on>
 800be62:	2800      	cmp	r0, #0
 800be64:	d0c2      	beq.n	800bdec <__gethex+0x1a8>
 800be66:	f04f 0903 	mov.w	r9, #3
 800be6a:	e7c1      	b.n	800bdf0 <__gethex+0x1ac>
 800be6c:	da09      	bge.n	800be82 <__gethex+0x23e>
 800be6e:	1b75      	subs	r5, r6, r5
 800be70:	4621      	mov	r1, r4
 800be72:	9801      	ldr	r0, [sp, #4]
 800be74:	462a      	mov	r2, r5
 800be76:	f7fe fb17 	bl	800a4a8 <__lshift>
 800be7a:	1b7f      	subs	r7, r7, r5
 800be7c:	4604      	mov	r4, r0
 800be7e:	f100 0a14 	add.w	sl, r0, #20
 800be82:	f04f 0900 	mov.w	r9, #0
 800be86:	e7b8      	b.n	800bdfa <__gethex+0x1b6>
 800be88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800be8c:	42bd      	cmp	r5, r7
 800be8e:	dd6f      	ble.n	800bf70 <__gethex+0x32c>
 800be90:	1bed      	subs	r5, r5, r7
 800be92:	42ae      	cmp	r6, r5
 800be94:	dc34      	bgt.n	800bf00 <__gethex+0x2bc>
 800be96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d022      	beq.n	800bee4 <__gethex+0x2a0>
 800be9e:	2b03      	cmp	r3, #3
 800bea0:	d024      	beq.n	800beec <__gethex+0x2a8>
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d115      	bne.n	800bed2 <__gethex+0x28e>
 800bea6:	42ae      	cmp	r6, r5
 800bea8:	d113      	bne.n	800bed2 <__gethex+0x28e>
 800beaa:	2e01      	cmp	r6, #1
 800beac:	d10b      	bne.n	800bec6 <__gethex+0x282>
 800beae:	9a02      	ldr	r2, [sp, #8]
 800beb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800beb4:	6013      	str	r3, [r2, #0]
 800beb6:	2301      	movs	r3, #1
 800beb8:	6123      	str	r3, [r4, #16]
 800beba:	f8ca 3000 	str.w	r3, [sl]
 800bebe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bec0:	2562      	movs	r5, #98	@ 0x62
 800bec2:	601c      	str	r4, [r3, #0]
 800bec4:	e73a      	b.n	800bd3c <__gethex+0xf8>
 800bec6:	1e71      	subs	r1, r6, #1
 800bec8:	4620      	mov	r0, r4
 800beca:	f7fe fd26 	bl	800a91a <__any_on>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d1ed      	bne.n	800beae <__gethex+0x26a>
 800bed2:	9801      	ldr	r0, [sp, #4]
 800bed4:	4621      	mov	r1, r4
 800bed6:	f7fe f8cf 	bl	800a078 <_Bfree>
 800beda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bedc:	2300      	movs	r3, #0
 800bede:	6013      	str	r3, [r2, #0]
 800bee0:	2550      	movs	r5, #80	@ 0x50
 800bee2:	e72b      	b.n	800bd3c <__gethex+0xf8>
 800bee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1f3      	bne.n	800bed2 <__gethex+0x28e>
 800beea:	e7e0      	b.n	800beae <__gethex+0x26a>
 800beec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1dd      	bne.n	800beae <__gethex+0x26a>
 800bef2:	e7ee      	b.n	800bed2 <__gethex+0x28e>
 800bef4:	0800d268 	.word	0x0800d268
 800bef8:	0800d0fd 	.word	0x0800d0fd
 800befc:	0800d416 	.word	0x0800d416
 800bf00:	1e6f      	subs	r7, r5, #1
 800bf02:	f1b9 0f00 	cmp.w	r9, #0
 800bf06:	d130      	bne.n	800bf6a <__gethex+0x326>
 800bf08:	b127      	cbz	r7, 800bf14 <__gethex+0x2d0>
 800bf0a:	4639      	mov	r1, r7
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f7fe fd04 	bl	800a91a <__any_on>
 800bf12:	4681      	mov	r9, r0
 800bf14:	117a      	asrs	r2, r7, #5
 800bf16:	2301      	movs	r3, #1
 800bf18:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bf1c:	f007 071f 	and.w	r7, r7, #31
 800bf20:	40bb      	lsls	r3, r7
 800bf22:	4213      	tst	r3, r2
 800bf24:	4629      	mov	r1, r5
 800bf26:	4620      	mov	r0, r4
 800bf28:	bf18      	it	ne
 800bf2a:	f049 0902 	orrne.w	r9, r9, #2
 800bf2e:	f7ff fe21 	bl	800bb74 <rshift>
 800bf32:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bf36:	1b76      	subs	r6, r6, r5
 800bf38:	2502      	movs	r5, #2
 800bf3a:	f1b9 0f00 	cmp.w	r9, #0
 800bf3e:	d047      	beq.n	800bfd0 <__gethex+0x38c>
 800bf40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d015      	beq.n	800bf74 <__gethex+0x330>
 800bf48:	2b03      	cmp	r3, #3
 800bf4a:	d017      	beq.n	800bf7c <__gethex+0x338>
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d109      	bne.n	800bf64 <__gethex+0x320>
 800bf50:	f019 0f02 	tst.w	r9, #2
 800bf54:	d006      	beq.n	800bf64 <__gethex+0x320>
 800bf56:	f8da 3000 	ldr.w	r3, [sl]
 800bf5a:	ea49 0903 	orr.w	r9, r9, r3
 800bf5e:	f019 0f01 	tst.w	r9, #1
 800bf62:	d10e      	bne.n	800bf82 <__gethex+0x33e>
 800bf64:	f045 0510 	orr.w	r5, r5, #16
 800bf68:	e032      	b.n	800bfd0 <__gethex+0x38c>
 800bf6a:	f04f 0901 	mov.w	r9, #1
 800bf6e:	e7d1      	b.n	800bf14 <__gethex+0x2d0>
 800bf70:	2501      	movs	r5, #1
 800bf72:	e7e2      	b.n	800bf3a <__gethex+0x2f6>
 800bf74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf76:	f1c3 0301 	rsb	r3, r3, #1
 800bf7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d0f0      	beq.n	800bf64 <__gethex+0x320>
 800bf82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bf86:	f104 0314 	add.w	r3, r4, #20
 800bf8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bf8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bf92:	f04f 0c00 	mov.w	ip, #0
 800bf96:	4618      	mov	r0, r3
 800bf98:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bfa0:	d01b      	beq.n	800bfda <__gethex+0x396>
 800bfa2:	3201      	adds	r2, #1
 800bfa4:	6002      	str	r2, [r0, #0]
 800bfa6:	2d02      	cmp	r5, #2
 800bfa8:	f104 0314 	add.w	r3, r4, #20
 800bfac:	d13c      	bne.n	800c028 <__gethex+0x3e4>
 800bfae:	f8d8 2000 	ldr.w	r2, [r8]
 800bfb2:	3a01      	subs	r2, #1
 800bfb4:	42b2      	cmp	r2, r6
 800bfb6:	d109      	bne.n	800bfcc <__gethex+0x388>
 800bfb8:	1171      	asrs	r1, r6, #5
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfc0:	f006 061f 	and.w	r6, r6, #31
 800bfc4:	fa02 f606 	lsl.w	r6, r2, r6
 800bfc8:	421e      	tst	r6, r3
 800bfca:	d13a      	bne.n	800c042 <__gethex+0x3fe>
 800bfcc:	f045 0520 	orr.w	r5, r5, #32
 800bfd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfd2:	601c      	str	r4, [r3, #0]
 800bfd4:	9b02      	ldr	r3, [sp, #8]
 800bfd6:	601f      	str	r7, [r3, #0]
 800bfd8:	e6b0      	b.n	800bd3c <__gethex+0xf8>
 800bfda:	4299      	cmp	r1, r3
 800bfdc:	f843 cc04 	str.w	ip, [r3, #-4]
 800bfe0:	d8d9      	bhi.n	800bf96 <__gethex+0x352>
 800bfe2:	68a3      	ldr	r3, [r4, #8]
 800bfe4:	459b      	cmp	fp, r3
 800bfe6:	db17      	blt.n	800c018 <__gethex+0x3d4>
 800bfe8:	6861      	ldr	r1, [r4, #4]
 800bfea:	9801      	ldr	r0, [sp, #4]
 800bfec:	3101      	adds	r1, #1
 800bfee:	f7fe f803 	bl	8009ff8 <_Balloc>
 800bff2:	4681      	mov	r9, r0
 800bff4:	b918      	cbnz	r0, 800bffe <__gethex+0x3ba>
 800bff6:	4b1a      	ldr	r3, [pc, #104]	@ (800c060 <__gethex+0x41c>)
 800bff8:	4602      	mov	r2, r0
 800bffa:	2184      	movs	r1, #132	@ 0x84
 800bffc:	e6c5      	b.n	800bd8a <__gethex+0x146>
 800bffe:	6922      	ldr	r2, [r4, #16]
 800c000:	3202      	adds	r2, #2
 800c002:	f104 010c 	add.w	r1, r4, #12
 800c006:	0092      	lsls	r2, r2, #2
 800c008:	300c      	adds	r0, #12
 800c00a:	f7ff fd6b 	bl	800bae4 <memcpy>
 800c00e:	4621      	mov	r1, r4
 800c010:	9801      	ldr	r0, [sp, #4]
 800c012:	f7fe f831 	bl	800a078 <_Bfree>
 800c016:	464c      	mov	r4, r9
 800c018:	6923      	ldr	r3, [r4, #16]
 800c01a:	1c5a      	adds	r2, r3, #1
 800c01c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c020:	6122      	str	r2, [r4, #16]
 800c022:	2201      	movs	r2, #1
 800c024:	615a      	str	r2, [r3, #20]
 800c026:	e7be      	b.n	800bfa6 <__gethex+0x362>
 800c028:	6922      	ldr	r2, [r4, #16]
 800c02a:	455a      	cmp	r2, fp
 800c02c:	dd0b      	ble.n	800c046 <__gethex+0x402>
 800c02e:	2101      	movs	r1, #1
 800c030:	4620      	mov	r0, r4
 800c032:	f7ff fd9f 	bl	800bb74 <rshift>
 800c036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c03a:	3701      	adds	r7, #1
 800c03c:	42bb      	cmp	r3, r7
 800c03e:	f6ff aee0 	blt.w	800be02 <__gethex+0x1be>
 800c042:	2501      	movs	r5, #1
 800c044:	e7c2      	b.n	800bfcc <__gethex+0x388>
 800c046:	f016 061f 	ands.w	r6, r6, #31
 800c04a:	d0fa      	beq.n	800c042 <__gethex+0x3fe>
 800c04c:	4453      	add	r3, sl
 800c04e:	f1c6 0620 	rsb	r6, r6, #32
 800c052:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c056:	f7fe f8c1 	bl	800a1dc <__hi0bits>
 800c05a:	42b0      	cmp	r0, r6
 800c05c:	dbe7      	blt.n	800c02e <__gethex+0x3ea>
 800c05e:	e7f0      	b.n	800c042 <__gethex+0x3fe>
 800c060:	0800d0fd 	.word	0x0800d0fd

0800c064 <L_shift>:
 800c064:	f1c2 0208 	rsb	r2, r2, #8
 800c068:	0092      	lsls	r2, r2, #2
 800c06a:	b570      	push	{r4, r5, r6, lr}
 800c06c:	f1c2 0620 	rsb	r6, r2, #32
 800c070:	6843      	ldr	r3, [r0, #4]
 800c072:	6804      	ldr	r4, [r0, #0]
 800c074:	fa03 f506 	lsl.w	r5, r3, r6
 800c078:	432c      	orrs	r4, r5
 800c07a:	40d3      	lsrs	r3, r2
 800c07c:	6004      	str	r4, [r0, #0]
 800c07e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c082:	4288      	cmp	r0, r1
 800c084:	d3f4      	bcc.n	800c070 <L_shift+0xc>
 800c086:	bd70      	pop	{r4, r5, r6, pc}

0800c088 <__match>:
 800c088:	b530      	push	{r4, r5, lr}
 800c08a:	6803      	ldr	r3, [r0, #0]
 800c08c:	3301      	adds	r3, #1
 800c08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c092:	b914      	cbnz	r4, 800c09a <__match+0x12>
 800c094:	6003      	str	r3, [r0, #0]
 800c096:	2001      	movs	r0, #1
 800c098:	bd30      	pop	{r4, r5, pc}
 800c09a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c09e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c0a2:	2d19      	cmp	r5, #25
 800c0a4:	bf98      	it	ls
 800c0a6:	3220      	addls	r2, #32
 800c0a8:	42a2      	cmp	r2, r4
 800c0aa:	d0f0      	beq.n	800c08e <__match+0x6>
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	e7f3      	b.n	800c098 <__match+0x10>

0800c0b0 <__hexnan>:
 800c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b4:	680b      	ldr	r3, [r1, #0]
 800c0b6:	6801      	ldr	r1, [r0, #0]
 800c0b8:	115e      	asrs	r6, r3, #5
 800c0ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c0be:	f013 031f 	ands.w	r3, r3, #31
 800c0c2:	b087      	sub	sp, #28
 800c0c4:	bf18      	it	ne
 800c0c6:	3604      	addne	r6, #4
 800c0c8:	2500      	movs	r5, #0
 800c0ca:	1f37      	subs	r7, r6, #4
 800c0cc:	4682      	mov	sl, r0
 800c0ce:	4690      	mov	r8, r2
 800c0d0:	9301      	str	r3, [sp, #4]
 800c0d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c0d6:	46b9      	mov	r9, r7
 800c0d8:	463c      	mov	r4, r7
 800c0da:	9502      	str	r5, [sp, #8]
 800c0dc:	46ab      	mov	fp, r5
 800c0de:	784a      	ldrb	r2, [r1, #1]
 800c0e0:	1c4b      	adds	r3, r1, #1
 800c0e2:	9303      	str	r3, [sp, #12]
 800c0e4:	b342      	cbz	r2, 800c138 <__hexnan+0x88>
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	9105      	str	r1, [sp, #20]
 800c0ea:	9204      	str	r2, [sp, #16]
 800c0ec:	f7ff fd94 	bl	800bc18 <__hexdig_fun>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	d151      	bne.n	800c198 <__hexnan+0xe8>
 800c0f4:	9a04      	ldr	r2, [sp, #16]
 800c0f6:	9905      	ldr	r1, [sp, #20]
 800c0f8:	2a20      	cmp	r2, #32
 800c0fa:	d818      	bhi.n	800c12e <__hexnan+0x7e>
 800c0fc:	9b02      	ldr	r3, [sp, #8]
 800c0fe:	459b      	cmp	fp, r3
 800c100:	dd13      	ble.n	800c12a <__hexnan+0x7a>
 800c102:	454c      	cmp	r4, r9
 800c104:	d206      	bcs.n	800c114 <__hexnan+0x64>
 800c106:	2d07      	cmp	r5, #7
 800c108:	dc04      	bgt.n	800c114 <__hexnan+0x64>
 800c10a:	462a      	mov	r2, r5
 800c10c:	4649      	mov	r1, r9
 800c10e:	4620      	mov	r0, r4
 800c110:	f7ff ffa8 	bl	800c064 <L_shift>
 800c114:	4544      	cmp	r4, r8
 800c116:	d952      	bls.n	800c1be <__hexnan+0x10e>
 800c118:	2300      	movs	r3, #0
 800c11a:	f1a4 0904 	sub.w	r9, r4, #4
 800c11e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c122:	f8cd b008 	str.w	fp, [sp, #8]
 800c126:	464c      	mov	r4, r9
 800c128:	461d      	mov	r5, r3
 800c12a:	9903      	ldr	r1, [sp, #12]
 800c12c:	e7d7      	b.n	800c0de <__hexnan+0x2e>
 800c12e:	2a29      	cmp	r2, #41	@ 0x29
 800c130:	d157      	bne.n	800c1e2 <__hexnan+0x132>
 800c132:	3102      	adds	r1, #2
 800c134:	f8ca 1000 	str.w	r1, [sl]
 800c138:	f1bb 0f00 	cmp.w	fp, #0
 800c13c:	d051      	beq.n	800c1e2 <__hexnan+0x132>
 800c13e:	454c      	cmp	r4, r9
 800c140:	d206      	bcs.n	800c150 <__hexnan+0xa0>
 800c142:	2d07      	cmp	r5, #7
 800c144:	dc04      	bgt.n	800c150 <__hexnan+0xa0>
 800c146:	462a      	mov	r2, r5
 800c148:	4649      	mov	r1, r9
 800c14a:	4620      	mov	r0, r4
 800c14c:	f7ff ff8a 	bl	800c064 <L_shift>
 800c150:	4544      	cmp	r4, r8
 800c152:	d936      	bls.n	800c1c2 <__hexnan+0x112>
 800c154:	f1a8 0204 	sub.w	r2, r8, #4
 800c158:	4623      	mov	r3, r4
 800c15a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c15e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c162:	429f      	cmp	r7, r3
 800c164:	d2f9      	bcs.n	800c15a <__hexnan+0xaa>
 800c166:	1b3b      	subs	r3, r7, r4
 800c168:	f023 0303 	bic.w	r3, r3, #3
 800c16c:	3304      	adds	r3, #4
 800c16e:	3401      	adds	r4, #1
 800c170:	3e03      	subs	r6, #3
 800c172:	42b4      	cmp	r4, r6
 800c174:	bf88      	it	hi
 800c176:	2304      	movhi	r3, #4
 800c178:	4443      	add	r3, r8
 800c17a:	2200      	movs	r2, #0
 800c17c:	f843 2b04 	str.w	r2, [r3], #4
 800c180:	429f      	cmp	r7, r3
 800c182:	d2fb      	bcs.n	800c17c <__hexnan+0xcc>
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	b91b      	cbnz	r3, 800c190 <__hexnan+0xe0>
 800c188:	4547      	cmp	r7, r8
 800c18a:	d128      	bne.n	800c1de <__hexnan+0x12e>
 800c18c:	2301      	movs	r3, #1
 800c18e:	603b      	str	r3, [r7, #0]
 800c190:	2005      	movs	r0, #5
 800c192:	b007      	add	sp, #28
 800c194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c198:	3501      	adds	r5, #1
 800c19a:	2d08      	cmp	r5, #8
 800c19c:	f10b 0b01 	add.w	fp, fp, #1
 800c1a0:	dd06      	ble.n	800c1b0 <__hexnan+0x100>
 800c1a2:	4544      	cmp	r4, r8
 800c1a4:	d9c1      	bls.n	800c12a <__hexnan+0x7a>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1ac:	2501      	movs	r5, #1
 800c1ae:	3c04      	subs	r4, #4
 800c1b0:	6822      	ldr	r2, [r4, #0]
 800c1b2:	f000 000f 	and.w	r0, r0, #15
 800c1b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c1ba:	6020      	str	r0, [r4, #0]
 800c1bc:	e7b5      	b.n	800c12a <__hexnan+0x7a>
 800c1be:	2508      	movs	r5, #8
 800c1c0:	e7b3      	b.n	800c12a <__hexnan+0x7a>
 800c1c2:	9b01      	ldr	r3, [sp, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d0dd      	beq.n	800c184 <__hexnan+0xd4>
 800c1c8:	f1c3 0320 	rsb	r3, r3, #32
 800c1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d0:	40da      	lsrs	r2, r3
 800c1d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c1d6:	4013      	ands	r3, r2
 800c1d8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c1dc:	e7d2      	b.n	800c184 <__hexnan+0xd4>
 800c1de:	3f04      	subs	r7, #4
 800c1e0:	e7d0      	b.n	800c184 <__hexnan+0xd4>
 800c1e2:	2004      	movs	r0, #4
 800c1e4:	e7d5      	b.n	800c192 <__hexnan+0xe2>

0800c1e6 <__ascii_mbtowc>:
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	b901      	cbnz	r1, 800c1ec <__ascii_mbtowc+0x6>
 800c1ea:	a901      	add	r1, sp, #4
 800c1ec:	b142      	cbz	r2, 800c200 <__ascii_mbtowc+0x1a>
 800c1ee:	b14b      	cbz	r3, 800c204 <__ascii_mbtowc+0x1e>
 800c1f0:	7813      	ldrb	r3, [r2, #0]
 800c1f2:	600b      	str	r3, [r1, #0]
 800c1f4:	7812      	ldrb	r2, [r2, #0]
 800c1f6:	1e10      	subs	r0, r2, #0
 800c1f8:	bf18      	it	ne
 800c1fa:	2001      	movne	r0, #1
 800c1fc:	b002      	add	sp, #8
 800c1fe:	4770      	bx	lr
 800c200:	4610      	mov	r0, r2
 800c202:	e7fb      	b.n	800c1fc <__ascii_mbtowc+0x16>
 800c204:	f06f 0001 	mvn.w	r0, #1
 800c208:	e7f8      	b.n	800c1fc <__ascii_mbtowc+0x16>

0800c20a <_realloc_r>:
 800c20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c20e:	4680      	mov	r8, r0
 800c210:	4615      	mov	r5, r2
 800c212:	460c      	mov	r4, r1
 800c214:	b921      	cbnz	r1, 800c220 <_realloc_r+0x16>
 800c216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c21a:	4611      	mov	r1, r2
 800c21c:	f7fd be60 	b.w	8009ee0 <_malloc_r>
 800c220:	b92a      	cbnz	r2, 800c22e <_realloc_r+0x24>
 800c222:	f7fd fde9 	bl	8009df8 <_free_r>
 800c226:	2400      	movs	r4, #0
 800c228:	4620      	mov	r0, r4
 800c22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c22e:	f000 f840 	bl	800c2b2 <_malloc_usable_size_r>
 800c232:	4285      	cmp	r5, r0
 800c234:	4606      	mov	r6, r0
 800c236:	d802      	bhi.n	800c23e <_realloc_r+0x34>
 800c238:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c23c:	d8f4      	bhi.n	800c228 <_realloc_r+0x1e>
 800c23e:	4629      	mov	r1, r5
 800c240:	4640      	mov	r0, r8
 800c242:	f7fd fe4d 	bl	8009ee0 <_malloc_r>
 800c246:	4607      	mov	r7, r0
 800c248:	2800      	cmp	r0, #0
 800c24a:	d0ec      	beq.n	800c226 <_realloc_r+0x1c>
 800c24c:	42b5      	cmp	r5, r6
 800c24e:	462a      	mov	r2, r5
 800c250:	4621      	mov	r1, r4
 800c252:	bf28      	it	cs
 800c254:	4632      	movcs	r2, r6
 800c256:	f7ff fc45 	bl	800bae4 <memcpy>
 800c25a:	4621      	mov	r1, r4
 800c25c:	4640      	mov	r0, r8
 800c25e:	f7fd fdcb 	bl	8009df8 <_free_r>
 800c262:	463c      	mov	r4, r7
 800c264:	e7e0      	b.n	800c228 <_realloc_r+0x1e>

0800c266 <__ascii_wctomb>:
 800c266:	4603      	mov	r3, r0
 800c268:	4608      	mov	r0, r1
 800c26a:	b141      	cbz	r1, 800c27e <__ascii_wctomb+0x18>
 800c26c:	2aff      	cmp	r2, #255	@ 0xff
 800c26e:	d904      	bls.n	800c27a <__ascii_wctomb+0x14>
 800c270:	228a      	movs	r2, #138	@ 0x8a
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	f04f 30ff 	mov.w	r0, #4294967295
 800c278:	4770      	bx	lr
 800c27a:	700a      	strb	r2, [r1, #0]
 800c27c:	2001      	movs	r0, #1
 800c27e:	4770      	bx	lr

0800c280 <fiprintf>:
 800c280:	b40e      	push	{r1, r2, r3}
 800c282:	b503      	push	{r0, r1, lr}
 800c284:	4601      	mov	r1, r0
 800c286:	ab03      	add	r3, sp, #12
 800c288:	4805      	ldr	r0, [pc, #20]	@ (800c2a0 <fiprintf+0x20>)
 800c28a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c28e:	6800      	ldr	r0, [r0, #0]
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	f000 f83f 	bl	800c314 <_vfiprintf_r>
 800c296:	b002      	add	sp, #8
 800c298:	f85d eb04 	ldr.w	lr, [sp], #4
 800c29c:	b003      	add	sp, #12
 800c29e:	4770      	bx	lr
 800c2a0:	2000003c 	.word	0x2000003c

0800c2a4 <abort>:
 800c2a4:	b508      	push	{r3, lr}
 800c2a6:	2006      	movs	r0, #6
 800c2a8:	f000 fa08 	bl	800c6bc <raise>
 800c2ac:	2001      	movs	r0, #1
 800c2ae:	f7f5 ffe9 	bl	8002284 <_exit>

0800c2b2 <_malloc_usable_size_r>:
 800c2b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2b6:	1f18      	subs	r0, r3, #4
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	bfbc      	itt	lt
 800c2bc:	580b      	ldrlt	r3, [r1, r0]
 800c2be:	18c0      	addlt	r0, r0, r3
 800c2c0:	4770      	bx	lr

0800c2c2 <__sfputc_r>:
 800c2c2:	6893      	ldr	r3, [r2, #8]
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	b410      	push	{r4}
 800c2ca:	6093      	str	r3, [r2, #8]
 800c2cc:	da08      	bge.n	800c2e0 <__sfputc_r+0x1e>
 800c2ce:	6994      	ldr	r4, [r2, #24]
 800c2d0:	42a3      	cmp	r3, r4
 800c2d2:	db01      	blt.n	800c2d8 <__sfputc_r+0x16>
 800c2d4:	290a      	cmp	r1, #10
 800c2d6:	d103      	bne.n	800c2e0 <__sfputc_r+0x1e>
 800c2d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2dc:	f000 b932 	b.w	800c544 <__swbuf_r>
 800c2e0:	6813      	ldr	r3, [r2, #0]
 800c2e2:	1c58      	adds	r0, r3, #1
 800c2e4:	6010      	str	r0, [r2, #0]
 800c2e6:	7019      	strb	r1, [r3, #0]
 800c2e8:	4608      	mov	r0, r1
 800c2ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <__sfputs_r>:
 800c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f2:	4606      	mov	r6, r0
 800c2f4:	460f      	mov	r7, r1
 800c2f6:	4614      	mov	r4, r2
 800c2f8:	18d5      	adds	r5, r2, r3
 800c2fa:	42ac      	cmp	r4, r5
 800c2fc:	d101      	bne.n	800c302 <__sfputs_r+0x12>
 800c2fe:	2000      	movs	r0, #0
 800c300:	e007      	b.n	800c312 <__sfputs_r+0x22>
 800c302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c306:	463a      	mov	r2, r7
 800c308:	4630      	mov	r0, r6
 800c30a:	f7ff ffda 	bl	800c2c2 <__sfputc_r>
 800c30e:	1c43      	adds	r3, r0, #1
 800c310:	d1f3      	bne.n	800c2fa <__sfputs_r+0xa>
 800c312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c314 <_vfiprintf_r>:
 800c314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c318:	460d      	mov	r5, r1
 800c31a:	b09d      	sub	sp, #116	@ 0x74
 800c31c:	4614      	mov	r4, r2
 800c31e:	4698      	mov	r8, r3
 800c320:	4606      	mov	r6, r0
 800c322:	b118      	cbz	r0, 800c32c <_vfiprintf_r+0x18>
 800c324:	6a03      	ldr	r3, [r0, #32]
 800c326:	b90b      	cbnz	r3, 800c32c <_vfiprintf_r+0x18>
 800c328:	f7fc fdfa 	bl	8008f20 <__sinit>
 800c32c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c32e:	07d9      	lsls	r1, r3, #31
 800c330:	d405      	bmi.n	800c33e <_vfiprintf_r+0x2a>
 800c332:	89ab      	ldrh	r3, [r5, #12]
 800c334:	059a      	lsls	r2, r3, #22
 800c336:	d402      	bmi.n	800c33e <_vfiprintf_r+0x2a>
 800c338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c33a:	f7fc ff08 	bl	800914e <__retarget_lock_acquire_recursive>
 800c33e:	89ab      	ldrh	r3, [r5, #12]
 800c340:	071b      	lsls	r3, r3, #28
 800c342:	d501      	bpl.n	800c348 <_vfiprintf_r+0x34>
 800c344:	692b      	ldr	r3, [r5, #16]
 800c346:	b99b      	cbnz	r3, 800c370 <_vfiprintf_r+0x5c>
 800c348:	4629      	mov	r1, r5
 800c34a:	4630      	mov	r0, r6
 800c34c:	f000 f938 	bl	800c5c0 <__swsetup_r>
 800c350:	b170      	cbz	r0, 800c370 <_vfiprintf_r+0x5c>
 800c352:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c354:	07dc      	lsls	r4, r3, #31
 800c356:	d504      	bpl.n	800c362 <_vfiprintf_r+0x4e>
 800c358:	f04f 30ff 	mov.w	r0, #4294967295
 800c35c:	b01d      	add	sp, #116	@ 0x74
 800c35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c362:	89ab      	ldrh	r3, [r5, #12]
 800c364:	0598      	lsls	r0, r3, #22
 800c366:	d4f7      	bmi.n	800c358 <_vfiprintf_r+0x44>
 800c368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c36a:	f7fc fef1 	bl	8009150 <__retarget_lock_release_recursive>
 800c36e:	e7f3      	b.n	800c358 <_vfiprintf_r+0x44>
 800c370:	2300      	movs	r3, #0
 800c372:	9309      	str	r3, [sp, #36]	@ 0x24
 800c374:	2320      	movs	r3, #32
 800c376:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c37a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c37e:	2330      	movs	r3, #48	@ 0x30
 800c380:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c530 <_vfiprintf_r+0x21c>
 800c384:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c388:	f04f 0901 	mov.w	r9, #1
 800c38c:	4623      	mov	r3, r4
 800c38e:	469a      	mov	sl, r3
 800c390:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c394:	b10a      	cbz	r2, 800c39a <_vfiprintf_r+0x86>
 800c396:	2a25      	cmp	r2, #37	@ 0x25
 800c398:	d1f9      	bne.n	800c38e <_vfiprintf_r+0x7a>
 800c39a:	ebba 0b04 	subs.w	fp, sl, r4
 800c39e:	d00b      	beq.n	800c3b8 <_vfiprintf_r+0xa4>
 800c3a0:	465b      	mov	r3, fp
 800c3a2:	4622      	mov	r2, r4
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	f7ff ffa2 	bl	800c2f0 <__sfputs_r>
 800c3ac:	3001      	adds	r0, #1
 800c3ae:	f000 80a7 	beq.w	800c500 <_vfiprintf_r+0x1ec>
 800c3b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3b4:	445a      	add	r2, fp
 800c3b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f000 809f 	beq.w	800c500 <_vfiprintf_r+0x1ec>
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3cc:	f10a 0a01 	add.w	sl, sl, #1
 800c3d0:	9304      	str	r3, [sp, #16]
 800c3d2:	9307      	str	r3, [sp, #28]
 800c3d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3da:	4654      	mov	r4, sl
 800c3dc:	2205      	movs	r2, #5
 800c3de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e2:	4853      	ldr	r0, [pc, #332]	@ (800c530 <_vfiprintf_r+0x21c>)
 800c3e4:	f7f3 ff1c 	bl	8000220 <memchr>
 800c3e8:	9a04      	ldr	r2, [sp, #16]
 800c3ea:	b9d8      	cbnz	r0, 800c424 <_vfiprintf_r+0x110>
 800c3ec:	06d1      	lsls	r1, r2, #27
 800c3ee:	bf44      	itt	mi
 800c3f0:	2320      	movmi	r3, #32
 800c3f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3f6:	0713      	lsls	r3, r2, #28
 800c3f8:	bf44      	itt	mi
 800c3fa:	232b      	movmi	r3, #43	@ 0x2b
 800c3fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c400:	f89a 3000 	ldrb.w	r3, [sl]
 800c404:	2b2a      	cmp	r3, #42	@ 0x2a
 800c406:	d015      	beq.n	800c434 <_vfiprintf_r+0x120>
 800c408:	9a07      	ldr	r2, [sp, #28]
 800c40a:	4654      	mov	r4, sl
 800c40c:	2000      	movs	r0, #0
 800c40e:	f04f 0c0a 	mov.w	ip, #10
 800c412:	4621      	mov	r1, r4
 800c414:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c418:	3b30      	subs	r3, #48	@ 0x30
 800c41a:	2b09      	cmp	r3, #9
 800c41c:	d94b      	bls.n	800c4b6 <_vfiprintf_r+0x1a2>
 800c41e:	b1b0      	cbz	r0, 800c44e <_vfiprintf_r+0x13a>
 800c420:	9207      	str	r2, [sp, #28]
 800c422:	e014      	b.n	800c44e <_vfiprintf_r+0x13a>
 800c424:	eba0 0308 	sub.w	r3, r0, r8
 800c428:	fa09 f303 	lsl.w	r3, r9, r3
 800c42c:	4313      	orrs	r3, r2
 800c42e:	9304      	str	r3, [sp, #16]
 800c430:	46a2      	mov	sl, r4
 800c432:	e7d2      	b.n	800c3da <_vfiprintf_r+0xc6>
 800c434:	9b03      	ldr	r3, [sp, #12]
 800c436:	1d19      	adds	r1, r3, #4
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	9103      	str	r1, [sp, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	bfbb      	ittet	lt
 800c440:	425b      	neglt	r3, r3
 800c442:	f042 0202 	orrlt.w	r2, r2, #2
 800c446:	9307      	strge	r3, [sp, #28]
 800c448:	9307      	strlt	r3, [sp, #28]
 800c44a:	bfb8      	it	lt
 800c44c:	9204      	strlt	r2, [sp, #16]
 800c44e:	7823      	ldrb	r3, [r4, #0]
 800c450:	2b2e      	cmp	r3, #46	@ 0x2e
 800c452:	d10a      	bne.n	800c46a <_vfiprintf_r+0x156>
 800c454:	7863      	ldrb	r3, [r4, #1]
 800c456:	2b2a      	cmp	r3, #42	@ 0x2a
 800c458:	d132      	bne.n	800c4c0 <_vfiprintf_r+0x1ac>
 800c45a:	9b03      	ldr	r3, [sp, #12]
 800c45c:	1d1a      	adds	r2, r3, #4
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	9203      	str	r2, [sp, #12]
 800c462:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c466:	3402      	adds	r4, #2
 800c468:	9305      	str	r3, [sp, #20]
 800c46a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c540 <_vfiprintf_r+0x22c>
 800c46e:	7821      	ldrb	r1, [r4, #0]
 800c470:	2203      	movs	r2, #3
 800c472:	4650      	mov	r0, sl
 800c474:	f7f3 fed4 	bl	8000220 <memchr>
 800c478:	b138      	cbz	r0, 800c48a <_vfiprintf_r+0x176>
 800c47a:	9b04      	ldr	r3, [sp, #16]
 800c47c:	eba0 000a 	sub.w	r0, r0, sl
 800c480:	2240      	movs	r2, #64	@ 0x40
 800c482:	4082      	lsls	r2, r0
 800c484:	4313      	orrs	r3, r2
 800c486:	3401      	adds	r4, #1
 800c488:	9304      	str	r3, [sp, #16]
 800c48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c48e:	4829      	ldr	r0, [pc, #164]	@ (800c534 <_vfiprintf_r+0x220>)
 800c490:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c494:	2206      	movs	r2, #6
 800c496:	f7f3 fec3 	bl	8000220 <memchr>
 800c49a:	2800      	cmp	r0, #0
 800c49c:	d03f      	beq.n	800c51e <_vfiprintf_r+0x20a>
 800c49e:	4b26      	ldr	r3, [pc, #152]	@ (800c538 <_vfiprintf_r+0x224>)
 800c4a0:	bb1b      	cbnz	r3, 800c4ea <_vfiprintf_r+0x1d6>
 800c4a2:	9b03      	ldr	r3, [sp, #12]
 800c4a4:	3307      	adds	r3, #7
 800c4a6:	f023 0307 	bic.w	r3, r3, #7
 800c4aa:	3308      	adds	r3, #8
 800c4ac:	9303      	str	r3, [sp, #12]
 800c4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4b0:	443b      	add	r3, r7
 800c4b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4b4:	e76a      	b.n	800c38c <_vfiprintf_r+0x78>
 800c4b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4ba:	460c      	mov	r4, r1
 800c4bc:	2001      	movs	r0, #1
 800c4be:	e7a8      	b.n	800c412 <_vfiprintf_r+0xfe>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	3401      	adds	r4, #1
 800c4c4:	9305      	str	r3, [sp, #20]
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	f04f 0c0a 	mov.w	ip, #10
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4d2:	3a30      	subs	r2, #48	@ 0x30
 800c4d4:	2a09      	cmp	r2, #9
 800c4d6:	d903      	bls.n	800c4e0 <_vfiprintf_r+0x1cc>
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d0c6      	beq.n	800c46a <_vfiprintf_r+0x156>
 800c4dc:	9105      	str	r1, [sp, #20]
 800c4de:	e7c4      	b.n	800c46a <_vfiprintf_r+0x156>
 800c4e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e7f0      	b.n	800c4cc <_vfiprintf_r+0x1b8>
 800c4ea:	ab03      	add	r3, sp, #12
 800c4ec:	9300      	str	r3, [sp, #0]
 800c4ee:	462a      	mov	r2, r5
 800c4f0:	4b12      	ldr	r3, [pc, #72]	@ (800c53c <_vfiprintf_r+0x228>)
 800c4f2:	a904      	add	r1, sp, #16
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	f7fb febb 	bl	8008270 <_printf_float>
 800c4fa:	4607      	mov	r7, r0
 800c4fc:	1c78      	adds	r0, r7, #1
 800c4fe:	d1d6      	bne.n	800c4ae <_vfiprintf_r+0x19a>
 800c500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c502:	07d9      	lsls	r1, r3, #31
 800c504:	d405      	bmi.n	800c512 <_vfiprintf_r+0x1fe>
 800c506:	89ab      	ldrh	r3, [r5, #12]
 800c508:	059a      	lsls	r2, r3, #22
 800c50a:	d402      	bmi.n	800c512 <_vfiprintf_r+0x1fe>
 800c50c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c50e:	f7fc fe1f 	bl	8009150 <__retarget_lock_release_recursive>
 800c512:	89ab      	ldrh	r3, [r5, #12]
 800c514:	065b      	lsls	r3, r3, #25
 800c516:	f53f af1f 	bmi.w	800c358 <_vfiprintf_r+0x44>
 800c51a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c51c:	e71e      	b.n	800c35c <_vfiprintf_r+0x48>
 800c51e:	ab03      	add	r3, sp, #12
 800c520:	9300      	str	r3, [sp, #0]
 800c522:	462a      	mov	r2, r5
 800c524:	4b05      	ldr	r3, [pc, #20]	@ (800c53c <_vfiprintf_r+0x228>)
 800c526:	a904      	add	r1, sp, #16
 800c528:	4630      	mov	r0, r6
 800c52a:	f7fc f939 	bl	80087a0 <_printf_i>
 800c52e:	e7e4      	b.n	800c4fa <_vfiprintf_r+0x1e6>
 800c530:	0800d3c1 	.word	0x0800d3c1
 800c534:	0800d3cb 	.word	0x0800d3cb
 800c538:	08008271 	.word	0x08008271
 800c53c:	0800c2f1 	.word	0x0800c2f1
 800c540:	0800d3c7 	.word	0x0800d3c7

0800c544 <__swbuf_r>:
 800c544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c546:	460e      	mov	r6, r1
 800c548:	4614      	mov	r4, r2
 800c54a:	4605      	mov	r5, r0
 800c54c:	b118      	cbz	r0, 800c556 <__swbuf_r+0x12>
 800c54e:	6a03      	ldr	r3, [r0, #32]
 800c550:	b90b      	cbnz	r3, 800c556 <__swbuf_r+0x12>
 800c552:	f7fc fce5 	bl	8008f20 <__sinit>
 800c556:	69a3      	ldr	r3, [r4, #24]
 800c558:	60a3      	str	r3, [r4, #8]
 800c55a:	89a3      	ldrh	r3, [r4, #12]
 800c55c:	071a      	lsls	r2, r3, #28
 800c55e:	d501      	bpl.n	800c564 <__swbuf_r+0x20>
 800c560:	6923      	ldr	r3, [r4, #16]
 800c562:	b943      	cbnz	r3, 800c576 <__swbuf_r+0x32>
 800c564:	4621      	mov	r1, r4
 800c566:	4628      	mov	r0, r5
 800c568:	f000 f82a 	bl	800c5c0 <__swsetup_r>
 800c56c:	b118      	cbz	r0, 800c576 <__swbuf_r+0x32>
 800c56e:	f04f 37ff 	mov.w	r7, #4294967295
 800c572:	4638      	mov	r0, r7
 800c574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c576:	6823      	ldr	r3, [r4, #0]
 800c578:	6922      	ldr	r2, [r4, #16]
 800c57a:	1a98      	subs	r0, r3, r2
 800c57c:	6963      	ldr	r3, [r4, #20]
 800c57e:	b2f6      	uxtb	r6, r6
 800c580:	4283      	cmp	r3, r0
 800c582:	4637      	mov	r7, r6
 800c584:	dc05      	bgt.n	800c592 <__swbuf_r+0x4e>
 800c586:	4621      	mov	r1, r4
 800c588:	4628      	mov	r0, r5
 800c58a:	f7ff fa47 	bl	800ba1c <_fflush_r>
 800c58e:	2800      	cmp	r0, #0
 800c590:	d1ed      	bne.n	800c56e <__swbuf_r+0x2a>
 800c592:	68a3      	ldr	r3, [r4, #8]
 800c594:	3b01      	subs	r3, #1
 800c596:	60a3      	str	r3, [r4, #8]
 800c598:	6823      	ldr	r3, [r4, #0]
 800c59a:	1c5a      	adds	r2, r3, #1
 800c59c:	6022      	str	r2, [r4, #0]
 800c59e:	701e      	strb	r6, [r3, #0]
 800c5a0:	6962      	ldr	r2, [r4, #20]
 800c5a2:	1c43      	adds	r3, r0, #1
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d004      	beq.n	800c5b2 <__swbuf_r+0x6e>
 800c5a8:	89a3      	ldrh	r3, [r4, #12]
 800c5aa:	07db      	lsls	r3, r3, #31
 800c5ac:	d5e1      	bpl.n	800c572 <__swbuf_r+0x2e>
 800c5ae:	2e0a      	cmp	r6, #10
 800c5b0:	d1df      	bne.n	800c572 <__swbuf_r+0x2e>
 800c5b2:	4621      	mov	r1, r4
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	f7ff fa31 	bl	800ba1c <_fflush_r>
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	d0d9      	beq.n	800c572 <__swbuf_r+0x2e>
 800c5be:	e7d6      	b.n	800c56e <__swbuf_r+0x2a>

0800c5c0 <__swsetup_r>:
 800c5c0:	b538      	push	{r3, r4, r5, lr}
 800c5c2:	4b29      	ldr	r3, [pc, #164]	@ (800c668 <__swsetup_r+0xa8>)
 800c5c4:	4605      	mov	r5, r0
 800c5c6:	6818      	ldr	r0, [r3, #0]
 800c5c8:	460c      	mov	r4, r1
 800c5ca:	b118      	cbz	r0, 800c5d4 <__swsetup_r+0x14>
 800c5cc:	6a03      	ldr	r3, [r0, #32]
 800c5ce:	b90b      	cbnz	r3, 800c5d4 <__swsetup_r+0x14>
 800c5d0:	f7fc fca6 	bl	8008f20 <__sinit>
 800c5d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5d8:	0719      	lsls	r1, r3, #28
 800c5da:	d422      	bmi.n	800c622 <__swsetup_r+0x62>
 800c5dc:	06da      	lsls	r2, r3, #27
 800c5de:	d407      	bmi.n	800c5f0 <__swsetup_r+0x30>
 800c5e0:	2209      	movs	r2, #9
 800c5e2:	602a      	str	r2, [r5, #0]
 800c5e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5e8:	81a3      	strh	r3, [r4, #12]
 800c5ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ee:	e033      	b.n	800c658 <__swsetup_r+0x98>
 800c5f0:	0758      	lsls	r0, r3, #29
 800c5f2:	d512      	bpl.n	800c61a <__swsetup_r+0x5a>
 800c5f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5f6:	b141      	cbz	r1, 800c60a <__swsetup_r+0x4a>
 800c5f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5fc:	4299      	cmp	r1, r3
 800c5fe:	d002      	beq.n	800c606 <__swsetup_r+0x46>
 800c600:	4628      	mov	r0, r5
 800c602:	f7fd fbf9 	bl	8009df8 <_free_r>
 800c606:	2300      	movs	r3, #0
 800c608:	6363      	str	r3, [r4, #52]	@ 0x34
 800c60a:	89a3      	ldrh	r3, [r4, #12]
 800c60c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c610:	81a3      	strh	r3, [r4, #12]
 800c612:	2300      	movs	r3, #0
 800c614:	6063      	str	r3, [r4, #4]
 800c616:	6923      	ldr	r3, [r4, #16]
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	89a3      	ldrh	r3, [r4, #12]
 800c61c:	f043 0308 	orr.w	r3, r3, #8
 800c620:	81a3      	strh	r3, [r4, #12]
 800c622:	6923      	ldr	r3, [r4, #16]
 800c624:	b94b      	cbnz	r3, 800c63a <__swsetup_r+0x7a>
 800c626:	89a3      	ldrh	r3, [r4, #12]
 800c628:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c62c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c630:	d003      	beq.n	800c63a <__swsetup_r+0x7a>
 800c632:	4621      	mov	r1, r4
 800c634:	4628      	mov	r0, r5
 800c636:	f000 f883 	bl	800c740 <__smakebuf_r>
 800c63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c63e:	f013 0201 	ands.w	r2, r3, #1
 800c642:	d00a      	beq.n	800c65a <__swsetup_r+0x9a>
 800c644:	2200      	movs	r2, #0
 800c646:	60a2      	str	r2, [r4, #8]
 800c648:	6962      	ldr	r2, [r4, #20]
 800c64a:	4252      	negs	r2, r2
 800c64c:	61a2      	str	r2, [r4, #24]
 800c64e:	6922      	ldr	r2, [r4, #16]
 800c650:	b942      	cbnz	r2, 800c664 <__swsetup_r+0xa4>
 800c652:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c656:	d1c5      	bne.n	800c5e4 <__swsetup_r+0x24>
 800c658:	bd38      	pop	{r3, r4, r5, pc}
 800c65a:	0799      	lsls	r1, r3, #30
 800c65c:	bf58      	it	pl
 800c65e:	6962      	ldrpl	r2, [r4, #20]
 800c660:	60a2      	str	r2, [r4, #8]
 800c662:	e7f4      	b.n	800c64e <__swsetup_r+0x8e>
 800c664:	2000      	movs	r0, #0
 800c666:	e7f7      	b.n	800c658 <__swsetup_r+0x98>
 800c668:	2000003c 	.word	0x2000003c

0800c66c <_raise_r>:
 800c66c:	291f      	cmp	r1, #31
 800c66e:	b538      	push	{r3, r4, r5, lr}
 800c670:	4605      	mov	r5, r0
 800c672:	460c      	mov	r4, r1
 800c674:	d904      	bls.n	800c680 <_raise_r+0x14>
 800c676:	2316      	movs	r3, #22
 800c678:	6003      	str	r3, [r0, #0]
 800c67a:	f04f 30ff 	mov.w	r0, #4294967295
 800c67e:	bd38      	pop	{r3, r4, r5, pc}
 800c680:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c682:	b112      	cbz	r2, 800c68a <_raise_r+0x1e>
 800c684:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c688:	b94b      	cbnz	r3, 800c69e <_raise_r+0x32>
 800c68a:	4628      	mov	r0, r5
 800c68c:	f000 f830 	bl	800c6f0 <_getpid_r>
 800c690:	4622      	mov	r2, r4
 800c692:	4601      	mov	r1, r0
 800c694:	4628      	mov	r0, r5
 800c696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c69a:	f000 b817 	b.w	800c6cc <_kill_r>
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d00a      	beq.n	800c6b8 <_raise_r+0x4c>
 800c6a2:	1c59      	adds	r1, r3, #1
 800c6a4:	d103      	bne.n	800c6ae <_raise_r+0x42>
 800c6a6:	2316      	movs	r3, #22
 800c6a8:	6003      	str	r3, [r0, #0]
 800c6aa:	2001      	movs	r0, #1
 800c6ac:	e7e7      	b.n	800c67e <_raise_r+0x12>
 800c6ae:	2100      	movs	r1, #0
 800c6b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	4798      	blx	r3
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	e7e0      	b.n	800c67e <_raise_r+0x12>

0800c6bc <raise>:
 800c6bc:	4b02      	ldr	r3, [pc, #8]	@ (800c6c8 <raise+0xc>)
 800c6be:	4601      	mov	r1, r0
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	f7ff bfd3 	b.w	800c66c <_raise_r>
 800c6c6:	bf00      	nop
 800c6c8:	2000003c 	.word	0x2000003c

0800c6cc <_kill_r>:
 800c6cc:	b538      	push	{r3, r4, r5, lr}
 800c6ce:	4d07      	ldr	r5, [pc, #28]	@ (800c6ec <_kill_r+0x20>)
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	4608      	mov	r0, r1
 800c6d6:	4611      	mov	r1, r2
 800c6d8:	602b      	str	r3, [r5, #0]
 800c6da:	f7f5 fdc3 	bl	8002264 <_kill>
 800c6de:	1c43      	adds	r3, r0, #1
 800c6e0:	d102      	bne.n	800c6e8 <_kill_r+0x1c>
 800c6e2:	682b      	ldr	r3, [r5, #0]
 800c6e4:	b103      	cbz	r3, 800c6e8 <_kill_r+0x1c>
 800c6e6:	6023      	str	r3, [r4, #0]
 800c6e8:	bd38      	pop	{r3, r4, r5, pc}
 800c6ea:	bf00      	nop
 800c6ec:	200086e0 	.word	0x200086e0

0800c6f0 <_getpid_r>:
 800c6f0:	f7f5 bdb0 	b.w	8002254 <_getpid>

0800c6f4 <__swhatbuf_r>:
 800c6f4:	b570      	push	{r4, r5, r6, lr}
 800c6f6:	460c      	mov	r4, r1
 800c6f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6fc:	2900      	cmp	r1, #0
 800c6fe:	b096      	sub	sp, #88	@ 0x58
 800c700:	4615      	mov	r5, r2
 800c702:	461e      	mov	r6, r3
 800c704:	da0d      	bge.n	800c722 <__swhatbuf_r+0x2e>
 800c706:	89a3      	ldrh	r3, [r4, #12]
 800c708:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c70c:	f04f 0100 	mov.w	r1, #0
 800c710:	bf14      	ite	ne
 800c712:	2340      	movne	r3, #64	@ 0x40
 800c714:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c718:	2000      	movs	r0, #0
 800c71a:	6031      	str	r1, [r6, #0]
 800c71c:	602b      	str	r3, [r5, #0]
 800c71e:	b016      	add	sp, #88	@ 0x58
 800c720:	bd70      	pop	{r4, r5, r6, pc}
 800c722:	466a      	mov	r2, sp
 800c724:	f000 f848 	bl	800c7b8 <_fstat_r>
 800c728:	2800      	cmp	r0, #0
 800c72a:	dbec      	blt.n	800c706 <__swhatbuf_r+0x12>
 800c72c:	9901      	ldr	r1, [sp, #4]
 800c72e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c732:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c736:	4259      	negs	r1, r3
 800c738:	4159      	adcs	r1, r3
 800c73a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c73e:	e7eb      	b.n	800c718 <__swhatbuf_r+0x24>

0800c740 <__smakebuf_r>:
 800c740:	898b      	ldrh	r3, [r1, #12]
 800c742:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c744:	079d      	lsls	r5, r3, #30
 800c746:	4606      	mov	r6, r0
 800c748:	460c      	mov	r4, r1
 800c74a:	d507      	bpl.n	800c75c <__smakebuf_r+0x1c>
 800c74c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c750:	6023      	str	r3, [r4, #0]
 800c752:	6123      	str	r3, [r4, #16]
 800c754:	2301      	movs	r3, #1
 800c756:	6163      	str	r3, [r4, #20]
 800c758:	b003      	add	sp, #12
 800c75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c75c:	ab01      	add	r3, sp, #4
 800c75e:	466a      	mov	r2, sp
 800c760:	f7ff ffc8 	bl	800c6f4 <__swhatbuf_r>
 800c764:	9f00      	ldr	r7, [sp, #0]
 800c766:	4605      	mov	r5, r0
 800c768:	4639      	mov	r1, r7
 800c76a:	4630      	mov	r0, r6
 800c76c:	f7fd fbb8 	bl	8009ee0 <_malloc_r>
 800c770:	b948      	cbnz	r0, 800c786 <__smakebuf_r+0x46>
 800c772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c776:	059a      	lsls	r2, r3, #22
 800c778:	d4ee      	bmi.n	800c758 <__smakebuf_r+0x18>
 800c77a:	f023 0303 	bic.w	r3, r3, #3
 800c77e:	f043 0302 	orr.w	r3, r3, #2
 800c782:	81a3      	strh	r3, [r4, #12]
 800c784:	e7e2      	b.n	800c74c <__smakebuf_r+0xc>
 800c786:	89a3      	ldrh	r3, [r4, #12]
 800c788:	6020      	str	r0, [r4, #0]
 800c78a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c78e:	81a3      	strh	r3, [r4, #12]
 800c790:	9b01      	ldr	r3, [sp, #4]
 800c792:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c796:	b15b      	cbz	r3, 800c7b0 <__smakebuf_r+0x70>
 800c798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c79c:	4630      	mov	r0, r6
 800c79e:	f000 f81d 	bl	800c7dc <_isatty_r>
 800c7a2:	b128      	cbz	r0, 800c7b0 <__smakebuf_r+0x70>
 800c7a4:	89a3      	ldrh	r3, [r4, #12]
 800c7a6:	f023 0303 	bic.w	r3, r3, #3
 800c7aa:	f043 0301 	orr.w	r3, r3, #1
 800c7ae:	81a3      	strh	r3, [r4, #12]
 800c7b0:	89a3      	ldrh	r3, [r4, #12]
 800c7b2:	431d      	orrs	r5, r3
 800c7b4:	81a5      	strh	r5, [r4, #12]
 800c7b6:	e7cf      	b.n	800c758 <__smakebuf_r+0x18>

0800c7b8 <_fstat_r>:
 800c7b8:	b538      	push	{r3, r4, r5, lr}
 800c7ba:	4d07      	ldr	r5, [pc, #28]	@ (800c7d8 <_fstat_r+0x20>)
 800c7bc:	2300      	movs	r3, #0
 800c7be:	4604      	mov	r4, r0
 800c7c0:	4608      	mov	r0, r1
 800c7c2:	4611      	mov	r1, r2
 800c7c4:	602b      	str	r3, [r5, #0]
 800c7c6:	f7f5 fdad 	bl	8002324 <_fstat>
 800c7ca:	1c43      	adds	r3, r0, #1
 800c7cc:	d102      	bne.n	800c7d4 <_fstat_r+0x1c>
 800c7ce:	682b      	ldr	r3, [r5, #0]
 800c7d0:	b103      	cbz	r3, 800c7d4 <_fstat_r+0x1c>
 800c7d2:	6023      	str	r3, [r4, #0]
 800c7d4:	bd38      	pop	{r3, r4, r5, pc}
 800c7d6:	bf00      	nop
 800c7d8:	200086e0 	.word	0x200086e0

0800c7dc <_isatty_r>:
 800c7dc:	b538      	push	{r3, r4, r5, lr}
 800c7de:	4d06      	ldr	r5, [pc, #24]	@ (800c7f8 <_isatty_r+0x1c>)
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	4608      	mov	r0, r1
 800c7e6:	602b      	str	r3, [r5, #0]
 800c7e8:	f7f5 fdac 	bl	8002344 <_isatty>
 800c7ec:	1c43      	adds	r3, r0, #1
 800c7ee:	d102      	bne.n	800c7f6 <_isatty_r+0x1a>
 800c7f0:	682b      	ldr	r3, [r5, #0]
 800c7f2:	b103      	cbz	r3, 800c7f6 <_isatty_r+0x1a>
 800c7f4:	6023      	str	r3, [r4, #0]
 800c7f6:	bd38      	pop	{r3, r4, r5, pc}
 800c7f8:	200086e0 	.word	0x200086e0

0800c7fc <_init>:
 800c7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7fe:	bf00      	nop
 800c800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c802:	bc08      	pop	{r3}
 800c804:	469e      	mov	lr, r3
 800c806:	4770      	bx	lr

0800c808 <_fini>:
 800c808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80a:	bf00      	nop
 800c80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c80e:	bc08      	pop	{r3}
 800c810:	469e      	mov	lr, r3
 800c812:	4770      	bx	lr
